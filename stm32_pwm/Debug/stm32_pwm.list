
stm32_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002394  08002394  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002394  08002394  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002394  08002394  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800239c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  080023a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080023a8  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f48  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012d5  00000000  00000000  00026f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  00028ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c09a  00000000  00000000  000292b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006414  00000000  00000000  0003534a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00047789  00000000  00000000  0003b75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00082ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e14  00000000  00000000  00082f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800234c 	.word	0x0800234c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800234c 	.word	0x0800234c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa08 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f832 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8fa 	bl	8000424 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f878 	bl	8000324 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <main+0x68>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 f96e 	bl	8001518 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0x68>)
 800023e:	2100      	movs	r1, #0
 8000240:	0018      	movs	r0, r3
 8000242:	f001 f9bf 	bl	80015c4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	019b      	lsls	r3, r3, #6
 800024a:	4a10      	ldr	r2, [pc, #64]	; (800028c <main+0x6c>)
 800024c:	0019      	movs	r1, r3
 800024e:	0010      	movs	r0, r2
 8000250:	f000 fcc6 	bl	8000be0 <HAL_GPIO_ReadPin>
	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 130);
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2282      	movs	r2, #130	; 0x82
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
	  		HAL_Delay(1000);
 800025c:	23fa      	movs	r3, #250	; 0xfa
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fa4d 	bl	8000700 <HAL_Delay>

	 /* if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 75);
	  		HAL_Delay(1000);	*/

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	019b      	lsls	r3, r3, #6
 800026a:	4a08      	ldr	r2, [pc, #32]	; (800028c <main+0x6c>)
 800026c:	0019      	movs	r1, r3
 800026e:	0010      	movs	r0, r2
 8000270:	f000 fcb6 	bl	8000be0 <HAL_GPIO_ReadPin>
	  	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 20);
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <main+0x68>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2214      	movs	r2, #20
 800027a:	635a      	str	r2, [r3, #52]	; 0x34
	  	 	 HAL_Delay(1000);
 800027c:	23fa      	movs	r3, #250	; 0xfa
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fa3d 	bl	8000700 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 8000286:	e7de      	b.n	8000246 <main+0x26>
 8000288:	20000028 	.word	0x20000028
 800028c:	48000800 	.word	0x48000800

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b091      	sub	sp, #68	; 0x44
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2410      	movs	r4, #16
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 f84b 	bl	800233c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	2310      	movs	r3, #16
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f002 f844 	bl	800233c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2210      	movs	r2, #16
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	0212      	lsls	r2, r2, #8
 80002d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fc99 	bl	8000c1c <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ee:	f000 f8bf 	bl	8000470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	003b      	movs	r3, r7
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2202      	movs	r2, #2
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80002fe:	003b      	movs	r3, r7
 8000300:	22b0      	movs	r2, #176	; 0xb0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	2100      	movs	r1, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f000 ffa2 	bl	8001258 <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000318:	f000 f8aa 	bl	8000470 <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b011      	add	sp, #68	; 0x44
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08e      	sub	sp, #56	; 0x38
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	2328      	movs	r3, #40	; 0x28
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 f801 	bl	800233c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	2320      	movs	r3, #32
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2308      	movs	r3, #8
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f001 fff9 	bl	800233c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	231c      	movs	r3, #28
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f001 fff2 	bl	800233c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000358:	4b30      	ldr	r3, [pc, #192]	; (800041c <MX_TIM3_Init+0xf8>)
 800035a:	4a31      	ldr	r2, [pc, #196]	; (8000420 <MX_TIM3_Init+0xfc>)
 800035c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 800035e:	4b2f      	ldr	r3, [pc, #188]	; (800041c <MX_TIM3_Init+0xf8>)
 8000360:	2213      	movs	r2, #19
 8000362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <MX_TIM3_Init+0xf8>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800036a:	4b2c      	ldr	r3, [pc, #176]	; (800041c <MX_TIM3_Init+0xf8>)
 800036c:	22fa      	movs	r2, #250	; 0xfa
 800036e:	0092      	lsls	r2, r2, #2
 8000370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <MX_TIM3_Init+0xf8>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000378:	4b28      	ldr	r3, [pc, #160]	; (800041c <MX_TIM3_Init+0xf8>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800037e:	4b27      	ldr	r3, [pc, #156]	; (800041c <MX_TIM3_Init+0xf8>)
 8000380:	0018      	movs	r0, r3
 8000382:	f001 f89d 	bl	80014c0 <HAL_TIM_Base_Init>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800038a:	f000 f871 	bl	8000470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038e:	2128      	movs	r1, #40	; 0x28
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	0152      	lsls	r2, r2, #5
 8000396:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000398:	187a      	adds	r2, r7, r1
 800039a:	4b20      	ldr	r3, [pc, #128]	; (800041c <MX_TIM3_Init+0xf8>)
 800039c:	0011      	movs	r1, r2
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 fb2a 	bl	80019f8 <HAL_TIM_ConfigClockSource>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80003a8:	f000 f862 	bl	8000470 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_TIM3_Init+0xf8>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 f8d4 	bl	800155c <HAL_TIM_PWM_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80003b8:	f000 f85a 	bl	8000470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003bc:	2120      	movs	r1, #32
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003ca:	187a      	adds	r2, r7, r1
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_TIM3_Init+0xf8>)
 80003ce:	0011      	movs	r1, r2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 ff27 	bl	8002224 <HAL_TIMEx_MasterConfigSynchronization>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80003da:	f000 f849 	bl	8000470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2260      	movs	r2, #96	; 0x60
 80003e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	22fa      	movs	r2, #250	; 0xfa
 80003e8:	0052      	lsls	r2, r2, #1
 80003ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f8:	1d39      	adds	r1, r7, #4
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_TIM3_Init+0xf8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 fa42 	bl	8001888 <HAL_TIM_PWM_ConfigChannel>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000408:	f000 f832 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <MX_TIM3_Init+0xf8>)
 800040e:	0018      	movs	r0, r3
 8000410:	f000 f87e 	bl	8000510 <HAL_TIM_MspPostInit>

}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b00e      	add	sp, #56	; 0x38
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000028 	.word	0x20000028
 8000420:	40000400 	.word	0x40000400

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_GPIO_Init+0x48>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_GPIO_Init+0x48>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	03c9      	lsls	r1, r1, #15
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_GPIO_Init+0x48>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	03db      	lsls	r3, r3, #15
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_GPIO_Init+0x48>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_GPIO_Init+0x48>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0289      	lsls	r1, r1, #10
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_GPIO_Init+0x48>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	029b      	lsls	r3, r3, #10
 800045c:	4013      	ands	r3, r2
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]

}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40021000 	.word	0x40021000

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x44>)
 8000484:	699a      	ldr	r2, [r3, #24]
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <HAL_MspInit+0x44>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	619a      	str	r2, [r3, #24]
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_MspInit+0x44>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <HAL_MspInit+0x44>)
 800049c:	69da      	ldr	r2, [r3, #28]
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <HAL_MspInit+0x44>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0549      	lsls	r1, r1, #21
 80004a4:	430a      	orrs	r2, r1
 80004a6:	61da      	str	r2, [r3, #28]
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_MspInit+0x44>)
 80004aa:	69da      	ldr	r2, [r3, #28]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	055b      	lsls	r3, r3, #21
 80004b0:	4013      	ands	r3, r2
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_TIM_Base_MspInit+0x44>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d113      	bne.n	80004fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <HAL_TIM_Base_MspInit+0x48>)
 80004d8:	69da      	ldr	r2, [r3, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_TIM_Base_MspInit+0x48>)
 80004dc:	2102      	movs	r1, #2
 80004de:	430a      	orrs	r2, r1
 80004e0:	61da      	str	r2, [r3, #28]
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_TIM_Base_MspInit+0x48>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	2202      	movs	r2, #2
 80004e8:	4013      	ands	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2010      	movs	r0, #16
 80004f4:	f000 f9d2 	bl	800089c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004f8:	2010      	movs	r0, #16
 80004fa:	f000 f9e4 	bl	80008c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b004      	add	sp, #16
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40000400 	.word	0x40000400
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	230c      	movs	r3, #12
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	0018      	movs	r0, r3
 800051e:	2314      	movs	r3, #20
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f001 ff0a 	bl	800233c <memset>
  if(htim->Instance==TIM3)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a15      	ldr	r2, [pc, #84]	; (8000584 <HAL_TIM_MspPostInit+0x74>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d124      	bne.n	800057c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_TIM_MspPostInit+0x78>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_TIM_MspPostInit+0x78>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_TIM_MspPostInit+0x78>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800054e:	210c      	movs	r1, #12
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2240      	movs	r2, #64	; 0x40
 8000554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2201      	movs	r2, #1
 800056c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	187a      	adds	r2, r7, r1
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f9c2 	bl	8000900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b008      	add	sp, #32
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40000400 	.word	0x40000400
 8000588:	40021000 	.word	0x40021000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f888 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <TIM3_IRQHandler+0x14>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 f848 	bl	800165c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000028 	.word	0x20000028

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490e      	ldr	r1, [pc, #56]	; (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0b      	ldr	r4, [pc, #44]	; (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800060e:	f7ff ffe3 	bl	80005d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000612:	f001 fe6f 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe03 	bl	8000220 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000628:	0800239c 	.word	0x0800239c
  ldr r2, =_sbss
 800062c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000630:	2000006c 	.word	0x2000006c

08000634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_IRQHandler>
	...

08000638 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_Init+0x24>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_Init+0x24>)
 8000642:	2110      	movs	r1, #16
 8000644:	430a      	orrs	r2, r1
 8000646:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f809 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064e:	f7ff ff15 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
}
 8000654:	0018      	movs	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_InitTick+0x5c>)
 800066a:	681c      	ldr	r4, [r3, #0]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_InitTick+0x60>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	23fa      	movs	r3, #250	; 0xfa
 8000674:	0098      	lsls	r0, r3, #2
 8000676:	f7ff fd47 	bl	8000108 <__udivsi3>
 800067a:	0003      	movs	r3, r0
 800067c:	0019      	movs	r1, r3
 800067e:	0020      	movs	r0, r4
 8000680:	f7ff fd42 	bl	8000108 <__udivsi3>
 8000684:	0003      	movs	r3, r0
 8000686:	0018      	movs	r0, r3
 8000688:	f000 f92d 	bl	80008e6 <HAL_SYSTICK_Config>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e00f      	b.n	80006b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d80b      	bhi.n	80006b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	2301      	movs	r3, #1
 800069e:	425b      	negs	r3, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f8fa 	bl	800089c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_InitTick+0x64>)
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b003      	add	sp, #12
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	18d2      	adds	r2, r2, r3
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_IncTick+0x20>)
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000068 	.word	0x20000068

080006ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000068 	.word	0x20000068

08000700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000708:	f7ff fff0 	bl	80006ec <HAL_GetTick>
 800070c:	0003      	movs	r3, r0
 800070e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	d005      	beq.n	8000726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_Delay+0x40>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	001a      	movs	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	189b      	adds	r3, r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	f7ff ffe0 	bl	80006ec <HAL_GetTick>
 800072c:	0002      	movs	r2, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	429a      	cmp	r2, r3
 8000736:	d8f7      	bhi.n	8000728 <HAL_Delay+0x28>
  {
  }
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b004      	add	sp, #16
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000008 	.word	0x20000008

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	0002      	movs	r2, r0
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b7f      	cmp	r3, #127	; 0x7f
 8000756:	d809      	bhi.n	800076c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	001a      	movs	r2, r3
 800075e:	231f      	movs	r3, #31
 8000760:	401a      	ands	r2, r3
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_EnableIRQ+0x30>)
 8000764:	2101      	movs	r1, #1
 8000766:	4091      	lsls	r1, r2
 8000768:	000a      	movs	r2, r1
 800076a:	601a      	str	r2, [r3, #0]
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b7f      	cmp	r3, #127	; 0x7f
 800078c:	d828      	bhi.n	80007e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <__NVIC_SetPriority+0xd4>)
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b25b      	sxtb	r3, r3
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	33c0      	adds	r3, #192	; 0xc0
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	589b      	ldr	r3, [r3, r2]
 800079e:	1dfa      	adds	r2, r7, #7
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	0011      	movs	r1, r2
 80007a4:	2203      	movs	r2, #3
 80007a6:	400a      	ands	r2, r1
 80007a8:	00d2      	lsls	r2, r2, #3
 80007aa:	21ff      	movs	r1, #255	; 0xff
 80007ac:	4091      	lsls	r1, r2
 80007ae:	000a      	movs	r2, r1
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	401a      	ands	r2, r3
 80007b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	401a      	ands	r2, r3
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	0018      	movs	r0, r3
 80007c4:	2303      	movs	r3, #3
 80007c6:	4003      	ands	r3, r0
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	481f      	ldr	r0, [pc, #124]	; (800084c <__NVIC_SetPriority+0xd4>)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	33c0      	adds	r3, #192	; 0xc0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007de:	e031      	b.n	8000844 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <__NVIC_SetPriority+0xd8>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	0019      	movs	r1, r3
 80007e8:	230f      	movs	r3, #15
 80007ea:	400b      	ands	r3, r1
 80007ec:	3b08      	subs	r3, #8
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	3306      	adds	r3, #6
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1dfa      	adds	r2, r7, #7
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	2203      	movs	r2, #3
 8000802:	400a      	ands	r2, r1
 8000804:	00d2      	lsls	r2, r2, #3
 8000806:	21ff      	movs	r1, #255	; 0xff
 8000808:	4091      	lsls	r1, r2
 800080a:	000a      	movs	r2, r1
 800080c:	43d2      	mvns	r2, r2
 800080e:	401a      	ands	r2, r3
 8000810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	019b      	lsls	r3, r3, #6
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	401a      	ands	r2, r3
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	0018      	movs	r0, r3
 8000820:	2303      	movs	r3, #3
 8000822:	4003      	ands	r3, r0
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <__NVIC_SetPriority+0xd8>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	001c      	movs	r4, r3
 8000830:	230f      	movs	r3, #15
 8000832:	4023      	ands	r3, r4
 8000834:	3b08      	subs	r3, #8
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	430a      	orrs	r2, r1
 800083a:	3306      	adds	r3, #6
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	18c3      	adds	r3, r0, r3
 8000840:	3304      	adds	r3, #4
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b003      	add	sp, #12
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <SysTick_Config+0x40>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d901      	bls.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e010      	b.n	800088c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <SysTick_Config+0x44>)
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	3a01      	subs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	2301      	movs	r3, #1
 8000874:	425b      	negs	r3, r3
 8000876:	2103      	movs	r1, #3
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff7d 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SysTick_Config+0x44>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x44>)
 8000886:	2207      	movs	r2, #7
 8000888:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088a:	2300      	movs	r3, #0
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}
 8000894:	00ffffff 	.word	0x00ffffff
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	210f      	movs	r1, #15
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	1c02      	adds	r2, r0, #0
 80008ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff ff5d 	bl	8000778 <__NVIC_SetPriority>
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	0002      	movs	r2, r0
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff33 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ffaf 	bl	8000854 <SysTick_Config>
 80008f6:	0003      	movs	r3, r0
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b002      	add	sp, #8
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e14f      	b.n	8000bb0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4091      	lsls	r1, r2
 800091a:	000a      	movs	r2, r1
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d100      	bne.n	8000928 <HAL_GPIO_Init+0x28>
 8000926:	e140      	b.n	8000baa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d00b      	beq.n	8000948 <HAL_GPIO_Init+0x48>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d007      	beq.n	8000948 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093c:	2b11      	cmp	r3, #17
 800093e:	d003      	beq.n	8000948 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b12      	cmp	r3, #18
 8000946:	d130      	bne.n	80009aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	409a      	lsls	r2, r3
 8000956:	0013      	movs	r3, r2
 8000958:	43da      	mvns	r2, r3
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	409a      	lsls	r2, r3
 800096a:	0013      	movs	r3, r2
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097e:	2201      	movs	r2, #1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	43da      	mvns	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	2201      	movs	r2, #1
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	43da      	mvns	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0xea>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d123      	bne.n	8000a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	58d3      	ldr	r3, [r2, r3]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2207      	movs	r2, #7
 80009fc:	4013      	ands	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	43da      	mvns	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2107      	movs	r1, #7
 8000a16:	400b      	ands	r3, r1
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	08da      	lsrs	r2, r3, #3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3208      	adds	r2, #8
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	401a      	ands	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	055b      	lsls	r3, r3, #21
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d100      	bne.n	8000a74 <HAL_GPIO_Init+0x174>
 8000a72:	e09a      	b.n	8000baa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a74:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <HAL_GPIO_Init+0x2c8>)
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <HAL_GPIO_Init+0x2c8>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	619a      	str	r2, [r3, #24]
 8000a80:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <HAL_GPIO_Init+0x2c8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4013      	ands	r3, r2
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a8c:	4a4f      	ldr	r2, [pc, #316]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	589b      	ldr	r3, [r3, r2]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	2390      	movs	r3, #144	; 0x90
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x1e2>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a44      	ldr	r2, [pc, #272]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x1de>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <HAL_GPIO_Init+0x2d4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x1da>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a42      	ldr	r2, [pc, #264]	; (8000bd8 <HAL_GPIO_Init+0x2d8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x1d6>
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	400a      	ands	r2, r1
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af4:	4935      	ldr	r1, [pc, #212]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43da      	mvns	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	035b      	lsls	r3, r3, #13
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43da      	mvns	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	039b      	lsls	r3, r3, #14
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	40da      	lsrs	r2, r3
 8000bb8:	1e13      	subs	r3, r2, #0
 8000bba:	d000      	beq.n	8000bbe <HAL_GPIO_Init+0x2be>
 8000bbc:	e6a8      	b.n	8000910 <HAL_GPIO_Init+0x10>
  } 
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b006      	add	sp, #24
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	48000c00 	.word	0x48000c00
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	000a      	movs	r2, r1
 8000bea:	1cbb      	adds	r3, r7, #2
 8000bec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	1cba      	adds	r2, r7, #2
 8000bf4:	8812      	ldrh	r2, [r2, #0]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d004      	beq.n	8000c04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e003      	b.n	8000c0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c04:	230f      	movs	r3, #15
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
  }
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e305      	b.n	800123a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	d100      	bne.n	8000c3a <HAL_RCC_OscConfig+0x1e>
 8000c38:	e08d      	b.n	8000d56 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c3a:	4bc5      	ldr	r3, [pc, #788]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	220c      	movs	r2, #12
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d00e      	beq.n	8000c64 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c46:	4bc2      	ldr	r3, [pc, #776]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d116      	bne.n	8000c80 <HAL_RCC_OscConfig+0x64>
 8000c52:	4bbf      	ldr	r3, [pc, #764]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	23c0      	movs	r3, #192	; 0xc0
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d10d      	bne.n	8000c80 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	4bba      	ldr	r3, [pc, #744]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <HAL_RCC_OscConfig+0x56>
 8000c70:	e070      	b.n	8000d54 <HAL_RCC_OscConfig+0x138>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d000      	beq.n	8000c7c <HAL_RCC_OscConfig+0x60>
 8000c7a:	e06b      	b.n	8000d54 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e2dc      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d107      	bne.n	8000c98 <HAL_RCC_OscConfig+0x7c>
 8000c88:	4bb1      	ldr	r3, [pc, #708]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4bb0      	ldr	r3, [pc, #704]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0249      	lsls	r1, r1, #9
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e02f      	b.n	8000cf8 <HAL_RCC_OscConfig+0xdc>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10c      	bne.n	8000cba <HAL_RCC_OscConfig+0x9e>
 8000ca0:	4bab      	ldr	r3, [pc, #684]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4baa      	ldr	r3, [pc, #680]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000ca6:	49ab      	ldr	r1, [pc, #684]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	4ba8      	ldr	r3, [pc, #672]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4ba7      	ldr	r3, [pc, #668]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cb2:	49a9      	ldr	r1, [pc, #676]	; (8000f58 <HAL_RCC_OscConfig+0x33c>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	e01e      	b.n	8000cf8 <HAL_RCC_OscConfig+0xdc>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d10e      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xc4>
 8000cc2:	4ba3      	ldr	r3, [pc, #652]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4ba2      	ldr	r3, [pc, #648]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	02c9      	lsls	r1, r1, #11
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	4b9f      	ldr	r3, [pc, #636]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b9e      	ldr	r3, [pc, #632]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	0249      	lsls	r1, r1, #9
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e00b      	b.n	8000cf8 <HAL_RCC_OscConfig+0xdc>
 8000ce0:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b9a      	ldr	r3, [pc, #616]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000ce6:	499b      	ldr	r1, [pc, #620]	; (8000f54 <HAL_RCC_OscConfig+0x338>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b97      	ldr	r3, [pc, #604]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000cf2:	4999      	ldr	r1, [pc, #612]	; (8000f58 <HAL_RCC_OscConfig+0x33c>)
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d014      	beq.n	8000d2a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fcf4 	bl	80006ec <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fcef 	bl	80006ec <HAL_GetTick>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b64      	cmp	r3, #100	; 0x64
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e28e      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1c:	4b8c      	ldr	r3, [pc, #560]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	029b      	lsls	r3, r3, #10
 8000d24:	4013      	ands	r3, r2
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0xee>
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fcdf 	bl	80006ec <HAL_GetTick>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fcda 	bl	80006ec <HAL_GetTick>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e279      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d46:	4b82      	ldr	r3, [pc, #520]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d1f0      	bne.n	8000d34 <HAL_RCC_OscConfig+0x118>
 8000d52:	e000      	b.n	8000d56 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d100      	bne.n	8000d62 <HAL_RCC_OscConfig+0x146>
 8000d60:	e06c      	b.n	8000e3c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d62:	4b7b      	ldr	r3, [pc, #492]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	220c      	movs	r2, #12
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d00e      	beq.n	8000d8a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d6c:	4b78      	ldr	r3, [pc, #480]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	220c      	movs	r2, #12
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d11f      	bne.n	8000db8 <HAL_RCC_OscConfig+0x19c>
 8000d78:	4b75      	ldr	r3, [pc, #468]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	025b      	lsls	r3, r3, #9
 8000d80:	401a      	ands	r2, r3
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	4b71      	ldr	r3, [pc, #452]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2202      	movs	r2, #2
 8000d90:	4013      	ands	r3, r2
 8000d92:	d005      	beq.n	8000da0 <HAL_RCC_OscConfig+0x184>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d001      	beq.n	8000da0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e24c      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da0:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	22f8      	movs	r2, #248	; 0xf8
 8000da6:	4393      	bics	r3, r2
 8000da8:	0019      	movs	r1, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	00da      	lsls	r2, r3, #3
 8000db0:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	e041      	b.n	8000e3c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d024      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fc8e 	bl	80006ec <HAL_GetTick>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fc89 	bl	80006ec <HAL_GetTick>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e228      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2202      	movs	r2, #2
 8000dee:	4013      	ands	r3, r2
 8000df0:	d0f1      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	22f8      	movs	r2, #248	; 0xf8
 8000df8:	4393      	bics	r3, r2
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	00da      	lsls	r2, r3, #3
 8000e02:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e018      	b.n	8000e3c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0a:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	438a      	bics	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fc69 	bl	80006ec <HAL_GetTick>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e20:	f7ff fc64 	bl	80006ec <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e203      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e32:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2202      	movs	r2, #2
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d1f1      	bne.n	8000e20 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2208      	movs	r2, #8
 8000e42:	4013      	ands	r3, r2
 8000e44:	d036      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d019      	beq.n	8000e82 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e52:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fc47 	bl	80006ec <HAL_GetTick>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc42 	bl	80006ec <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1e1      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d0f1      	beq.n	8000e64 <HAL_RCC_OscConfig+0x248>
 8000e80:	e018      	b.n	8000eb4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fc2d 	bl	80006ec <HAL_GetTick>
 8000e92:	0003      	movs	r3, r0
 8000e94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc28 	bl	80006ec <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1c7      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d1f1      	bne.n	8000e98 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d100      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2a4>
 8000ebe:	e0b5      	b.n	800102c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec0:	231f      	movs	r3, #31
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000eca:	69da      	ldr	r2, [r3, #28]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	055b      	lsls	r3, r3, #21
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d111      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000ed6:	69da      	ldr	r2, [r3, #28]
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	0549      	lsls	r1, r1, #21
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	61da      	str	r2, [r3, #28]
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000ee4:	69da      	ldr	r2, [r3, #28]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	055b      	lsls	r3, r3, #21
 8000eea:	4013      	ands	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ef0:	231f      	movs	r3, #31
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_RCC_OscConfig+0x340>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d11a      	bne.n	8000f3a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_RCC_OscConfig+0x340>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_RCC_OscConfig+0x340>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	0049      	lsls	r1, r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fbeb 	bl	80006ec <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1c:	f7ff fbe6 	bl	80006ec <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e185      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_RCC_OscConfig+0x340>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10e      	bne.n	8000f60 <HAL_RCC_OscConfig+0x344>
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <HAL_RCC_OscConfig+0x334>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	e035      	b.n	8000fbc <HAL_RCC_OscConfig+0x3a0>
 8000f50:	40021000 	.word	0x40021000
 8000f54:	fffeffff 	.word	0xfffeffff
 8000f58:	fffbffff 	.word	0xfffbffff
 8000f5c:	40007000 	.word	0x40007000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x366>
 8000f68:	4bb6      	ldr	r3, [pc, #728]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	4bb5      	ldr	r3, [pc, #724]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	438a      	bics	r2, r1
 8000f72:	621a      	str	r2, [r3, #32]
 8000f74:	4bb3      	ldr	r3, [pc, #716]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4bb2      	ldr	r3, [pc, #712]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	621a      	str	r2, [r3, #32]
 8000f80:	e01c      	b.n	8000fbc <HAL_RCC_OscConfig+0x3a0>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b05      	cmp	r3, #5
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x388>
 8000f8a:	4bae      	ldr	r3, [pc, #696]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f8c:	6a1a      	ldr	r2, [r3, #32]
 8000f8e:	4bad      	ldr	r3, [pc, #692]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f90:	2104      	movs	r1, #4
 8000f92:	430a      	orrs	r2, r1
 8000f94:	621a      	str	r2, [r3, #32]
 8000f96:	4bab      	ldr	r3, [pc, #684]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	4baa      	ldr	r3, [pc, #680]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0x3a0>
 8000fa4:	4ba7      	ldr	r3, [pc, #668]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000fa6:	6a1a      	ldr	r2, [r3, #32]
 8000fa8:	4ba6      	ldr	r3, [pc, #664]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	438a      	bics	r2, r1
 8000fae:	621a      	str	r2, [r3, #32]
 8000fb0:	4ba4      	ldr	r3, [pc, #656]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	4ba3      	ldr	r3, [pc, #652]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	438a      	bics	r2, r1
 8000fba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d014      	beq.n	8000fee <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fb92 	bl	80006ec <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	e009      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fce:	f7ff fb8d 	bl	80006ec <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a9b      	ldr	r2, [pc, #620]	; (8001248 <HAL_RCC_OscConfig+0x62c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e12b      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe2:	4b98      	ldr	r3, [pc, #608]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x3b2>
 8000fec:	e013      	b.n	8001016 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fb7d 	bl	80006ec <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff6:	e009      	b.n	800100c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fb78 	bl	80006ec <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a91      	ldr	r2, [pc, #580]	; (8001248 <HAL_RCC_OscConfig+0x62c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e116      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100c:	4b8d      	ldr	r3, [pc, #564]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	2202      	movs	r2, #2
 8001012:	4013      	ands	r3, r2
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001016:	231f      	movs	r3, #31
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001020:	4b88      	ldr	r3, [pc, #544]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	4b87      	ldr	r3, [pc, #540]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001026:	4989      	ldr	r1, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x630>)
 8001028:	400a      	ands	r2, r1
 800102a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2210      	movs	r2, #16
 8001032:	4013      	ands	r3, r2
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d12a      	bne.n	8001094 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800103e:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001044:	2104      	movs	r1, #4
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800104a:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001050:	2101      	movs	r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb49 	bl	80006ec <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001060:	f7ff fb44 	bl	80006ec <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e0e3      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	2202      	movs	r2, #2
 8001078:	4013      	ands	r3, r2
 800107a:	d0f1      	beq.n	8001060 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001080:	22f8      	movs	r2, #248	; 0xf8
 8001082:	4393      	bics	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	00da      	lsls	r2, r3, #3
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800108e:	430a      	orrs	r2, r1
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
 8001092:	e034      	b.n	80010fe <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	3305      	adds	r3, #5
 800109a:	d111      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800109c:	4b69      	ldr	r3, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800109e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010a2:	2104      	movs	r1, #4
 80010a4:	438a      	bics	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010a8:	4b66      	ldr	r3, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	22f8      	movs	r2, #248	; 0xf8
 80010ae:	4393      	bics	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	00da      	lsls	r2, r3, #3
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	e01e      	b.n	80010fe <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c0:	4b60      	ldr	r3, [pc, #384]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	430a      	orrs	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010cc:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	438a      	bics	r2, r1
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb08 	bl	80006ec <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e2:	f7ff fb03 	bl	80006ec <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0a2      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f1      	bne.n	80010e2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d100      	bne.n	8001108 <HAL_RCC_OscConfig+0x4ec>
 8001106:	e097      	b.n	8001238 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x4fa>
 8001114:	e06b      	b.n	80011ee <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d14c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001124:	494a      	ldr	r1, [pc, #296]	; (8001250 <HAL_RCC_OscConfig+0x634>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fadf 	bl	80006ec <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fada 	bl	80006ec <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e079      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	049b      	lsls	r3, r3, #18
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	220f      	movs	r2, #15
 8001158:	4393      	bics	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001162:	430a      	orrs	r2, r1
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <HAL_RCC_OscConfig+0x638>)
 800116c:	4013      	ands	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	431a      	orrs	r2, r3
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0449      	lsls	r1, r1, #17
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff faad 	bl	80006ec <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff faa8 	bl	80006ec <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e047      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	049b      	lsls	r3, r3, #18
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x57c>
 80011b6:	e03f      	b.n	8001238 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80011be:	4924      	ldr	r1, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x634>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fa92 	bl	80006ec <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fa8d 	bl	80006ec <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e02c      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	049b      	lsls	r3, r3, #18
 80011e8:	4013      	ands	r3, r2
 80011ea:	d1f0      	bne.n	80011ce <HAL_RCC_OscConfig+0x5b2>
 80011ec:	e024      	b.n	8001238 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e01f      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_RCC_OscConfig+0x628>)
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	429a      	cmp	r2, r3
 8001214:	d10e      	bne.n	8001234 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	220f      	movs	r2, #15
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d107      	bne.n	8001234 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	23f0      	movs	r3, #240	; 0xf0
 8001228:	039b      	lsls	r3, r3, #14
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b008      	add	sp, #32
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021000 	.word	0x40021000
 8001248:	00001388 	.word	0x00001388
 800124c:	efffffff 	.word	0xefffffff
 8001250:	feffffff 	.word	0xfeffffff
 8001254:	ffc27fff 	.word	0xffc27fff

08001258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b3      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d911      	bls.n	800129e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e09a      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d015      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2204      	movs	r2, #4
 80012ae:	4013      	ands	r3, r2
 80012b0:	d006      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012b8:	21e0      	movs	r1, #224	; 0xe0
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	22f0      	movs	r2, #240	; 0xf0
 80012c6:	4393      	bics	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	d040      	beq.n	8001360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	4013      	ands	r3, r2
 80012f0:	d114      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e06e      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049b      	lsls	r3, r3, #18
 8001306:	4013      	ands	r3, r2
 8001308:	d108      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e062      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e05b      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4393      	bics	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff f9dc 	bl	80006ec <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001338:	e009      	b.n	800134e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133a:	f7ff f9d7 	bl	80006ec <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_RCC_ClockConfig+0x18c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e042      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	401a      	ands	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d1ec      	bne.n	800133a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d211      	bcs.n	8001392 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	4393      	bics	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e020      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_RCC_ClockConfig+0x190>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013b0:	f000 f820 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013b4:	0001      	movs	r1, r0
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	220f      	movs	r2, #15
 80013be:	4013      	ands	r3, r2
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_RCC_ClockConfig+0x194>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	000a      	movs	r2, r1
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_ClockConfig+0x198>)
 80013ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff f947 	bl	8000660 <HAL_InitTick>
  
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	00001388 	.word	0x00001388
 80013e8:	fffff8ff 	.word	0xfffff8ff
 80013ec:	08002384 	.word	0x08002384
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08f      	sub	sp, #60	; 0x3c
 80013f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80013fa:	2314      	movs	r3, #20
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	4a2c      	ldr	r2, [pc, #176]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001400:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001402:	c313      	stmia	r3!, {r0, r1, r4}
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800140c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800140e:	c313      	stmia	r3!, {r0, r1, r4}
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	220c      	movs	r2, #12
 8001432:	4013      	ands	r3, r2
 8001434:	2b04      	cmp	r3, #4
 8001436:	d002      	beq.n	800143e <HAL_RCC_GetSysClockFreq+0x4a>
 8001438:	2b08      	cmp	r3, #8
 800143a:	d003      	beq.n	8001444 <HAL_RCC_GetSysClockFreq+0x50>
 800143c:	e02f      	b.n	800149e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001442:	e02f      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	220f      	movs	r2, #15
 800144a:	4013      	ands	r3, r2
 800144c:	2214      	movs	r2, #20
 800144e:	18ba      	adds	r2, r7, r2
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	220f      	movs	r2, #15
 800145a:	4013      	ands	r3, r2
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001464:	23c0      	movs	r3, #192	; 0xc0
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	401a      	ands	r2, r3
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	429a      	cmp	r2, r3
 8001470:	d109      	bne.n	8001486 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001476:	f7fe fe47 	bl	8000108 <__udivsi3>
 800147a:	0003      	movs	r3, r0
 800147c:	001a      	movs	r2, r3
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	4353      	muls	r3, r2
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
 8001484:	e008      	b.n	8001498 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800148a:	f7fe fe3d 	bl	8000108 <__udivsi3>
 800148e:	0003      	movs	r3, r0
 8001490:	001a      	movs	r2, r3
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	4353      	muls	r3, r2
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800149c:	e002      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc8>)
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b00f      	add	sp, #60	; 0x3c
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	08002364 	.word	0x08002364
 80014b4:	08002374 	.word	0x08002374
 80014b8:	40021000 	.word	0x40021000
 80014bc:	007a1200 	.word	0x007a1200

080014c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e01e      	b.n	8001510 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	223d      	movs	r2, #61	; 0x3d
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d107      	bne.n	80014ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	223c      	movs	r2, #60	; 0x3c
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7fe ffeb 	bl	80004c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	223d      	movs	r2, #61	; 0x3d
 80014f2:	2102      	movs	r1, #2
 80014f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	0019      	movs	r1, r3
 8001500:	0010      	movs	r0, r2
 8001502:	f000 fb5f 	bl	8001bc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	223d      	movs	r2, #61	; 0x3d
 800150a:	2101      	movs	r1, #1
 800150c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	223d      	movs	r2, #61	; 0x3d
 8001524:	2102      	movs	r1, #2
 8001526:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2207      	movs	r2, #7
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d007      	beq.n	800154a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	223d      	movs	r2, #61	; 0x3d
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e01e      	b.n	80015ac <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	223d      	movs	r2, #61	; 0x3d
 8001572:	5c9b      	ldrb	r3, [r3, r2]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d107      	bne.n	800158a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	223c      	movs	r2, #60	; 0x3c
 800157e:	2100      	movs	r1, #0
 8001580:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f000 f815 	bl	80015b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	223d      	movs	r2, #61	; 0x3d
 800158e:	2102      	movs	r1, #2
 8001590:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3304      	adds	r3, #4
 800159a:	0019      	movs	r1, r3
 800159c:	0010      	movs	r0, r2
 800159e:	f000 fb11 	bl	8001bc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	223d      	movs	r2, #61	; 0x3d
 80015a6:	2101      	movs	r1, #1
 80015a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	2201      	movs	r2, #1
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fe00 	bl	80021dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_TIM_PWM_Start+0x88>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00e      	beq.n	8001604 <HAL_TIM_PWM_Start+0x40>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_TIM_PWM_Start+0x8c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_TIM_PWM_Start+0x40>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_TIM_PWM_Start+0x90>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_TIM_PWM_Start+0x40>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <HAL_TIM_PWM_Start+0x94>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_TIM_PWM_Start+0x44>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_TIM_PWM_Start+0x46>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0209      	lsls	r1, r1, #8
 800161c:	430a      	orrs	r2, r1
 800161e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2207      	movs	r2, #7
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d007      	beq.n	8001642 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40012c00 	.word	0x40012c00
 8001650:	40014000 	.word	0x40014000
 8001654:	40014400 	.word	0x40014400
 8001658:	40014800 	.word	0x40014800

0800165c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	2b02      	cmp	r3, #2
 8001670:	d124      	bne.n	80016bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	2b02      	cmp	r3, #2
 800167e:	d11d      	bne.n	80016bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2203      	movs	r2, #3
 8001686:	4252      	negs	r2, r2
 8001688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2203      	movs	r2, #3
 8001698:	4013      	ands	r3, r2
 800169a:	d004      	beq.n	80016a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 fa78 	bl	8001b94 <HAL_TIM_IC_CaptureCallback>
 80016a4:	e007      	b.n	80016b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 fa6b 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 fa77 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2204      	movs	r2, #4
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d125      	bne.n	8001716 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2204      	movs	r2, #4
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d11e      	bne.n	8001716 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2205      	movs	r2, #5
 80016de:	4252      	negs	r2, r2
 80016e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2202      	movs	r2, #2
 80016e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d004      	beq.n	8001700 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 fa4b 	bl	8001b94 <HAL_TIM_IC_CaptureCallback>
 80016fe:	e007      	b.n	8001710 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0018      	movs	r0, r3
 8001704:	f000 fa3e 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0018      	movs	r0, r3
 800170c:	f000 fa4a 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2208      	movs	r2, #8
 800171e:	4013      	ands	r3, r2
 8001720:	2b08      	cmp	r3, #8
 8001722:	d124      	bne.n	800176e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2208      	movs	r2, #8
 800172c:	4013      	ands	r3, r2
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11d      	bne.n	800176e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2209      	movs	r2, #9
 8001738:	4252      	negs	r2, r2
 800173a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2204      	movs	r2, #4
 8001740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2203      	movs	r2, #3
 800174a:	4013      	ands	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f000 fa1f 	bl	8001b94 <HAL_TIM_IC_CaptureCallback>
 8001756:	e007      	b.n	8001768 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fa12 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fa1e 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2210      	movs	r2, #16
 8001776:	4013      	ands	r3, r2
 8001778:	2b10      	cmp	r3, #16
 800177a:	d125      	bne.n	80017c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2210      	movs	r2, #16
 8001784:	4013      	ands	r3, r2
 8001786:	2b10      	cmp	r3, #16
 8001788:	d11e      	bne.n	80017c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2211      	movs	r2, #17
 8001790:	4252      	negs	r2, r2
 8001792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2208      	movs	r2, #8
 8001798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	23c0      	movs	r3, #192	; 0xc0
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d004      	beq.n	80017b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f9f2 	bl	8001b94 <HAL_TIM_IC_CaptureCallback>
 80017b0:	e007      	b.n	80017c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f9e5 	bl	8001b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 f9f1 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10f      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d108      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2202      	movs	r2, #2
 80017ea:	4252      	negs	r2, r2
 80017ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 f9bf 	bl	8001b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	4013      	ands	r3, r2
 8001800:	2b80      	cmp	r3, #128	; 0x80
 8001802:	d10f      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	4013      	ands	r3, r2
 800180e:	2b80      	cmp	r3, #128	; 0x80
 8001810:	d108      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2281      	movs	r2, #129	; 0x81
 8001818:	4252      	negs	r2, r2
 800181a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 fd60 	bl	80022e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	4013      	ands	r3, r2
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d10f      	bne.n	8001852 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	4013      	ands	r3, r2
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d108      	bne.n	8001852 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2241      	movs	r2, #65	; 0x41
 8001846:	4252      	negs	r2, r2
 8001848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0018      	movs	r0, r3
 800184e:	f000 f9b1 	bl	8001bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2220      	movs	r2, #32
 800185a:	4013      	ands	r3, r2
 800185c:	2b20      	cmp	r3, #32
 800185e:	d10f      	bne.n	8001880 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2220      	movs	r2, #32
 8001868:	4013      	ands	r3, r2
 800186a:	2b20      	cmp	r3, #32
 800186c:	d108      	bne.n	8001880 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2221      	movs	r2, #33	; 0x21
 8001874:	4252      	negs	r2, r2
 8001876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fd2a 	bl	80022d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	223c      	movs	r2, #60	; 0x3c
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800189e:	2302      	movs	r3, #2
 80018a0:	e0a4      	b.n	80019ec <HAL_TIM_PWM_ConfigChannel+0x164>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	223c      	movs	r2, #60	; 0x3c
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	223d      	movs	r2, #61	; 0x3d
 80018ae:	2102      	movs	r1, #2
 80018b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d029      	beq.n	800190c <HAL_TIM_PWM_ConfigChannel+0x84>
 80018b8:	d802      	bhi.n	80018c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80018be:	e08c      	b.n	80019da <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d046      	beq.n	8001952 <HAL_TIM_PWM_ConfigChannel+0xca>
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d065      	beq.n	8001994 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80018c8:	e087      	b.n	80019da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f9ec 	bl	8001cb0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2108      	movs	r1, #8
 80018e4:	430a      	orrs	r2, r1
 80018e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2104      	movs	r1, #4
 80018f4:	438a      	bics	r2, r1
 80018f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6999      	ldr	r1, [r3, #24]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	619a      	str	r2, [r3, #24]
      break;
 800190a:	e066      	b.n	80019da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fa53 	bl	8001dc0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0109      	lsls	r1, r1, #4
 8001928:	430a      	orrs	r2, r1
 800192a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	492f      	ldr	r1, [pc, #188]	; (80019f4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001938:	400a      	ands	r2, r1
 800193a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6999      	ldr	r1, [r3, #24]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	021a      	lsls	r2, r3, #8
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	619a      	str	r2, [r3, #24]
      break;
 8001950:	e043      	b.n	80019da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fab4 	bl	8001ec8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2108      	movs	r1, #8
 800196c:	430a      	orrs	r2, r1
 800196e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2104      	movs	r1, #4
 800197c:	438a      	bics	r2, r1
 800197e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69d9      	ldr	r1, [r3, #28]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	61da      	str	r2, [r3, #28]
      break;
 8001992:	e022      	b.n	80019da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f000 fb19 	bl	8001fd4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	0109      	lsls	r1, r1, #4
 80019b0:	430a      	orrs	r2, r1
 80019b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69d9      	ldr	r1, [r3, #28]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	021a      	lsls	r2, r3, #8
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
      break;
 80019d8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	223d      	movs	r2, #61	; 0x3d
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	223c      	movs	r2, #60	; 0x3c
 80019e6:	2100      	movs	r1, #0
 80019e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	fffffbff 	.word	0xfffffbff

080019f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	223c      	movs	r2, #60	; 0x3c
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_TIM_ConfigClockSource+0x18>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0ab      	b.n	8001b68 <HAL_TIM_ConfigClockSource+0x170>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	223c      	movs	r2, #60	; 0x3c
 8001a14:	2101      	movs	r1, #1
 8001a16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	223d      	movs	r2, #61	; 0x3d
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2277      	movs	r2, #119	; 0x77
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_TIM_ConfigClockSource+0x178>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b40      	cmp	r3, #64	; 0x40
 8001a46:	d100      	bne.n	8001a4a <HAL_TIM_ConfigClockSource+0x52>
 8001a48:	e06b      	b.n	8001b22 <HAL_TIM_ConfigClockSource+0x12a>
 8001a4a:	d80e      	bhi.n	8001a6a <HAL_TIM_ConfigClockSource+0x72>
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d100      	bne.n	8001a52 <HAL_TIM_ConfigClockSource+0x5a>
 8001a50:	e077      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x14a>
 8001a52:	d803      	bhi.n	8001a5c <HAL_TIM_ConfigClockSource+0x64>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d100      	bne.n	8001a5a <HAL_TIM_ConfigClockSource+0x62>
 8001a58:	e073      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a5a:	e07c      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d100      	bne.n	8001a62 <HAL_TIM_ConfigClockSource+0x6a>
 8001a60:	e06f      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x14a>
 8001a62:	2b30      	cmp	r3, #48	; 0x30
 8001a64:	d100      	bne.n	8001a68 <HAL_TIM_ConfigClockSource+0x70>
 8001a66:	e06c      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001a68:	e075      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a6a:	2b70      	cmp	r3, #112	; 0x70
 8001a6c:	d00e      	beq.n	8001a8c <HAL_TIM_ConfigClockSource+0x94>
 8001a6e:	d804      	bhi.n	8001a7a <HAL_TIM_ConfigClockSource+0x82>
 8001a70:	2b50      	cmp	r3, #80	; 0x50
 8001a72:	d036      	beq.n	8001ae2 <HAL_TIM_ConfigClockSource+0xea>
 8001a74:	2b60      	cmp	r3, #96	; 0x60
 8001a76:	d044      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001a78:	e06d      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0152      	lsls	r2, r2, #5
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d068      	beq.n	8001b54 <HAL_TIM_ConfigClockSource+0x15c>
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	0192      	lsls	r2, r2, #6
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d017      	beq.n	8001aba <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001a8a:	e064      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f000 fb7e 	bl	800219c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2277      	movs	r2, #119	; 0x77
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	609a      	str	r2, [r3, #8]
      break;
 8001ab8:	e04d      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f000 fb67 	bl	800219c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	01c9      	lsls	r1, r1, #7
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
      break;
 8001ae0:	e039      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	001a      	movs	r2, r3
 8001af0:	f000 fada 	bl	80020a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2150      	movs	r1, #80	; 0x50
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 fb34 	bl	8002168 <TIM_ITRx_SetConfig>
      break;
 8001b00:	e029      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	001a      	movs	r2, r3
 8001b10:	f000 faf8 	bl	8002104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2160      	movs	r1, #96	; 0x60
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 fb24 	bl	8002168 <TIM_ITRx_SetConfig>
      break;
 8001b20:	e019      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	001a      	movs	r2, r3
 8001b30:	f000 faba 	bl	80020a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fb14 	bl	8002168 <TIM_ITRx_SetConfig>
      break;
 8001b40:	e009      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	f000 fb0b 	bl	8002168 <TIM_ITRx_SetConfig>
      break;
 8001b52:	e000      	b.n	8001b56 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001b54:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	223d      	movs	r2, #61	; 0x3d
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	223c      	movs	r2, #60	; 0x3c
 8001b62:	2100      	movs	r1, #0
 8001b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b004      	add	sp, #16
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	ffff00ff 	.word	0xffff00ff

08001b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <TIM_Base_SetConfig+0xd0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d003      	beq.n	8001be4 <TIM_Base_SetConfig+0x20>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <TIM_Base_SetConfig+0xd4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d108      	bne.n	8001bf6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2270      	movs	r2, #112	; 0x70
 8001be8:	4393      	bics	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a26      	ldr	r2, [pc, #152]	; (8001c94 <TIM_Base_SetConfig+0xd0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <TIM_Base_SetConfig+0xd4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00f      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <TIM_Base_SetConfig+0xd8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00b      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <TIM_Base_SetConfig+0xdc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <TIM_Base_SetConfig+0xe0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <TIM_Base_SetConfig+0xe4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d108      	bne.n	8001c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <TIM_Base_SetConfig+0xe8>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	001a      	movs	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <TIM_Base_SetConfig+0xd0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00b      	beq.n	8001c7e <TIM_Base_SetConfig+0xba>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <TIM_Base_SetConfig+0xdc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <TIM_Base_SetConfig+0xba>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <TIM_Base_SetConfig+0xe0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d003      	beq.n	8001c7e <TIM_Base_SetConfig+0xba>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <TIM_Base_SetConfig+0xe4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d103      	bne.n	8001c86 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	615a      	str	r2, [r3, #20]
}
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b004      	add	sp, #16
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40002000 	.word	0x40002000
 8001ca0:	40014000 	.word	0x40014000
 8001ca4:	40014400 	.word	0x40014400
 8001ca8:	40014800 	.word	0x40014800
 8001cac:	fffffcff 	.word	0xfffffcff

08001cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2270      	movs	r2, #112	; 0x70
 8001cde:	4393      	bics	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <TIM_OC1_SetConfig+0xf8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00b      	beq.n	8001d26 <TIM_OC1_SetConfig+0x76>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <TIM_OC1_SetConfig+0xfc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <TIM_OC1_SetConfig+0x76>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <TIM_OC1_SetConfig+0x100>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <TIM_OC1_SetConfig+0x76>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <TIM_OC1_SetConfig+0x104>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10c      	bne.n	8001d40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <TIM_OC1_SetConfig+0xf8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00b      	beq.n	8001d60 <TIM_OC1_SetConfig+0xb0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <TIM_OC1_SetConfig+0xfc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <TIM_OC1_SetConfig+0xb0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <TIM_OC1_SetConfig+0x100>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d003      	beq.n	8001d60 <TIM_OC1_SetConfig+0xb0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <TIM_OC1_SetConfig+0x104>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <TIM_OC1_SetConfig+0x108>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <TIM_OC1_SetConfig+0x10c>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	621a      	str	r2, [r3, #32]
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b006      	add	sp, #24
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40014000 	.word	0x40014000
 8001db0:	40014400 	.word	0x40014400
 8001db4:	40014800 	.word	0x40014800
 8001db8:	fffffeff 	.word	0xfffffeff
 8001dbc:	fffffdff 	.word	0xfffffdff

08001dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <TIM_OC2_SetConfig+0xe8>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <TIM_OC2_SetConfig+0xec>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <TIM_OC2_SetConfig+0xf0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10d      	bne.n	8001e3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	4393      	bics	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <TIM_OC2_SetConfig+0xf0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <TIM_OC2_SetConfig+0x9e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <TIM_OC2_SetConfig+0xf4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <TIM_OC2_SetConfig+0x9e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <TIM_OC2_SetConfig+0xf8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_OC2_SetConfig+0x9e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <TIM_OC2_SetConfig+0xfc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d113      	bne.n	8001e86 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <TIM_OC2_SetConfig+0x100>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <TIM_OC2_SetConfig+0x104>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	621a      	str	r2, [r3, #32]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b006      	add	sp, #24
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	ffff8fff 	.word	0xffff8fff
 8001eac:	fffffcff 	.word	0xfffffcff
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	40014400 	.word	0x40014400
 8001ebc:	40014800 	.word	0x40014800
 8001ec0:	fffffbff 	.word	0xfffffbff
 8001ec4:	fffff7ff 	.word	0xfffff7ff

08001ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a35      	ldr	r2, [pc, #212]	; (8001fac <TIM_OC3_SetConfig+0xe4>)
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2270      	movs	r2, #112	; 0x70
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2203      	movs	r2, #3
 8001efc:	4393      	bics	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <TIM_OC3_SetConfig+0xe8>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <TIM_OC3_SetConfig+0xec>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10d      	bne.n	8001f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <TIM_OC3_SetConfig+0xf0>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <TIM_OC3_SetConfig+0xf4>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <TIM_OC3_SetConfig+0xec>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <TIM_OC3_SetConfig+0x9a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <TIM_OC3_SetConfig+0xf8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <TIM_OC3_SetConfig+0x9a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <TIM_OC3_SetConfig+0xfc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <TIM_OC3_SetConfig+0x9a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <TIM_OC3_SetConfig+0x100>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d113      	bne.n	8001f8a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <TIM_OC3_SetConfig+0x104>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <TIM_OC3_SetConfig+0x108>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	621a      	str	r2, [r3, #32]
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b006      	add	sp, #24
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	fffffeff 	.word	0xfffffeff
 8001fb0:	fffffdff 	.word	0xfffffdff
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	fffff7ff 	.word	0xfffff7ff
 8001fbc:	fffffbff 	.word	0xfffffbff
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	ffffefff 	.word	0xffffefff
 8001fd0:	ffffdfff 	.word	0xffffdfff

08001fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <TIM_OC4_SetConfig+0xb0>)
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <TIM_OC4_SetConfig+0xb4>)
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <TIM_OC4_SetConfig+0xb8>)
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <TIM_OC4_SetConfig+0xbc>)
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	031b      	lsls	r3, r3, #12
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a19      	ldr	r2, [pc, #100]	; (8002094 <TIM_OC4_SetConfig+0xc0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00b      	beq.n	800204c <TIM_OC4_SetConfig+0x78>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <TIM_OC4_SetConfig+0xc4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_OC4_SetConfig+0x78>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <TIM_OC4_SetConfig+0xc8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_OC4_SetConfig+0x78>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <TIM_OC4_SetConfig+0xcc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d109      	bne.n	8002060 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <TIM_OC4_SetConfig+0xd0>)
 8002050:	4013      	ands	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	621a      	str	r2, [r3, #32]
}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b006      	add	sp, #24
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	ffffefff 	.word	0xffffefff
 8002088:	ffff8fff 	.word	0xffff8fff
 800208c:	fffffcff 	.word	0xfffffcff
 8002090:	ffffdfff 	.word	0xffffdfff
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40014000 	.word	0x40014000
 800209c:	40014400 	.word	0x40014400
 80020a0:	40014800 	.word	0x40014800
 80020a4:	ffffbfff 	.word	0xffffbfff

080020a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2201      	movs	r2, #1
 80020c0:	4393      	bics	r3, r2
 80020c2:	001a      	movs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	22f0      	movs	r2, #240	; 0xf0
 80020d2:	4393      	bics	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	220a      	movs	r2, #10
 80020e4:	4393      	bics	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b006      	add	sp, #24
 8002102:	bd80      	pop	{r7, pc}

08002104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2210      	movs	r2, #16
 8002116:	4393      	bics	r3, r2
 8002118:	001a      	movs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <TIM_TI2_ConfigInputStage+0x60>)
 800212e:	4013      	ands	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	031b      	lsls	r3, r3, #12
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	22a0      	movs	r2, #160	; 0xa0
 8002140:	4393      	bics	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b006      	add	sp, #24
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	ffff0fff 	.word	0xffff0fff

08002168 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2270      	movs	r2, #112	; 0x70
 800217c:	4393      	bics	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	2207      	movs	r2, #7
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <TIM_ETR_SetConfig+0x3c>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	021a      	lsls	r2, r3, #8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	431a      	orrs	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b006      	add	sp, #24
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	ffff00ff 	.word	0xffff00ff

080021dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	221f      	movs	r2, #31
 80021ec:	4013      	ands	r3, r2
 80021ee:	2201      	movs	r2, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	43d2      	mvns	r2, r2
 80021fe:	401a      	ands	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	211f      	movs	r1, #31
 800220c:	400b      	ands	r3, r1
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4099      	lsls	r1, r3
 8002212:	000b      	movs	r3, r1
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	621a      	str	r2, [r3, #32]
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	223c      	movs	r2, #60	; 0x3c
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002238:	2302      	movs	r3, #2
 800223a:	e041      	b.n	80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	223c      	movs	r2, #60	; 0x3c
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	223d      	movs	r2, #61	; 0x3d
 8002248:	2102      	movs	r1, #2
 800224a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2270      	movs	r2, #112	; 0x70
 8002260:	4393      	bics	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10c      	bne.n	80022ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	4393      	bics	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	223d      	movs	r2, #61	; 0x3d
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	223c      	movs	r2, #60	; 0x3c
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b004      	add	sp, #16
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40014000 	.word	0x40014000

080022d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	2600      	movs	r6, #0
 80022f8:	4d0c      	ldr	r5, [pc, #48]	; (800232c <__libc_init_array+0x38>)
 80022fa:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fc:	1b64      	subs	r4, r4, r5
 80022fe:	10a4      	asrs	r4, r4, #2
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	2600      	movs	r6, #0
 8002306:	f000 f821 	bl	800234c <_init>
 800230a:	4d0a      	ldr	r5, [pc, #40]	; (8002334 <__libc_init_array+0x40>)
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <__libc_init_array+0x44>)
 800230e:	1b64      	subs	r4, r4, r5
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	00b3      	lsls	r3, r6, #2
 800231a:	58eb      	ldr	r3, [r5, r3]
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	00b3      	lsls	r3, r6, #2
 8002324:	58eb      	ldr	r3, [r5, r3]
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	08002394 	.word	0x08002394
 8002330:	08002394 	.word	0x08002394
 8002334:	08002394 	.word	0x08002394
 8002338:	08002398 	.word	0x08002398

0800233c <memset>:
 800233c:	0003      	movs	r3, r0
 800233e:	1812      	adds	r2, r2, r0
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <memset+0xa>
 8002344:	4770      	bx	lr
 8002346:	7019      	strb	r1, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	e7f9      	b.n	8002340 <memset+0x4>

0800234c <_init>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr

08002358 <_fini>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr
