
stm32_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca0  08002ca0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca0  08002ca0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca0  08002ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002cb4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008851  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001515  00000000  00000000  00028885  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002a730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ced9  00000000  00000000  0002b008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073d7  00000000  00000000  00037ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004d38c  00000000  00000000  0003f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008c644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002214  00000000  00000000  0008c6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c58 	.word	0x08002c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c58 	.word	0x08002c58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fab8 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83c 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f964 	bl	80004f8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f8e2 	bl	80003f8 <MX_TIM3_Init>
  MX_ADC_Init();
 8000234:	f000 f886 	bl	8000344 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <main+0x74>)
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fdf2 	bl	8001e24 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <main+0x74>)
 8000242:	2100      	movs	r1, #0
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fe43 	bl	8001ed0 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_ADC_Start(&hadc);
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <main+0x78>)
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fc47 	bl	8000ae0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc, 5) == HAL_OK);
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <main+0x78>)
 8000254:	2105      	movs	r1, #5
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fc96 	bl	8000b88 <HAL_ADC_PollForConversion>

	  {
		  potadc = HAL_ADC_GetValue(&hadc);
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <main+0x78>)
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fd96 	bl	8000d90 <HAL_ADC_GetValue>
 8000264:	0002      	movs	r2, r0
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <main+0x7c>)
 8000268:	601a      	str	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servopot);
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <main+0x74>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <main+0x80>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_ADC_Start_IT(&hadc);
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <main+0x78>)
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fd18 	bl	8000cac <HAL_ADC_Start_IT>
	  }
	  	  servopot = potadc/6;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <main+0x7c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2106      	movs	r1, #6
 8000282:	0018      	movs	r0, r3
 8000284:	f7ff ff40 	bl	8000108 <__udivsi3>
 8000288:	0003      	movs	r3, r0
 800028a:	001a      	movs	r2, r3
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <main+0x80>)
 800028e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc);
 8000290:	e7db      	b.n	800024a <main+0x2a>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000028 	.word	0x20000028
 8000298:	2000006c 	.word	0x2000006c
 800029c:	20000068 	.word	0x20000068
 80002a0:	200000ac 	.word	0x200000ac

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b091      	sub	sp, #68	; 0x44
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	2410      	movs	r4, #16
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2330      	movs	r3, #48	; 0x30
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 fcc7 	bl	8002c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	003b      	movs	r3, r7
 80002bc:	0018      	movs	r0, r3
 80002be:	2310      	movs	r3, #16
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f002 fcc0 	bl	8002c48 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2212      	movs	r2, #18
 80002ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2201      	movs	r2, #1
 80002d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2201      	movs	r2, #1
 80002da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2210      	movs	r2, #16
 80002e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2210      	movs	r2, #16
 80002e6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2202      	movs	r2, #2
 80002ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	0212      	lsls	r2, r2, #8
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	187b      	adds	r3, r7, r1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 f90f 	bl	8001528 <HAL_RCC_OscConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030e:	f000 f919 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	003b      	movs	r3, r7
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	003b      	movs	r3, r7
 800031a:	2202      	movs	r2, #2
 800031c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 800031e:	003b      	movs	r3, r7
 8000320:	22b0      	movs	r2, #176	; 0xb0
 8000322:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	003b      	movs	r3, r7
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fc18 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000338:	f000 f904 	bl	8000544 <Error_Handler>
  }
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b011      	add	sp, #68	; 0x44
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	230c      	movs	r3, #12
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f002 fc78 	bl	8002c48 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000358:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <MX_ADC_Init+0xac>)
 800035a:	4a26      	ldr	r2, [pc, #152]	; (80003f4 <MX_ADC_Init+0xb0>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <MX_ADC_Init+0xac>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <MX_ADC_Init+0xac>)
 8000366:	2208      	movs	r2, #8
 8000368:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_ADC_Init+0xac>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_ADC_Init+0xac>)
 8000372:	2201      	movs	r2, #1
 8000374:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_ADC_Init+0xac>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_ADC_Init+0xac>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_ADC_Init+0xac>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_ADC_Init+0xac>)
 800038a:	2200      	movs	r2, #0
 800038c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_ADC_Init+0xac>)
 8000390:	2200      	movs	r2, #0
 8000392:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_ADC_Init+0xac>)
 8000396:	22c2      	movs	r2, #194	; 0xc2
 8000398:	32ff      	adds	r2, #255	; 0xff
 800039a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_ADC_Init+0xac>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_ADC_Init+0xac>)
 80003a4:	2224      	movs	r2, #36	; 0x24
 80003a6:	2100      	movs	r1, #0
 80003a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_ADC_Init+0xac>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_ADC_Init+0xac>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fa54 	bl	8000860 <HAL_ADC_Init>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003bc:	f000 f8c2 	bl	8000544 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	0152      	lsls	r2, r2, #5
 80003cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2205      	movs	r2, #5
 80003d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d4:	1d3a      	adds	r2, r7, #4
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_ADC_Init+0xac>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fce4 	bl	8000da8 <HAL_ADC_ConfigChannel>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80003e4:	f000 f8ae 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b004      	add	sp, #16
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	2000006c 	.word	0x2000006c
 80003f4:	40012400 	.word	0x40012400

080003f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08e      	sub	sp, #56	; 0x38
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fe:	2328      	movs	r3, #40	; 0x28
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	2310      	movs	r3, #16
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f002 fc1d 	bl	8002c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040e:	2320      	movs	r3, #32
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	0018      	movs	r0, r3
 8000414:	2308      	movs	r3, #8
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f002 fc15 	bl	8002c48 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	0018      	movs	r0, r3
 8000422:	231c      	movs	r3, #28
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f002 fc0e 	bl	8002c48 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800042c:	4b30      	ldr	r3, [pc, #192]	; (80004f0 <MX_TIM3_Init+0xf8>)
 800042e:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <MX_TIM3_Init+0xfc>)
 8000430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8000432:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <MX_TIM3_Init+0xf8>)
 8000434:	2213      	movs	r2, #19
 8000436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <MX_TIM3_Init+0xf8>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800043e:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <MX_TIM3_Init+0xf8>)
 8000440:	22fa      	movs	r2, #250	; 0xfa
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <MX_TIM3_Init+0xf8>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <MX_TIM3_Init+0xf8>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000452:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <MX_TIM3_Init+0xf8>)
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fcb9 	bl	8001dcc <HAL_TIM_Base_Init>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800045e:	f000 f871 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000462:	2128      	movs	r1, #40	; 0x28
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	0152      	lsls	r2, r2, #5
 800046a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800046c:	187a      	adds	r2, r7, r1
 800046e:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <MX_TIM3_Init+0xf8>)
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f001 ff46 	bl	8002304 <HAL_TIM_ConfigClockSource>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800047c:	f000 f862 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_TIM3_Init+0xf8>)
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fcf0 	bl	8001e68 <HAL_TIM_PWM_Init>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800048c:	f000 f85a 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2120      	movs	r1, #32
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800049e:	187a      	adds	r2, r7, r1
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_TIM3_Init+0xf8>)
 80004a2:	0011      	movs	r1, r2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fb43 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80004ae:	f000 f849 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2260      	movs	r2, #96	; 0x60
 80004b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	22fa      	movs	r2, #250	; 0xfa
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004cc:	1d39      	adds	r1, r7, #4
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_TIM3_Init+0xf8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fe5e 	bl	8002194 <HAL_TIM_PWM_ConfigChannel>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 80004dc:	f000 f832 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <MX_TIM3_Init+0xf8>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f8c4 	bl	8000670 <HAL_TIM_MspPostInit>

}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b00e      	add	sp, #56	; 0x38
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000028 	.word	0x20000028
 80004f4:	40000400 	.word	0x40000400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <MX_GPIO_Init+0x48>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_GPIO_Init+0x48>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	03c9      	lsls	r1, r1, #15
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_GPIO_Init+0x48>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	03db      	lsls	r3, r3, #15
 8000514:	4013      	ands	r3, r2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_GPIO_Init+0x48>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_GPIO_Init+0x48>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0289      	lsls	r1, r1, #10
 8000524:	430a      	orrs	r2, r1
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_GPIO_Init+0x48>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	029b      	lsls	r3, r3, #10
 8000530:	4013      	ands	r3, r2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0549      	lsls	r1, r1, #21
 8000578:	430a      	orrs	r2, r1
 800057a:	61da      	str	r2, [r3, #28]
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_MspInit+0x44>)
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	055b      	lsls	r3, r3, #21
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	2314      	movs	r3, #20
 80005a2:	18fb      	adds	r3, r7, r3
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 fb4c 	bl	8002c48 <memset>
  if(hadc->Instance==ADC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a19      	ldr	r2, [pc, #100]	; (800061c <HAL_ADC_MspInit+0x84>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d12c      	bne.n	8000614 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <HAL_ADC_MspInit+0x88>)
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_ADC_MspInit+0x88>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0089      	lsls	r1, r1, #2
 80005c4:	430a      	orrs	r2, r1
 80005c6:	619a      	str	r2, [r3, #24]
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_ADC_MspInit+0x88>)
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4013      	ands	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_ADC_MspInit+0x88>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_ADC_MspInit+0x88>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0289      	lsls	r1, r1, #10
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_ADC_MspInit+0x88>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	029b      	lsls	r3, r3, #10
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f2:	2114      	movs	r1, #20
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2203      	movs	r2, #3
 80005fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	187a      	adds	r2, r7, r1
 8000608:	2390      	movs	r3, #144	; 0x90
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fe1a 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b00a      	add	sp, #40	; 0x28
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40012400 	.word	0x40012400
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <HAL_TIM_Base_MspInit+0x44>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d113      	bne.n	800065e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <HAL_TIM_Base_MspInit+0x48>)
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_TIM_Base_MspInit+0x48>)
 800063c:	2102      	movs	r1, #2
 800063e:	430a      	orrs	r2, r1
 8000640:	61da      	str	r2, [r3, #28]
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_TIM_Base_MspInit+0x48>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	2202      	movs	r2, #2
 8000648:	4013      	ands	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2010      	movs	r0, #16
 8000654:	f000 fdc6 	bl	80011e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000658:	2010      	movs	r0, #16
 800065a:	f000 fdd8 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40000400 	.word	0x40000400
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	230c      	movs	r3, #12
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	0018      	movs	r0, r3
 800067e:	2314      	movs	r3, #20
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f002 fae0 	bl	8002c48 <memset>
  if(htim->Instance==TIM3)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <HAL_TIM_MspPostInit+0x74>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d124      	bne.n	80006dc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_TIM_MspPostInit+0x78>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_TIM_MspPostInit+0x78>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_TIM_MspPostInit+0x78>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006ae:	210c      	movs	r1, #12
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	2390      	movs	r3, #144	; 0x90
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fdb6 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b008      	add	sp, #32
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40000400 	.word	0x40000400
 80006e8:	40021000 	.word	0x40021000

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f888 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <TIM3_IRQHandler+0x14>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fc1e 	bl	8001f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000028 	.word	0x20000028

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000746:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0b      	ldr	r4, [pc, #44]	; (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800076e:	f7ff ffe3 	bl	8000738 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000772:	f002 fa45 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fd53 	bl	8000220 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   r0, =_estack
 800077c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000788:	08002ca8 	.word	0x08002ca8
  ldr r2, =_sbss
 800078c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000790:	200000b4 	.word	0x200000b4

08000794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_IRQHandler>
	...

08000798 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <HAL_Init+0x24>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_Init+0x24>)
 80007a2:	2110      	movs	r1, #16
 80007a4:	430a      	orrs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f809 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ae:	f7ff fecf 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_InitTick+0x5c>)
 80007ca:	681c      	ldr	r4, [r3, #0]
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x60>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	0019      	movs	r1, r3
 80007d2:	23fa      	movs	r3, #250	; 0xfa
 80007d4:	0098      	lsls	r0, r3, #2
 80007d6:	f7ff fc97 	bl	8000108 <__udivsi3>
 80007da:	0003      	movs	r3, r0
 80007dc:	0019      	movs	r1, r3
 80007de:	0020      	movs	r0, r4
 80007e0:	f7ff fc92 	bl	8000108 <__udivsi3>
 80007e4:	0003      	movs	r3, r0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fd21 	bl	800122e <HAL_SYSTICK_Config>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e00f      	b.n	8000814 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d80b      	bhi.n	8000812 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	425b      	negs	r3, r3
 8000800:	2200      	movs	r2, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fcee 	bl	80011e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_InitTick+0x64>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b003      	add	sp, #12
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	001a      	movs	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	18d2      	adds	r2, r2, r3
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000008 	.word	0x20000008
 8000848:	200000b0 	.word	0x200000b0

0800084c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	200000b0 	.word	0x200000b0

08000860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e125      	b.n	8000aca <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10a      	bne.n	800089c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2234      	movs	r2, #52	; 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff fe7e 	bl	8000598 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a0:	2210      	movs	r2, #16
 80008a2:	4013      	ands	r3, r2
 80008a4:	d000      	beq.n	80008a8 <HAL_ADC_Init+0x48>
 80008a6:	e103      	b.n	8000ab0 <HAL_ADC_Init+0x250>
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d000      	beq.n	80008b4 <HAL_ADC_Init+0x54>
 80008b2:	e0fd      	b.n	8000ab0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2204      	movs	r2, #4
 80008bc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80008be:	d000      	beq.n	80008c2 <HAL_ADC_Init+0x62>
 80008c0:	e0f6      	b.n	8000ab0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	4a83      	ldr	r2, [pc, #524]	; (8000ad4 <HAL_ADC_Init+0x274>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	2202      	movs	r2, #2
 80008cc:	431a      	orrs	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2203      	movs	r2, #3
 80008da:	4013      	ands	r3, r2
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d112      	bne.n	8000906 <HAL_ADC_Init+0xa6>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d009      	beq.n	8000902 <HAL_ADC_Init+0xa2>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	401a      	ands	r2, r3
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	429a      	cmp	r2, r3
 8000900:	d101      	bne.n	8000906 <HAL_ADC_Init+0xa6>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <HAL_ADC_Init+0xa8>
 8000906:	2300      	movs	r3, #0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d116      	bne.n	800093a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	2218      	movs	r2, #24
 8000914:	4393      	bics	r3, r2
 8000916:	0019      	movs	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	430a      	orrs	r2, r1
 8000922:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	0899      	lsrs	r1, r3, #2
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	430a      	orrs	r2, r1
 8000938:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4964      	ldr	r1, [pc, #400]	; (8000ad8 <HAL_ADC_Init+0x278>)
 8000946:	400a      	ands	r2, r1
 8000948:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7e1b      	ldrb	r3, [r3, #24]
 800094e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7e5b      	ldrb	r3, [r3, #25]
 8000954:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000956:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7e9b      	ldrb	r3, [r3, #26]
 800095c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800095e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	2b01      	cmp	r3, #1
 8000966:	d002      	beq.n	800096e <HAL_ADC_Init+0x10e>
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	015b      	lsls	r3, r3, #5
 800096c:	e000      	b.n	8000970 <HAL_ADC_Init+0x110>
 800096e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000970:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000976:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d101      	bne.n	8000984 <HAL_ADC_Init+0x124>
 8000980:	2304      	movs	r3, #4
 8000982:	e000      	b.n	8000986 <HAL_ADC_Init+0x126>
 8000984:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000986:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2124      	movs	r1, #36	; 0x24
 800098c:	5c5b      	ldrb	r3, [r3, r1]
 800098e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000990:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	4313      	orrs	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7edb      	ldrb	r3, [r3, #27]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d115      	bne.n	80009cc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7e9b      	ldrb	r3, [r3, #26]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d105      	bne.n	80009b4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0252      	lsls	r2, r2, #9
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	e00b      	b.n	80009cc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b8:	2220      	movs	r2, #32
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c4:	2201      	movs	r2, #1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69da      	ldr	r2, [r3, #28]
 80009d0:	23c2      	movs	r3, #194	; 0xc2
 80009d2:	33ff      	adds	r3, #255	; 0xff
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d007      	beq.n	80009e8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009e0:	4313      	orrs	r3, r2
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68d9      	ldr	r1, [r3, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	055b      	lsls	r3, r3, #21
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d01b      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d017      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d013      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d00f      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d00b      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d007      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d003      	beq.n	8000a3c <HAL_ADC_Init+0x1dc>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	d112      	bne.n	8000a62 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2107      	movs	r1, #7
 8000a48:	438a      	bics	r2, r1
 8000a4a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6959      	ldr	r1, [r3, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a56:	2207      	movs	r2, #7
 8000a58:	401a      	ands	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_ADC_Init+0x27c>)
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d10b      	bne.n	8000a8a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	4393      	bics	r3, r2
 8000a80:	2201      	movs	r2, #1
 8000a82:	431a      	orrs	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a88:	e01c      	b.n	8000ac4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8e:	2212      	movs	r2, #18
 8000a90:	4393      	bics	r3, r2
 8000a92:	2210      	movs	r2, #16
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000aae:	e009      	b.n	8000ac4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab4:	2210      	movs	r2, #16
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	fffffefd 	.word	0xfffffefd
 8000ad8:	fffe0219 	.word	0xfffe0219
 8000adc:	833fffe7 	.word	0x833fffe7

08000ae0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2204      	movs	r2, #4
 8000af8:	4013      	ands	r3, r2
 8000afa:	d138      	bne.n	8000b6e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2234      	movs	r2, #52	; 0x34
 8000b00:	5c9b      	ldrb	r3, [r3, r2]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d101      	bne.n	8000b0a <HAL_ADC_Start+0x2a>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e038      	b.n	8000b7c <HAL_ADC_Start+0x9c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2101      	movs	r1, #1
 8000b10:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7e5b      	ldrb	r3, [r3, #25]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d007      	beq.n	8000b2a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	18fc      	adds	r4, r7, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fa37 	bl	8000f94 <ADC_Enable>
 8000b26:	0003      	movs	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d120      	bne.n	8000b76 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_ADC_Start+0xa4>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	431a      	orrs	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	221c      	movs	r2, #28
 8000b5a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2104      	movs	r1, #4
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	e003      	b.n	8000b76 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000b6e:	230f      	movs	r3, #15
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	2202      	movs	r2, #2
 8000b74:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b005      	add	sp, #20
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	fffff0fe 	.word	0xfffff0fe

08000b88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d102      	bne.n	8000ba0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	e014      	b.n	8000bca <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10b      	bne.n	8000bc6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2234      	movs	r2, #52	; 0x34
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e06b      	b.n	8000c9e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000bca:	f7ff fe3f 	bl	800084c <HAL_GetTick>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000bd2:	e019      	b.n	8000c08 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	d016      	beq.n	8000c08 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d007      	beq.n	8000bf0 <HAL_ADC_PollForConversion+0x68>
 8000be0:	f7ff fe34 	bl	800084c <HAL_GetTick>
 8000be4:	0002      	movs	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d20b      	bcs.n	8000c08 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2234      	movs	r2, #52	; 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e04a      	b.n	8000c9e <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4013      	ands	r3, r2
 8000c12:	d0df      	beq.n	8000bd4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	23c0      	movs	r3, #192	; 0xc0
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d12d      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d129      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d122      	bne.n	8000c8c <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d110      	bne.n	8000c74 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	210c      	movs	r1, #12
 8000c5e:	438a      	bics	r2, r1
 8000c60:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_ADC_PollForConversion+0x120>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	639a      	str	r2, [r3, #56]	; 0x38
 8000c72:	e00b      	b.n	8000c8c <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c78:	2220      	movs	r2, #32
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	2201      	movs	r2, #1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e1b      	ldrb	r3, [r3, #24]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	220c      	movs	r2, #12
 8000c9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	fffffefe 	.word	0xfffffefe

08000cac <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d156      	bne.n	8000d76 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2234      	movs	r2, #52	; 0x34
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d101      	bne.n	8000cd6 <HAL_ADC_Start_IT+0x2a>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e056      	b.n	8000d84 <HAL_ADC_Start_IT+0xd8>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2234      	movs	r2, #52	; 0x34
 8000cda:	2101      	movs	r1, #1
 8000cdc:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e5b      	ldrb	r3, [r3, #25]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d007      	beq.n	8000cf6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	18fc      	adds	r4, r7, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 f951 	bl	8000f94 <ADC_Enable>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d13e      	bne.n	8000d7e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d04:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <HAL_ADC_Start_IT+0xe0>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0052      	lsls	r2, r2, #1
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2234      	movs	r2, #52	; 0x34
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	221c      	movs	r2, #28
 8000d26:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d110      	bne.n	8000d52 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2118      	movs	r1, #24
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	605a      	str	r2, [r3, #4]
          break;
 8000d50:	e008      	b.n	8000d64 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	211c      	movs	r1, #28
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	605a      	str	r2, [r3, #4]
          break;
 8000d62:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2104      	movs	r1, #4
 8000d70:	430a      	orrs	r2, r1
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	e003      	b.n	8000d7e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d76:	230f      	movs	r3, #15
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b005      	add	sp, #20
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	fffff0fe 	.word	0xfffff0fe

08000d90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db2:	230f      	movs	r3, #15
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	055b      	lsls	r3, r3, #21
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d011      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x46>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d00d      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x46>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d009      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x46>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d005      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x46>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d001      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x46>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2234      	movs	r2, #52	; 0x34
 8000df2:	5c9b      	ldrb	r3, [r3, r2]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d101      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x54>
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e0bb      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x1cc>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2234      	movs	r2, #52	; 0x34
 8000e00:	2101      	movs	r1, #1
 8000e02:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d000      	beq.n	8000e12 <HAL_ADC_ConfigChannel+0x6a>
 8000e10:	e09f      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a59      	ldr	r2, [pc, #356]	; (8000f7c <HAL_ADC_ConfigChannel+0x1d4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d100      	bne.n	8000e1e <HAL_ADC_ConfigChannel+0x76>
 8000e1c:	e077      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	055b      	lsls	r3, r3, #21
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d037      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d033      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d02f      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d02b      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d027      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d023      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d01f      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	d01b      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2107      	movs	r1, #7
 8000e84:	400b      	ands	r3, r1
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d012      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2107      	movs	r1, #7
 8000e96:	438a      	bics	r2, r1
 8000e98:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6959      	ldr	r1, [r3, #20]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d003      	beq.n	8000ec0 <HAL_ADC_ConfigChannel+0x118>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b11      	cmp	r3, #17
 8000ebe:	d152      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b10      	cmp	r3, #16
 8000eca:	d102      	bne.n	8000ed2 <HAL_ADC_ConfigChannel+0x12a>
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	e001      	b.n	8000ed6 <HAL_ADC_ConfigChannel+0x12e>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	03db      	lsls	r3, r3, #15
 8000ed6:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b10      	cmp	r3, #16
 8000ee2:	d140      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_ADC_ConfigChannel+0x1dc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4927      	ldr	r1, [pc, #156]	; (8000f88 <HAL_ADC_ConfigChannel+0x1e0>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff f90c 	bl	8000108 <__udivsi3>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000efe:	e002      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f9      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x158>
 8000f0c:	e02b      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4099      	lsls	r1, r3
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	400a      	ands	r2, r1
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d003      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x190>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b11      	cmp	r3, #17
 8000f36:	d116      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_ConfigChannel+0x1d8>)
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1a0>
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_ADC_ConfigChannel+0x1e4>)
 8000f46:	e000      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x1a2>
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_ADC_ConfigChannel+0x1d8>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e009      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f56:	2220      	movs	r2, #32
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2234      	movs	r2, #52	; 0x34
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f6e:	230f      	movs	r3, #15
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	781b      	ldrb	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b004      	add	sp, #16
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	00001001 	.word	0x00001001
 8000f80:	40012708 	.word	0x40012708
 8000f84:	20000000 	.word	0x20000000
 8000f88:	000f4240 	.word	0x000f4240
 8000f8c:	ff7fffff 	.word	0xff7fffff
 8000f90:	ffbfffff 	.word	0xffbfffff

08000f94 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2203      	movs	r2, #3
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d112      	bne.n	8000fd8 <ADC_Enable+0x44>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d009      	beq.n	8000fd4 <ADC_Enable+0x40>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	401a      	ands	r2, r3
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d101      	bne.n	8000fd8 <ADC_Enable+0x44>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <ADC_Enable+0x46>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d14b      	bne.n	8001076 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <ADC_Enable+0xec>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	2210      	movs	r2, #16
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e038      	b.n	8001078 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <ADC_Enable+0xf0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <ADC_Enable+0xf4>)
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff f873 	bl	8000108 <__udivsi3>
 8001022:	0003      	movs	r3, r0
 8001024:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001026:	e002      	b.n	800102e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3b01      	subs	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f9      	bne.n	8001028 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001034:	f7ff fc0a 	bl	800084c <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800103c:	e014      	b.n	8001068 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800103e:	f7ff fc05 	bl	800084c <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d90d      	bls.n	8001068 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001050:	2210      	movs	r2, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105c:	2201      	movs	r2, #1
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e007      	b.n	8001078 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	2b01      	cmp	r3, #1
 8001074:	d1e3      	bne.n	800103e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b004      	add	sp, #16
 800107e:	bd80      	pop	{r7, pc}
 8001080:	80000017 	.word	0x80000017
 8001084:	20000000 	.word	0x20000000
 8001088:	000f4240 	.word	0x000f4240

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	0002      	movs	r2, r0
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b7f      	cmp	r3, #127	; 0x7f
 800109e:	d809      	bhi.n	80010b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	001a      	movs	r2, r3
 80010a6:	231f      	movs	r3, #31
 80010a8:	401a      	ands	r2, r3
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_EnableIRQ+0x30>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	4091      	lsls	r1, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
  }
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0002      	movs	r2, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b7f      	cmp	r3, #127	; 0x7f
 80010d4:	d828      	bhi.n	8001128 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <__NVIC_SetPriority+0xd4>)
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	33c0      	adds	r3, #192	; 0xc0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	589b      	ldr	r3, [r3, r2]
 80010e6:	1dfa      	adds	r2, r7, #7
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	0011      	movs	r1, r2
 80010ec:	2203      	movs	r2, #3
 80010ee:	400a      	ands	r2, r1
 80010f0:	00d2      	lsls	r2, r2, #3
 80010f2:	21ff      	movs	r1, #255	; 0xff
 80010f4:	4091      	lsls	r1, r2
 80010f6:	000a      	movs	r2, r1
 80010f8:	43d2      	mvns	r2, r2
 80010fa:	401a      	ands	r2, r3
 80010fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	019b      	lsls	r3, r3, #6
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	401a      	ands	r2, r3
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	0018      	movs	r0, r3
 800110c:	2303      	movs	r3, #3
 800110e:	4003      	ands	r3, r0
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <__NVIC_SetPriority+0xd4>)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b25b      	sxtb	r3, r3
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	430a      	orrs	r2, r1
 8001120:	33c0      	adds	r3, #192	; 0xc0
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001126:	e031      	b.n	800118c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <__NVIC_SetPriority+0xd8>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0019      	movs	r1, r3
 8001130:	230f      	movs	r3, #15
 8001132:	400b      	ands	r3, r1
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3306      	adds	r3, #6
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	18d3      	adds	r3, r2, r3
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	1dfa      	adds	r2, r7, #7
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	0011      	movs	r1, r2
 8001148:	2203      	movs	r2, #3
 800114a:	400a      	ands	r2, r1
 800114c:	00d2      	lsls	r2, r2, #3
 800114e:	21ff      	movs	r1, #255	; 0xff
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	43d2      	mvns	r2, r2
 8001156:	401a      	ands	r2, r3
 8001158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	019b      	lsls	r3, r3, #6
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	401a      	ands	r2, r3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	0018      	movs	r0, r3
 8001168:	2303      	movs	r3, #3
 800116a:	4003      	ands	r3, r0
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <__NVIC_SetPriority+0xd8>)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	001c      	movs	r4, r3
 8001178:	230f      	movs	r3, #15
 800117a:	4023      	ands	r3, r4
 800117c:	3b08      	subs	r3, #8
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	430a      	orrs	r2, r1
 8001182:	3306      	adds	r3, #6
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	18c3      	adds	r3, r0, r3
 8001188:	3304      	adds	r3, #4
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b003      	add	sp, #12
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <SysTick_Config+0x40>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e010      	b.n	80011d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <SysTick_Config+0x44>)
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	3a01      	subs	r2, #1
 80011b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	2301      	movs	r3, #1
 80011bc:	425b      	negs	r3, r3
 80011be:	2103      	movs	r1, #3
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff7d 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <SysTick_Config+0x44>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x44>)
 80011ce:	2207      	movs	r2, #7
 80011d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	00ffffff 	.word	0x00ffffff
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	210f      	movs	r1, #15
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	1c02      	adds	r2, r0, #0
 80011f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	0002      	movs	r2, r0
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b25b      	sxtb	r3, r3
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff ff33 	bl	800108c <__NVIC_EnableIRQ>
}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff ffaf 	bl	800119c <SysTick_Config>
 800123e:	0003      	movs	r3, r0
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e14f      	b.n	80014f8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <HAL_GPIO_Init+0x28>
 800126e:	e140      	b.n	80014f2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d00b      	beq.n	8001290 <HAL_GPIO_Init+0x48>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001284:	2b11      	cmp	r3, #17
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b12      	cmp	r3, #18
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	2201      	movs	r2, #1
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0xea>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b12      	cmp	r3, #18
 8001330:	d123      	bne.n	800137a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	58d3      	ldr	r3, [r2, r3]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2207      	movs	r2, #7
 8001344:	4013      	ands	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2107      	movs	r1, #7
 800135e:	400b      	ands	r3, r1
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	401a      	ands	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	055b      	lsls	r3, r3, #21
 80013b6:	4013      	ands	r3, r2
 80013b8:	d100      	bne.n	80013bc <HAL_GPIO_Init+0x174>
 80013ba:	e09a      	b.n	80014f2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	4b54      	ldr	r3, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	619a      	str	r2, [r3, #24]
 80013c8:	4b51      	ldr	r3, [pc, #324]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	589b      	ldr	r3, [r3, r2]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4013      	ands	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	409a      	lsls	r2, r3
 80013ee:	0013      	movs	r3, r2
 80013f0:	43da      	mvns	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	2390      	movs	r3, #144	; 0x90
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	429a      	cmp	r2, r3
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x1e2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a44      	ldr	r2, [pc, #272]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x1de>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_GPIO_Init+0x2d4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x1da>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a42      	ldr	r2, [pc, #264]	; (8001520 <HAL_GPIO_Init+0x2d8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x1d6>
 800141a:	2303      	movs	r3, #3
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x1e4>
 800141e:	2305      	movs	r3, #5
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x1e4>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x1e4>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x1e4>
 800142a:	2300      	movs	r3, #0
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	2103      	movs	r1, #3
 8001430:	400a      	ands	r2, r1
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	4013      	ands	r3, r2
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43da      	mvns	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	035b      	lsls	r3, r3, #13
 80014b6:	4013      	ands	r3, r2
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	039b      	lsls	r3, r3, #14
 80014e0:	4013      	ands	r3, r2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	40da      	lsrs	r2, r3
 8001500:	1e13      	subs	r3, r2, #0
 8001502:	d000      	beq.n	8001506 <HAL_GPIO_Init+0x2be>
 8001504:	e6a8      	b.n	8001258 <HAL_GPIO_Init+0x10>
  } 
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b006      	add	sp, #24
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	48000400 	.word	0x48000400
 800151c:	48000800 	.word	0x48000800
 8001520:	48000c00 	.word	0x48000c00
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e305      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	4013      	ands	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x1e>
 8001544:	e08d      	b.n	8001662 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001546:	4bc5      	ldr	r3, [pc, #788]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	220c      	movs	r2, #12
 800154c:	4013      	ands	r3, r2
 800154e:	2b04      	cmp	r3, #4
 8001550:	d00e      	beq.n	8001570 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001552:	4bc2      	ldr	r3, [pc, #776]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	220c      	movs	r2, #12
 8001558:	4013      	ands	r3, r2
 800155a:	2b08      	cmp	r3, #8
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x64>
 800155e:	4bbf      	ldr	r3, [pc, #764]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	23c0      	movs	r3, #192	; 0xc0
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	401a      	ands	r2, r3
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	429a      	cmp	r2, r3
 800156e:	d10d      	bne.n	800158c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4bba      	ldr	r3, [pc, #744]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_RCC_OscConfig+0x56>
 800157c:	e070      	b.n	8001660 <HAL_RCC_OscConfig+0x138>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d000      	beq.n	8001588 <HAL_RCC_OscConfig+0x60>
 8001586:	e06b      	b.n	8001660 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e2dc      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 8001594:	4bb1      	ldr	r3, [pc, #708]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4bb0      	ldr	r3, [pc, #704]	; (800185c <HAL_RCC_OscConfig+0x334>)
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	0249      	lsls	r1, r1, #9
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e02f      	b.n	8001604 <HAL_RCC_OscConfig+0xdc>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x9e>
 80015ac:	4bab      	ldr	r3, [pc, #684]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4baa      	ldr	r3, [pc, #680]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015b2:	49ab      	ldr	r1, [pc, #684]	; (8001860 <HAL_RCC_OscConfig+0x338>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4ba8      	ldr	r3, [pc, #672]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4ba7      	ldr	r3, [pc, #668]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015be:	49a9      	ldr	r1, [pc, #676]	; (8001864 <HAL_RCC_OscConfig+0x33c>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e01e      	b.n	8001604 <HAL_RCC_OscConfig+0xdc>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d10e      	bne.n	80015ec <HAL_RCC_OscConfig+0xc4>
 80015ce:	4ba3      	ldr	r3, [pc, #652]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4ba2      	ldr	r3, [pc, #648]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	02c9      	lsls	r1, r1, #11
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4b9f      	ldr	r3, [pc, #636]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b9e      	ldr	r3, [pc, #632]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0249      	lsls	r1, r1, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xdc>
 80015ec:	4b9b      	ldr	r3, [pc, #620]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b9a      	ldr	r3, [pc, #616]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015f2:	499b      	ldr	r1, [pc, #620]	; (8001860 <HAL_RCC_OscConfig+0x338>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4b98      	ldr	r3, [pc, #608]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b97      	ldr	r3, [pc, #604]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015fe:	4999      	ldr	r1, [pc, #612]	; (8001864 <HAL_RCC_OscConfig+0x33c>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d014      	beq.n	8001636 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff f91e 	bl	800084c <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff f919 	bl	800084c <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e28e      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x334>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0xee>
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff f909 	bl	800084c <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff f904 	bl	800084c <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e279      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x118>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x146>
 800166c:	e06c      	b.n	8001748 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166e:	4b7b      	ldr	r3, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	220c      	movs	r2, #12
 8001674:	4013      	ands	r3, r2
 8001676:	d00e      	beq.n	8001696 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001678:	4b78      	ldr	r3, [pc, #480]	; (800185c <HAL_RCC_OscConfig+0x334>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	2b08      	cmp	r3, #8
 8001682:	d11f      	bne.n	80016c4 <HAL_RCC_OscConfig+0x19c>
 8001684:	4b75      	ldr	r3, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	23c0      	movs	r3, #192	; 0xc0
 800168a:	025b      	lsls	r3, r3, #9
 800168c:	401a      	ands	r2, r3
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	429a      	cmp	r2, r3
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x184>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e24c      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	22f8      	movs	r2, #248	; 0xf8
 80016b2:	4393      	bics	r3, r2
 80016b4:	0019      	movs	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e041      	b.n	8001748 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d024      	beq.n	8001716 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff f8b8 	bl	800084c <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff f8b3 	bl	800084c <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e228      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d0f1      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b57      	ldr	r3, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	22f8      	movs	r2, #248	; 0xf8
 8001704:	4393      	bics	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	00da      	lsls	r2, r3, #3
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e018      	b.n	8001748 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b51      	ldr	r3, [pc, #324]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_OscConfig+0x334>)
 800171c:	2101      	movs	r1, #1
 800171e:	438a      	bics	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f893 	bl	800084c <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172c:	f7ff f88e 	bl	800084c <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e203      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d1f1      	bne.n	800172c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2208      	movs	r2, #8
 800174e:	4013      	ands	r3, r2
 8001750:	d036      	beq.n	80017c0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d019      	beq.n	800178e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_RCC_OscConfig+0x334>)
 800175c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001760:	2101      	movs	r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff f871 	bl	800084c <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff f86c 	bl	800084c <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1e1      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d0f1      	beq.n	8001770 <HAL_RCC_OscConfig+0x248>
 800178c:	e018      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001794:	2101      	movs	r1, #1
 8001796:	438a      	bics	r2, r1
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f857 	bl	800084c <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff f852 	bl	800084c <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1c7      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d1f1      	bne.n	80017a4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2204      	movs	r2, #4
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_RCC_OscConfig+0x2a4>
 80017ca:	e0b5      	b.n	8001938 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017cc:	231f      	movs	r3, #31
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	055b      	lsls	r3, r3, #21
 80017dc:	4013      	ands	r3, r2
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0549      	lsls	r1, r1, #21
 80017ea:	430a      	orrs	r2, r1
 80017ec:	61da      	str	r2, [r3, #28]
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	055b      	lsls	r3, r3, #21
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017fc:	231f      	movs	r3, #31
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_RCC_OscConfig+0x340>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d11a      	bne.n	8001846 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_RCC_OscConfig+0x340>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_RCC_OscConfig+0x340>)
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	0049      	lsls	r1, r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff f815 	bl	800084c <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001828:	f7ff f810 	bl	800084c <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e185      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_OscConfig+0x340>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4013      	ands	r3, r2
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10e      	bne.n	800186c <HAL_RCC_OscConfig+0x344>
 800184e:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_RCC_OscConfig+0x334>)
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	621a      	str	r2, [r3, #32]
 800185a:	e035      	b.n	80018c8 <HAL_RCC_OscConfig+0x3a0>
 800185c:	40021000 	.word	0x40021000
 8001860:	fffeffff 	.word	0xfffeffff
 8001864:	fffbffff 	.word	0xfffbffff
 8001868:	40007000 	.word	0x40007000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x366>
 8001874:	4bb6      	ldr	r3, [pc, #728]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	4bb5      	ldr	r3, [pc, #724]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800187a:	2101      	movs	r1, #1
 800187c:	438a      	bics	r2, r1
 800187e:	621a      	str	r2, [r3, #32]
 8001880:	4bb3      	ldr	r3, [pc, #716]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	4bb2      	ldr	r3, [pc, #712]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001886:	2104      	movs	r1, #4
 8001888:	438a      	bics	r2, r1
 800188a:	621a      	str	r2, [r3, #32]
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x3a0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b05      	cmp	r3, #5
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x388>
 8001896:	4bae      	ldr	r3, [pc, #696]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	4bad      	ldr	r3, [pc, #692]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800189c:	2104      	movs	r1, #4
 800189e:	430a      	orrs	r2, r1
 80018a0:	621a      	str	r2, [r3, #32]
 80018a2:	4bab      	ldr	r3, [pc, #684]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018a4:	6a1a      	ldr	r2, [r3, #32]
 80018a6:	4baa      	ldr	r3, [pc, #680]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	621a      	str	r2, [r3, #32]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0x3a0>
 80018b0:	4ba7      	ldr	r3, [pc, #668]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4ba6      	ldr	r3, [pc, #664]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	4ba4      	ldr	r3, [pc, #656]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4ba3      	ldr	r3, [pc, #652]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018c2:	2104      	movs	r1, #4
 80018c4:	438a      	bics	r2, r1
 80018c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d014      	beq.n	80018fa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7fe ffbc 	bl	800084c <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	e009      	b.n	80018ee <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7fe ffb7 	bl	800084c <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a9b      	ldr	r2, [pc, #620]	; (8001b54 <HAL_RCC_OscConfig+0x62c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e12b      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ee:	4b98      	ldr	r3, [pc, #608]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x3b2>
 80018f8:	e013      	b.n	8001922 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7fe ffa7 	bl	800084c <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	e009      	b.n	8001918 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7fe ffa2 	bl	800084c <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4a91      	ldr	r2, [pc, #580]	; (8001b54 <HAL_RCC_OscConfig+0x62c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e116      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b8d      	ldr	r3, [pc, #564]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001922:	231f      	movs	r3, #31
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001932:	4989      	ldr	r1, [pc, #548]	; (8001b58 <HAL_RCC_OscConfig+0x630>)
 8001934:	400a      	ands	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2210      	movs	r2, #16
 800193e:	4013      	ands	r3, r2
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d12a      	bne.n	80019a0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800194a:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800194c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800194e:	4b80      	ldr	r3, [pc, #512]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001950:	2104      	movs	r1, #4
 8001952:	430a      	orrs	r2, r1
 8001954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001956:	4b7e      	ldr	r3, [pc, #504]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195a:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800195c:	2101      	movs	r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7fe ff73 	bl	800084c <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800196c:	f7fe ff6e 	bl	800084c <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0e3      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800197e:	4b74      	ldr	r3, [pc, #464]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d0f1      	beq.n	800196c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	22f8      	movs	r2, #248	; 0xf8
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	00da      	lsls	r2, r3, #3
 8001998:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
 800199e:	e034      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	3305      	adds	r3, #5
 80019a6:	d111      	bne.n	80019cc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019a8:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019ae:	2104      	movs	r1, #4
 80019b0:	438a      	bics	r2, r1
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	22f8      	movs	r2, #248	; 0xf8
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	00da      	lsls	r2, r3, #3
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ca:	e01e      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019cc:	4b60      	ldr	r3, [pc, #384]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d0:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019d2:	2104      	movs	r1, #4
 80019d4:	430a      	orrs	r2, r1
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019d8:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019dc:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7fe ff32 	bl	800084c <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019ee:	f7fe ff2d 	bl	800084c <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0a2      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f1      	bne.n	80019ee <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d100      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
 8001a12:	e097      	b.n	8001b44 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a14:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	220c      	movs	r2, #12
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d100      	bne.n	8001a22 <HAL_RCC_OscConfig+0x4fa>
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d14c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a30:	494a      	ldr	r1, [pc, #296]	; (8001b5c <HAL_RCC_OscConfig+0x634>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7fe ff09 	bl	800084c <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7fe ff04 	bl	800084c <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e079      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	220f      	movs	r2, #15
 8001a64:	4393      	bics	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0449      	lsls	r1, r1, #17
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe fed7 	bl	800084c <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7fe fed2 	bl	800084c <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e047      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	049b      	lsls	r3, r3, #18
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x57c>
 8001ac2:	e03f      	b.n	8001b44 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001aca:	4924      	ldr	r1, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x634>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7fe febc 	bl	800084c <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe feb7 	bl	800084c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e02c      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x5b2>
 8001af8:	e024      	b.n	8001b44 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01f      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x628>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10e      	bne.n	8001b40 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	220f      	movs	r2, #15
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	23f0      	movs	r3, #240	; 0xf0
 8001b34:	039b      	lsls	r3, r3, #14
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b008      	add	sp, #32
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40021000 	.word	0x40021000
 8001b54:	00001388 	.word	0x00001388
 8001b58:	efffffff 	.word	0xefffffff
 8001b5c:	feffffff 	.word	0xfeffffff
 8001b60:	ffc27fff 	.word	0xffc27fff

08001b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b3      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d911      	bls.n	8001baa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b58      	ldr	r3, [pc, #352]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e09a      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d015      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d006      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001bc4:	21e0      	movs	r1, #224	; 0xe0
 8001bc6:	00c9      	lsls	r1, r1, #3
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	22f0      	movs	r2, #240	; 0xf0
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d114      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06e      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	049b      	lsls	r3, r3, #18
 8001c12:	4013      	ands	r3, r2
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e062      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e05b      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe fe06 	bl	800084c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c46:	f7fe fe01 	bl	800084c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_RCC_ClockConfig+0x18c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e042      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1ec      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d211      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_RCC_ClockConfig+0x184>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e020      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x190>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cbc:	f000 f820 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	220f      	movs	r2, #15
 8001cca:	4013      	ands	r3, r2
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x194>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	40da      	lsrs	r2, r3
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x198>)
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7fe fd71 	bl	80007c0 <HAL_InitTick>
  
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	fffff8ff 	.word	0xfffff8ff
 8001cf8:	08002c90 	.word	0x08002c90
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08f      	sub	sp, #60	; 0x3c
 8001d04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d06:	2314      	movs	r3, #20
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d002      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x4a>
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d003      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x50>
 8001d48:	e02f      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d4e:	e02f      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	0c9b      	lsrs	r3, r3, #18
 8001d54:	220f      	movs	r2, #15
 8001d56:	4013      	ands	r3, r2
 8001d58:	2214      	movs	r2, #20
 8001d5a:	18ba      	adds	r2, r7, r2
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	220f      	movs	r2, #15
 8001d66:	4013      	ands	r3, r2
 8001d68:	1d3a      	adds	r2, r7, #4
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d70:	23c0      	movs	r3, #192	; 0xc0
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	401a      	ands	r2, r3
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d80:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d82:	f7fe f9c1 	bl	8000108 <__udivsi3>
 8001d86:	0003      	movs	r3, r0
 8001d88:	001a      	movs	r2, r3
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	4353      	muls	r3, r2
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d96:	f7fe f9b7 	bl	8000108 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	4353      	muls	r3, r2
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da8:	e002      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b00f      	add	sp, #60	; 0x3c
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	08002c70 	.word	0x08002c70
 8001dc0:	08002c80 	.word	0x08002c80
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	007a1200 	.word	0x007a1200

08001dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e01e      	b.n	8001e1c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	223d      	movs	r2, #61	; 0x3d
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	223c      	movs	r2, #60	; 0x3c
 8001dee:	2100      	movs	r1, #0
 8001df0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7fe fc15 	bl	8000624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223d      	movs	r2, #61	; 0x3d
 8001dfe:	2102      	movs	r1, #2
 8001e00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	f000 fb5f 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	223d      	movs	r2, #61	; 0x3d
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	223d      	movs	r2, #61	; 0x3d
 8001e30:	2102      	movs	r1, #2
 8001e32:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d007      	beq.n	8001e56 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	223d      	movs	r2, #61	; 0x3d
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e01e      	b.n	8001eb8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223d      	movs	r2, #61	; 0x3d
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	223c      	movs	r2, #60	; 0x3c
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 f815 	bl	8001ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	223d      	movs	r2, #61	; 0x3d
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	f000 fb11 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223d      	movs	r2, #61	; 0x3d
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fe00 	bl	8002ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_TIM_PWM_Start+0x88>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00e      	beq.n	8001f10 <HAL_TIM_PWM_Start+0x40>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_TIM_PWM_Start+0x8c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_TIM_PWM_Start+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_TIM_PWM_Start+0x90>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_TIM_PWM_Start+0x40>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_TIM_PWM_Start+0x94>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_TIM_PWM_Start+0x44>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_TIM_PWM_Start+0x46>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0209      	lsls	r1, r1, #8
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2207      	movs	r2, #7
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d007      	beq.n	8001f4e <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b004      	add	sp, #16
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40014400 	.word	0x40014400
 8001f64:	40014800 	.word	0x40014800

08001f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d124      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d11d      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2203      	movs	r2, #3
 8001f92:	4252      	negs	r2, r2
 8001f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 fa78 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e007      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 fa6b 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 fa77 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d125      	bne.n	8002022 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11e      	bne.n	8002022 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2205      	movs	r2, #5
 8001fea:	4252      	negs	r2, r2
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f000 fa4b 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 800200a:	e007      	b.n	800201c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0018      	movs	r0, r3
 8002010:	f000 fa3e 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fa4a 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2208      	movs	r2, #8
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d124      	bne.n	800207a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11d      	bne.n	800207a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2209      	movs	r2, #9
 8002044:	4252      	negs	r2, r2
 8002046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2204      	movs	r2, #4
 800204c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 fa1f 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8002062:	e007      	b.n	8002074 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 fa12 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fa1e 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2210      	movs	r2, #16
 8002082:	4013      	ands	r3, r2
 8002084:	2b10      	cmp	r3, #16
 8002086:	d125      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2210      	movs	r2, #16
 8002090:	4013      	ands	r3, r2
 8002092:	2b10      	cmp	r3, #16
 8002094:	d11e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2211      	movs	r2, #17
 800209c:	4252      	negs	r2, r2
 800209e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2208      	movs	r2, #8
 80020a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	23c0      	movs	r3, #192	; 0xc0
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f9f2 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e007      	b.n	80020ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 f9e5 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f9f1 	bl	80024b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2201      	movs	r2, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10f      	bne.n	8002102 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4252      	negs	r2, r2
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 f9bf 	bl	8002480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	4013      	ands	r3, r2
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d10f      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	4013      	ands	r3, r2
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d108      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2281      	movs	r2, #129	; 0x81
 8002124:	4252      	negs	r2, r2
 8002126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fd60 	bl	8002bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	4013      	ands	r3, r2
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d10f      	bne.n	800215e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	4013      	ands	r3, r2
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d108      	bne.n	800215e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2241      	movs	r2, #65	; 0x41
 8002152:	4252      	negs	r2, r2
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f9b1 	bl	80024c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2220      	movs	r2, #32
 8002166:	4013      	ands	r3, r2
 8002168:	2b20      	cmp	r3, #32
 800216a:	d10f      	bne.n	800218c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	2b20      	cmp	r3, #32
 8002178:	d108      	bne.n	800218c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	4252      	negs	r2, r2
 8002182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fd2a 	bl	8002be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	223c      	movs	r2, #60	; 0x3c
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e0a4      	b.n	80022f8 <HAL_TIM_PWM_ConfigChannel+0x164>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	223c      	movs	r2, #60	; 0x3c
 80021b2:	2101      	movs	r1, #1
 80021b4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	223d      	movs	r2, #61	; 0x3d
 80021ba:	2102      	movs	r1, #2
 80021bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d029      	beq.n	8002218 <HAL_TIM_PWM_ConfigChannel+0x84>
 80021c4:	d802      	bhi.n	80021cc <HAL_TIM_PWM_ConfigChannel+0x38>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80021ca:	e08c      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d046      	beq.n	800225e <HAL_TIM_PWM_ConfigChannel+0xca>
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d065      	beq.n	80022a0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80021d4:	e087      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	0011      	movs	r1, r2
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f9ec 	bl	80025bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2108      	movs	r1, #8
 80021f0:	430a      	orrs	r2, r1
 80021f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2104      	movs	r1, #4
 8002200:	438a      	bics	r2, r1
 8002202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6999      	ldr	r1, [r3, #24]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	619a      	str	r2, [r3, #24]
      break;
 8002216:	e066      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fa53 	bl	80026cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0109      	lsls	r1, r1, #4
 8002234:	430a      	orrs	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	492f      	ldr	r1, [pc, #188]	; (8002300 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002244:	400a      	ands	r2, r1
 8002246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	619a      	str	r2, [r3, #24]
      break;
 800225c:	e043      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f000 fab4 	bl	80027d4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2108      	movs	r1, #8
 8002278:	430a      	orrs	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2104      	movs	r1, #4
 8002288:	438a      	bics	r2, r1
 800228a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69d9      	ldr	r1, [r3, #28]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	61da      	str	r2, [r3, #28]
      break;
 800229e:	e022      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	0011      	movs	r1, r2
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 fb19 	bl	80028e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	0109      	lsls	r1, r1, #4
 80022bc:	430a      	orrs	r2, r1
 80022be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80022cc:	400a      	ands	r2, r1
 80022ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69d9      	ldr	r1, [r3, #28]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	021a      	lsls	r2, r3, #8
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	61da      	str	r2, [r3, #28]
      break;
 80022e4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	223d      	movs	r2, #61	; 0x3d
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	223c      	movs	r2, #60	; 0x3c
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	fffffbff 	.word	0xfffffbff

08002304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223c      	movs	r2, #60	; 0x3c
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_TIM_ConfigClockSource+0x18>
 8002318:	2302      	movs	r3, #2
 800231a:	e0ab      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x170>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223c      	movs	r2, #60	; 0x3c
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	223d      	movs	r2, #61	; 0x3d
 8002328:	2102      	movs	r1, #2
 800232a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2277      	movs	r2, #119	; 0x77
 8002338:	4393      	bics	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_TIM_ConfigClockSource+0x178>)
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b40      	cmp	r3, #64	; 0x40
 8002352:	d100      	bne.n	8002356 <HAL_TIM_ConfigClockSource+0x52>
 8002354:	e06b      	b.n	800242e <HAL_TIM_ConfigClockSource+0x12a>
 8002356:	d80e      	bhi.n	8002376 <HAL_TIM_ConfigClockSource+0x72>
 8002358:	2b10      	cmp	r3, #16
 800235a:	d100      	bne.n	800235e <HAL_TIM_ConfigClockSource+0x5a>
 800235c:	e077      	b.n	800244e <HAL_TIM_ConfigClockSource+0x14a>
 800235e:	d803      	bhi.n	8002368 <HAL_TIM_ConfigClockSource+0x64>
 8002360:	2b00      	cmp	r3, #0
 8002362:	d100      	bne.n	8002366 <HAL_TIM_ConfigClockSource+0x62>
 8002364:	e073      	b.n	800244e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002366:	e07c      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002368:	2b20      	cmp	r3, #32
 800236a:	d100      	bne.n	800236e <HAL_TIM_ConfigClockSource+0x6a>
 800236c:	e06f      	b.n	800244e <HAL_TIM_ConfigClockSource+0x14a>
 800236e:	2b30      	cmp	r3, #48	; 0x30
 8002370:	d100      	bne.n	8002374 <HAL_TIM_ConfigClockSource+0x70>
 8002372:	e06c      	b.n	800244e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002374:	e075      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002376:	2b70      	cmp	r3, #112	; 0x70
 8002378:	d00e      	beq.n	8002398 <HAL_TIM_ConfigClockSource+0x94>
 800237a:	d804      	bhi.n	8002386 <HAL_TIM_ConfigClockSource+0x82>
 800237c:	2b50      	cmp	r3, #80	; 0x50
 800237e:	d036      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xea>
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d044      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002384:	e06d      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	0152      	lsls	r2, r2, #5
 800238a:	4293      	cmp	r3, r2
 800238c:	d068      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x15c>
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0192      	lsls	r2, r2, #6
 8002392:	4293      	cmp	r3, r2
 8002394:	d017      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002396:	e064      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f000 fb7e 	bl	8002aa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2277      	movs	r2, #119	; 0x77
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]
      break;
 80023c4:	e04d      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6899      	ldr	r1, [r3, #8]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f000 fb67 	bl	8002aa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	01c9      	lsls	r1, r1, #7
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
      break;
 80023ec:	e039      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	001a      	movs	r2, r3
 80023fc:	f000 fada 	bl	80029b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2150      	movs	r1, #80	; 0x50
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fb34 	bl	8002a74 <TIM_ITRx_SetConfig>
      break;
 800240c:	e029      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	001a      	movs	r2, r3
 800241c:	f000 faf8 	bl	8002a10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2160      	movs	r1, #96	; 0x60
 8002426:	0018      	movs	r0, r3
 8002428:	f000 fb24 	bl	8002a74 <TIM_ITRx_SetConfig>
      break;
 800242c:	e019      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	001a      	movs	r2, r3
 800243c:	f000 faba 	bl	80029b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	0018      	movs	r0, r3
 8002448:	f000 fb14 	bl	8002a74 <TIM_ITRx_SetConfig>
      break;
 800244c:	e009      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0019      	movs	r1, r3
 8002458:	0010      	movs	r0, r2
 800245a:	f000 fb0b 	bl	8002a74 <TIM_ITRx_SetConfig>
      break;
 800245e:	e000      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002460:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223d      	movs	r2, #61	; 0x3d
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	223c      	movs	r2, #60	; 0x3c
 800246e:	2100      	movs	r1, #0
 8002470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffff00ff 	.word	0xffff00ff

08002480 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <TIM_Base_SetConfig+0xd0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x20>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <TIM_Base_SetConfig+0xd4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2270      	movs	r2, #112	; 0x70
 80024f4:	4393      	bics	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a26      	ldr	r2, [pc, #152]	; (80025a0 <TIM_Base_SetConfig+0xd0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <TIM_Base_SetConfig+0xd4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00f      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <TIM_Base_SetConfig+0xd8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00b      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <TIM_Base_SetConfig+0xdc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_Base_SetConfig+0xe0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <TIM_Base_SetConfig+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <TIM_Base_SetConfig+0xe4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <TIM_Base_SetConfig+0xe8>)
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	4393      	bics	r3, r2
 800254a:	001a      	movs	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <TIM_Base_SetConfig+0xd0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00b      	beq.n	800258a <TIM_Base_SetConfig+0xba>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <TIM_Base_SetConfig+0xdc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_Base_SetConfig+0xba>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <TIM_Base_SetConfig+0xe0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d003      	beq.n	800258a <TIM_Base_SetConfig+0xba>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <TIM_Base_SetConfig+0xe4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d103      	bne.n	8002592 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	615a      	str	r2, [r3, #20]
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40002000 	.word	0x40002000
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40014400 	.word	0x40014400
 80025b4:	40014800 	.word	0x40014800
 80025b8:	fffffcff 	.word	0xfffffcff

080025bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4393      	bics	r3, r2
 80025ce:	001a      	movs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2270      	movs	r2, #112	; 0x70
 80025ea:	4393      	bics	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2203      	movs	r2, #3
 80025f2:	4393      	bics	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2202      	movs	r2, #2
 8002604:	4393      	bics	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <TIM_OC1_SetConfig+0xf8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_OC1_SetConfig+0x76>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <TIM_OC1_SetConfig+0xfc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_OC1_SetConfig+0x76>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a25      	ldr	r2, [pc, #148]	; (80026bc <TIM_OC1_SetConfig+0x100>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_OC1_SetConfig+0x76>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <TIM_OC1_SetConfig+0x104>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10c      	bne.n	800264c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2208      	movs	r2, #8
 8002636:	4393      	bics	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2204      	movs	r2, #4
 8002648:	4393      	bics	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <TIM_OC1_SetConfig+0xf8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00b      	beq.n	800266c <TIM_OC1_SetConfig+0xb0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <TIM_OC1_SetConfig+0xfc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <TIM_OC1_SetConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <TIM_OC1_SetConfig+0x100>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_OC1_SetConfig+0xb0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <TIM_OC1_SetConfig+0x104>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d111      	bne.n	8002690 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <TIM_OC1_SetConfig+0x108>)
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <TIM_OC1_SetConfig+0x10c>)
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40014000 	.word	0x40014000
 80026bc:	40014400 	.word	0x40014400
 80026c0:	40014800 	.word	0x40014800
 80026c4:	fffffeff 	.word	0xfffffeff
 80026c8:	fffffdff 	.word	0xfffffdff

080026cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2210      	movs	r2, #16
 80026dc:	4393      	bics	r3, r2
 80026de:	001a      	movs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a2e      	ldr	r2, [pc, #184]	; (80027b4 <TIM_OC2_SetConfig+0xe8>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <TIM_OC2_SetConfig+0xec>)
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2220      	movs	r2, #32
 8002716:	4393      	bics	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <TIM_OC2_SetConfig+0xf0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10d      	bne.n	800274a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	4393      	bics	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	4393      	bics	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <TIM_OC2_SetConfig+0xf0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_OC2_SetConfig+0x9e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <TIM_OC2_SetConfig+0xf4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_OC2_SetConfig+0x9e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <TIM_OC2_SetConfig+0xf8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_OC2_SetConfig+0x9e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <TIM_OC2_SetConfig+0xfc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d113      	bne.n	8002792 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <TIM_OC2_SetConfig+0x100>)
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <TIM_OC2_SetConfig+0x104>)
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	621a      	str	r2, [r3, #32]
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b006      	add	sp, #24
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	ffff8fff 	.word	0xffff8fff
 80027b8:	fffffcff 	.word	0xfffffcff
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800
 80027cc:	fffffbff 	.word	0xfffffbff
 80027d0:	fffff7ff 	.word	0xfffff7ff

080027d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <TIM_OC3_SetConfig+0xe4>)
 80027e4:	401a      	ands	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2270      	movs	r2, #112	; 0x70
 8002800:	4393      	bics	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2203      	movs	r2, #3
 8002808:	4393      	bics	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4a28      	ldr	r2, [pc, #160]	; (80028bc <TIM_OC3_SetConfig+0xe8>)
 800281a:	4013      	ands	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <TIM_OC3_SetConfig+0xec>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10d      	bne.n	800284e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <TIM_OC3_SetConfig+0xf0>)
 8002836:	4013      	ands	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <TIM_OC3_SetConfig+0xf4>)
 800284a:	4013      	ands	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <TIM_OC3_SetConfig+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00b      	beq.n	800286e <TIM_OC3_SetConfig+0x9a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <TIM_OC3_SetConfig+0xf8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <TIM_OC3_SetConfig+0x9a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <TIM_OC3_SetConfig+0xfc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_OC3_SetConfig+0x9a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <TIM_OC3_SetConfig+0x100>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d113      	bne.n	8002896 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <TIM_OC3_SetConfig+0x104>)
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <TIM_OC3_SetConfig+0x108>)
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b006      	add	sp, #24
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fffffeff 	.word	0xfffffeff
 80028bc:	fffffdff 	.word	0xfffffdff
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	fffff7ff 	.word	0xfffff7ff
 80028c8:	fffffbff 	.word	0xfffffbff
 80028cc:	40014000 	.word	0x40014000
 80028d0:	40014400 	.word	0x40014400
 80028d4:	40014800 	.word	0x40014800
 80028d8:	ffffefff 	.word	0xffffefff
 80028dc:	ffffdfff 	.word	0xffffdfff

080028e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <TIM_OC4_SetConfig+0xb0>)
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_OC4_SetConfig+0xb4>)
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a21      	ldr	r2, [pc, #132]	; (8002998 <TIM_OC4_SetConfig+0xb8>)
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <TIM_OC4_SetConfig+0xbc>)
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <TIM_OC4_SetConfig+0xc0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00b      	beq.n	8002958 <TIM_OC4_SetConfig+0x78>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <TIM_OC4_SetConfig+0xc4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <TIM_OC4_SetConfig+0x78>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <TIM_OC4_SetConfig+0xc8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_OC4_SetConfig+0x78>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a16      	ldr	r2, [pc, #88]	; (80029ac <TIM_OC4_SetConfig+0xcc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d109      	bne.n	800296c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <TIM_OC4_SetConfig+0xd0>)
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b006      	add	sp, #24
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	ffffefff 	.word	0xffffefff
 8002994:	ffff8fff 	.word	0xffff8fff
 8002998:	fffffcff 	.word	0xfffffcff
 800299c:	ffffdfff 	.word	0xffffdfff
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800
 80029b0:	ffffbfff 	.word	0xffffbfff

080029b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4393      	bics	r3, r2
 80029ce:	001a      	movs	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	22f0      	movs	r2, #240	; 0xf0
 80029de:	4393      	bics	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	220a      	movs	r2, #10
 80029f0:	4393      	bics	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	621a      	str	r2, [r3, #32]
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b006      	add	sp, #24
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	2210      	movs	r2, #16
 8002a22:	4393      	bics	r3, r2
 8002a24:	001a      	movs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <TIM_TI2_ConfigInputStage+0x60>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	22a0      	movs	r2, #160	; 0xa0
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b006      	add	sp, #24
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	ffff0fff 	.word	0xffff0fff

08002a74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2270      	movs	r2, #112	; 0x70
 8002a88:	4393      	bics	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	2207      	movs	r2, #7
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	609a      	str	r2, [r3, #8]
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <TIM_ETR_SetConfig+0x3c>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	021a      	lsls	r2, r3, #8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b006      	add	sp, #24
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	ffff00ff 	.word	0xffff00ff

08002ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	221f      	movs	r2, #31
 8002af8:	4013      	ands	r3, r2
 8002afa:	2201      	movs	r2, #1
 8002afc:	409a      	lsls	r2, r3
 8002afe:	0013      	movs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	43d2      	mvns	r2, r2
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	211f      	movs	r1, #31
 8002b18:	400b      	ands	r3, r1
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4099      	lsls	r1, r3
 8002b1e:	000b      	movs	r3, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b006      	add	sp, #24
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223c      	movs	r2, #60	; 0x3c
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e041      	b.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	223c      	movs	r2, #60	; 0x3c
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223d      	movs	r2, #61	; 0x3d
 8002b54:	2102      	movs	r1, #2
 8002b56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2270      	movs	r2, #112	; 0x70
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10c      	bne.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223d      	movs	r2, #61	; 0x3d
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223c      	movs	r2, #60	; 0x3c
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40014000 	.word	0x40014000

08002be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	2600      	movs	r6, #0
 8002c04:	4d0c      	ldr	r5, [pc, #48]	; (8002c38 <__libc_init_array+0x38>)
 8002c06:	4c0d      	ldr	r4, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c08:	1b64      	subs	r4, r4, r5
 8002c0a:	10a4      	asrs	r4, r4, #2
 8002c0c:	42a6      	cmp	r6, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	2600      	movs	r6, #0
 8002c12:	f000 f821 	bl	8002c58 <_init>
 8002c16:	4d0a      	ldr	r5, [pc, #40]	; (8002c40 <__libc_init_array+0x40>)
 8002c18:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <__libc_init_array+0x44>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	00b3      	lsls	r3, r6, #2
 8002c26:	58eb      	ldr	r3, [r5, r3]
 8002c28:	4798      	blx	r3
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	00b3      	lsls	r3, r6, #2
 8002c30:	58eb      	ldr	r3, [r5, r3]
 8002c32:	4798      	blx	r3
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08002ca0 	.word	0x08002ca0
 8002c3c:	08002ca0 	.word	0x08002ca0
 8002c40:	08002ca0 	.word	0x08002ca0
 8002c44:	08002ca4 	.word	0x08002ca4

08002c48 <memset>:
 8002c48:	0003      	movs	r3, r0
 8002c4a:	1812      	adds	r2, r2, r0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <memset+0xa>
 8002c50:	4770      	bx	lr
 8002c52:	7019      	strb	r1, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	e7f9      	b.n	8002c4c <memset+0x4>

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
