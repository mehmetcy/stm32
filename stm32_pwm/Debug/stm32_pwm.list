
stm32_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f5c  08003f5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003f5c  08003f5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f5c  08003f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08003fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003fd4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adb3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001914  00000000  00000000  0002ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002d328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dedf  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d64  00000000  00000000  0003bcf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00052dc8  00000000  00000000  00044a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d40  00000000  00000000  000978a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ec4 	.word	0x08003ec4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003ec4 	.word	0x08003ec4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb8b 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f85d 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9b5 	bl	800059c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000232:	f000 f903 	bl	800043c <MX_TIM3_Init>
  MX_ADC_Init();
 8000236:	f000 f8a7 	bl	8000388 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f97f 	bl	800053c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800023e:	4b22      	ldr	r3, [pc, #136]	; (80002c8 <main+0xa8>)
 8000240:	0018      	movs	r0, r3
 8000242:	f001 ff05 	bl	8002050 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000246:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <main+0xa8>)
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f001 ff56 	bl	80020fc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int size_len = sprintf (str, "Servo acisi : %lu\n", servopot, 0xFFFF);
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <main+0xac>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <main+0xb0>)
 8000256:	491f      	ldr	r1, [pc, #124]	; (80002d4 <main+0xb4>)
 8000258:	481f      	ldr	r0, [pc, #124]	; (80002d8 <main+0xb8>)
 800025a:	f003 fa2b 	bl	80036b4 <siprintf>
 800025e:	0003      	movs	r3, r0
 8000260:	607b      	str	r3, [r7, #4]

	  HAL_ADC_Start(&hadc);
 8000262:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <main+0xbc>)
 8000264:	0018      	movs	r0, r3
 8000266:	f000 fd31 	bl	8000ccc <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc, 5) == HAL_OK);
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <main+0xbc>)
 800026c:	2105      	movs	r1, #5
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fd80 	bl	8000d74 <HAL_ADC_PollForConversion>

	  {
		  potadc = HAL_ADC_GetValue(&hadc);
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <main+0xbc>)
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fe80 	bl	8000f7c <HAL_ADC_GetValue>
 800027c:	0002      	movs	r2, r0
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <main+0xc0>)
 8000280:	601a      	str	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servopot);
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0xa8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <main+0xac>)
 8000288:	6812      	ldr	r2, [r2, #0]
 800028a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_ADC_Start_IT(&hadc);
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <main+0xbc>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fe02 	bl	8000e98 <HAL_ADC_Start_IT>
		  HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fbb7 	bl	8000a08 <HAL_Delay>

	  }
	  	  servopot = potadc/6;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <main+0xc0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2106      	movs	r1, #6
 80002a0:	0018      	movs	r0, r3
 80002a2:	f7ff ff31 	bl	8000108 <__udivsi3>
 80002a6:	0003      	movs	r3, r0
 80002a8:	001a      	movs	r2, r3
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0xac>)
 80002ac:	601a      	str	r2, [r3, #0]

	  	// HAL_UART_Transmit(&huart2, (uint8_t)*str, sprintf(str, "Servo : %f\n", servopot), 0xFFFF);
	  	// HAL_Delay(1);


	  	HAL_UART_Transmit (&huart2, (uint8_t *)str, size_len, HAL_MAX_DELAY);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	2301      	movs	r3, #1
 80002b4:	425b      	negs	r3, r3
 80002b6:	4908      	ldr	r1, [pc, #32]	; (80002d8 <main+0xb8>)
 80002b8:	480a      	ldr	r0, [pc, #40]	; (80002e4 <main+0xc4>)
 80002ba:	f002 fe0b 	bl	8002ed4 <HAL_UART_Transmit>
	  	  HAL_Delay(1);
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 fba2 	bl	8000a08 <HAL_Delay>
  {
 80002c4:	e7c4      	b.n	8000250 <main+0x30>
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	20000098 	.word	0x20000098
 80002cc:	200001bc 	.word	0x200001bc
 80002d0:	0000ffff 	.word	0x0000ffff
 80002d4:	08003edc 	.word	0x08003edc
 80002d8:	2000015c 	.word	0x2000015c
 80002dc:	2000017c 	.word	0x2000017c
 80002e0:	200000d8 	.word	0x200000d8
 80002e4:	200000dc 	.word	0x200000dc

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b091      	sub	sp, #68	; 0x44
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2410      	movs	r4, #16
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2330      	movs	r3, #48	; 0x30
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 f9d3 	bl	80036a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	003b      	movs	r3, r7
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f003 f9cc 	bl	80036a4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2212      	movs	r2, #18
 8000312:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2201      	movs	r2, #1
 800031e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2210      	movs	r2, #16
 8000324:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2210      	movs	r2, #16
 800032a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2202      	movs	r2, #2
 8000330:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	0212      	lsls	r2, r2, #8
 8000338:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	187b      	adds	r3, r7, r1
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f9e3 	bl	8001714 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000352:	f000 f949 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	003b      	movs	r3, r7
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035c:	003b      	movs	r3, r7
 800035e:	2202      	movs	r2, #2
 8000360:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000362:	003b      	movs	r3, r7
 8000364:	22b0      	movs	r2, #176	; 0xb0
 8000366:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000368:	003b      	movs	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036e:	003b      	movs	r3, r7
 8000370:	2100      	movs	r1, #0
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fcec 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800037c:	f000 f934 	bl	80005e8 <Error_Handler>
  }
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b011      	add	sp, #68	; 0x44
 8000386:	bd90      	pop	{r4, r7, pc}

08000388 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	0018      	movs	r0, r3
 8000392:	230c      	movs	r3, #12
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f003 f984 	bl	80036a4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800039c:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_ADC_Init+0xac>)
 800039e:	4a26      	ldr	r2, [pc, #152]	; (8000438 <MX_ADC_Init+0xb0>)
 80003a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <MX_ADC_Init+0xac>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80003a8:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_ADC_Init+0xac>)
 80003aa:	2208      	movs	r2, #8
 80003ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_ADC_Init+0xac>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_ADC_Init+0xac>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_ADC_Init+0xac>)
 80003bc:	2204      	movs	r2, #4
 80003be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_ADC_Init+0xac>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003c6:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_ADC_Init+0xac>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_ADC_Init+0xac>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_ADC_Init+0xac>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_ADC_Init+0xac>)
 80003da:	22c2      	movs	r2, #194	; 0xc2
 80003dc:	32ff      	adds	r2, #255	; 0xff
 80003de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_ADC_Init+0xac>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_ADC_Init+0xac>)
 80003e8:	2224      	movs	r2, #36	; 0x24
 80003ea:	2100      	movs	r1, #0
 80003ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_ADC_Init+0xac>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_ADC_Init+0xac>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fb28 	bl	8000a4c <HAL_ADC_Init>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000400:	f000 f8f2 	bl	80005e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0152      	lsls	r2, r2, #5
 8000410:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2205      	movs	r2, #5
 8000416:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000418:	1d3a      	adds	r2, r7, #4
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_ADC_Init+0xac>)
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fdb8 	bl	8000f94 <HAL_ADC_ConfigChannel>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000428:	f000 f8de 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b004      	add	sp, #16
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000017c 	.word	0x2000017c
 8000438:	40012400 	.word	0x40012400

0800043c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08e      	sub	sp, #56	; 0x38
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	2328      	movs	r3, #40	; 0x28
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	2310      	movs	r3, #16
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f003 f929 	bl	80036a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000452:	2320      	movs	r3, #32
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	0018      	movs	r0, r3
 8000458:	2308      	movs	r3, #8
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f003 f921 	bl	80036a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	0018      	movs	r0, r3
 8000466:	231c      	movs	r3, #28
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	f003 f91a 	bl	80036a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000470:	4b30      	ldr	r3, [pc, #192]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000472:	4a31      	ldr	r2, [pc, #196]	; (8000538 <MX_TIM3_Init+0xfc>)
 8000474:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8000476:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000478:	2213      	movs	r2, #19
 800047a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <MX_TIM3_Init+0xf8>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000484:	22fa      	movs	r2, #250	; 0xfa
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <MX_TIM3_Init+0xf8>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b28      	ldr	r3, [pc, #160]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fdad 	bl	8001ff8 <HAL_TIM_Base_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80004a2:	f000 f8a1 	bl	80005e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	2128      	movs	r1, #40	; 0x28
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	0152      	lsls	r2, r2, #5
 80004ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_TIM3_Init+0xf8>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 f83a 	bl	8002530 <HAL_TIM_ConfigClockSource>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80004c0:	f000 f892 	bl	80005e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_TIM3_Init+0xf8>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fde4 	bl	8002094 <HAL_TIM_PWM_Init>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80004d0:	f000 f88a 	bl	80005e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2120      	movs	r1, #32
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004e2:	187a      	adds	r2, r7, r1
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_TIM3_Init+0xf8>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 fc37 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80004f2:	f000 f879 	bl	80005e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2260      	movs	r2, #96	; 0x60
 80004fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	22fa      	movs	r2, #250	; 0xfa
 8000500:	0052      	lsls	r2, r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000514:	2200      	movs	r2, #0
 8000516:	0018      	movs	r0, r3
 8000518:	f001 ff52 	bl	80023c0 <HAL_TIM_PWM_ConfigChannel>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000520:	f000 f862 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <MX_TIM3_Init+0xf8>)
 8000526:	0018      	movs	r0, r3
 8000528:	f000 f8f4 	bl	8000714 <HAL_TIM_MspPostInit>

}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b00e      	add	sp, #56	; 0x38
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000098 	.word	0x20000098
 8000538:	40000400 	.word	0x40000400

0800053c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000542:	4a15      	ldr	r2, [pc, #84]	; (8000598 <MX_USART2_UART_Init+0x5c>)
 8000544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000548:	2296      	movs	r2, #150	; 0x96
 800054a:	0192      	lsls	r2, r2, #6
 800054c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_USART2_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_USART2_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_USART2_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MX_USART2_UART_Init+0x58>)
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fc53 	bl	8002e2c <HAL_UART_Init>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800058a:	f000 f82d 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000dc 	.word	0x200000dc
 8000598:	40004400 	.word	0x40004400

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_GPIO_Init+0x48>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_GPIO_Init+0x48>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	03c9      	lsls	r1, r1, #15
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_GPIO_Init+0x48>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	03db      	lsls	r3, r3, #15
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_GPIO_Init+0x48>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_GPIO_Init+0x48>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MX_GPIO_Init+0x48>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x44>)
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <HAL_MspInit+0x44>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_MspInit+0x44>)
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_MspInit+0x44>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0549      	lsls	r1, r1, #21
 800061c:	430a      	orrs	r2, r1
 800061e:	61da      	str	r2, [r3, #28]
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_MspInit+0x44>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	055b      	lsls	r3, r3, #21
 8000628:	4013      	ands	r3, r2
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	2314      	movs	r3, #20
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	0018      	movs	r0, r3
 800064a:	2314      	movs	r3, #20
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f003 f828 	bl	80036a4 <memset>
  if(hadc->Instance==ADC1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <HAL_ADC_MspInit+0x84>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d12c      	bne.n	80006b8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_ADC_MspInit+0x88>)
 8000660:	699a      	ldr	r2, [r3, #24]
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_ADC_MspInit+0x88>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0089      	lsls	r1, r1, #2
 8000668:	430a      	orrs	r2, r1
 800066a:	619a      	str	r2, [r3, #24]
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_ADC_MspInit+0x88>)
 800066e:	699a      	ldr	r2, [r3, #24]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_ADC_MspInit+0x88>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_ADC_MspInit+0x88>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0289      	lsls	r1, r1, #10
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_ADC_MspInit+0x88>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	029b      	lsls	r3, r3, #10
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	2114      	movs	r1, #20
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2203      	movs	r2, #3
 80006a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 febe 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b00a      	add	sp, #40	; 0x28
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40012400 	.word	0x40012400
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <HAL_TIM_Base_MspInit+0x44>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d113      	bne.n	8000702 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <HAL_TIM_Base_MspInit+0x48>)
 80006dc:	69da      	ldr	r2, [r3, #28]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_TIM_Base_MspInit+0x48>)
 80006e0:	2102      	movs	r1, #2
 80006e2:	430a      	orrs	r2, r1
 80006e4:	61da      	str	r2, [r3, #28]
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_TIM_Base_MspInit+0x48>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	2202      	movs	r2, #2
 80006ec:	4013      	ands	r3, r2
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2010      	movs	r0, #16
 80006f8:	f000 fe6a 	bl	80013d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006fc:	2010      	movs	r0, #16
 80006fe:	f000 fe7c 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b004      	add	sp, #16
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40000400 	.word	0x40000400
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	230c      	movs	r3, #12
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	0018      	movs	r0, r3
 8000722:	2314      	movs	r3, #20
 8000724:	001a      	movs	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	f002 ffbc 	bl	80036a4 <memset>
  if(htim->Instance==TIM3)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <HAL_TIM_MspPostInit+0x74>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d124      	bne.n	8000780 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_TIM_MspPostInit+0x78>)
 8000738:	695a      	ldr	r2, [r3, #20]
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_TIM_MspPostInit+0x78>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0289      	lsls	r1, r1, #10
 8000740:	430a      	orrs	r2, r1
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_TIM_MspPostInit+0x78>)
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	029b      	lsls	r3, r3, #10
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000752:	210c      	movs	r1, #12
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	187a      	adds	r2, r7, r1
 8000774:	2390      	movs	r3, #144	; 0x90
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fe5a 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b008      	add	sp, #32
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40000400 	.word	0x40000400
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	2314      	movs	r3, #20
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	0018      	movs	r0, r3
 800079e:	2314      	movs	r3, #20
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f002 ff7e 	bl	80036a4 <memset>
  if(huart->Instance==USART2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d132      	bne.n	8000818 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007b4:	69da      	ldr	r2, [r3, #28]
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0289      	lsls	r1, r1, #10
 80007bc:	430a      	orrs	r2, r1
 80007be:	61da      	str	r2, [r3, #28]
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	029b      	lsls	r3, r3, #10
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ea:	2114      	movs	r1, #20
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	220c      	movs	r2, #12
 80007f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2202      	movs	r2, #2
 80007f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2203      	movs	r2, #3
 8000802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2201      	movs	r2, #1
 8000808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	187a      	adds	r2, r7, r1
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fe0e 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b00a      	add	sp, #40	; 0x28
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40004400 	.word	0x40004400
 8000824:	40021000 	.word	0x40021000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f8be 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <TIM3_IRQHandler+0x14>)
 8000862:	0018      	movs	r0, r3
 8000864:	f001 fc96 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000098 	.word	0x20000098

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f002 fed4 	bl	8003650 <__errno>
 80008a8:	0003      	movs	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	425b      	negs	r3, r3
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	18d2      	adds	r2, r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b006      	add	sp, #24
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20004000 	.word	0x20004000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	2000008c 	.word	0x2000008c
 80008dc:	200001c8 	.word	0x200001c8

080008e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000916:	f7ff ffe3 	bl	80008e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800091a:	f002 fe9f 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc7f 	bl	8000220 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000930:	08003f64 	.word	0x08003f64
  ldr r2, =_sbss
 8000934:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000938:	200001c8 	.word	0x200001c8

0800093c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>
	...

08000940 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_Init+0x24>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_Init+0x24>)
 800094a:	2110      	movs	r1, #16
 800094c:	430a      	orrs	r2, r1
 800094e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000950:	2000      	movs	r0, #0
 8000952:	f000 f809 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000956:	f7ff fe4d 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_InitTick+0x5c>)
 8000972:	681c      	ldr	r4, [r3, #0]
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_InitTick+0x60>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	0019      	movs	r1, r3
 800097a:	23fa      	movs	r3, #250	; 0xfa
 800097c:	0098      	lsls	r0, r3, #2
 800097e:	f7ff fbc3 	bl	8000108 <__udivsi3>
 8000982:	0003      	movs	r3, r0
 8000984:	0019      	movs	r1, r3
 8000986:	0020      	movs	r0, r4
 8000988:	f7ff fbbe 	bl	8000108 <__udivsi3>
 800098c:	0003      	movs	r3, r0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fd43 	bl	800141a <HAL_SYSTICK_Config>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e00f      	b.n	80009bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d80b      	bhi.n	80009ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	2301      	movs	r3, #1
 80009a6:	425b      	negs	r3, r3
 80009a8:	2200      	movs	r2, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fd10 	bl	80013d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_InitTick+0x64>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	001a      	movs	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	18d2      	adds	r2, r2, r3
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_IncTick+0x20>)
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	20000008 	.word	0x20000008
 80009f0:	200001c0 	.word	0x200001c0

080009f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	200001c0 	.word	0x200001c0

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff fff0 	bl	80009f4 <HAL_GetTick>
 8000a14:	0003      	movs	r3, r0
 8000a16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_Delay+0x40>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	001a      	movs	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	189b      	adds	r3, r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	f7ff ffe0 	bl	80009f4 <HAL_GetTick>
 8000a34:	0002      	movs	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b004      	add	sp, #16
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000008 	.word	0x20000008

08000a4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a54:	230f      	movs	r3, #15
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e125      	b.n	8000cb6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10a      	bne.n	8000a88 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fdda 	bl	800063c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d000      	beq.n	8000a94 <HAL_ADC_Init+0x48>
 8000a92:	e103      	b.n	8000c9c <HAL_ADC_Init+0x250>
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d000      	beq.n	8000aa0 <HAL_ADC_Init+0x54>
 8000a9e:	e0fd      	b.n	8000c9c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000aaa:	d000      	beq.n	8000aae <HAL_ADC_Init+0x62>
 8000aac:	e0f6      	b.n	8000c9c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab2:	4a83      	ldr	r2, [pc, #524]	; (8000cc0 <HAL_ADC_Init+0x274>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d112      	bne.n	8000af2 <HAL_ADC_Init+0xa6>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d009      	beq.n	8000aee <HAL_ADC_Init+0xa2>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d101      	bne.n	8000af2 <HAL_ADC_Init+0xa6>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_ADC_Init+0xa8>
 8000af2:	2300      	movs	r3, #0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d116      	bne.n	8000b26 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	2218      	movs	r2, #24
 8000b00:	4393      	bics	r3, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	0899      	lsrs	r1, r3, #2
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4964      	ldr	r1, [pc, #400]	; (8000cc4 <HAL_ADC_Init+0x278>)
 8000b32:	400a      	ands	r2, r1
 8000b34:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7e1b      	ldrb	r3, [r3, #24]
 8000b3a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7e5b      	ldrb	r3, [r3, #25]
 8000b40:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b42:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7e9b      	ldrb	r3, [r3, #26]
 8000b48:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d002      	beq.n	8000b5a <HAL_ADC_Init+0x10e>
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	015b      	lsls	r3, r3, #5
 8000b58:	e000      	b.n	8000b5c <HAL_ADC_Init+0x110>
 8000b5a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b5c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b62:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d101      	bne.n	8000b70 <HAL_ADC_Init+0x124>
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	e000      	b.n	8000b72 <HAL_ADC_Init+0x126>
 8000b70:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b72:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2124      	movs	r1, #36	; 0x24
 8000b78:	5c5b      	ldrb	r3, [r3, r1]
 8000b7a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b7c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7edb      	ldrb	r3, [r3, #27]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d115      	bne.n	8000bb8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7e9b      	ldrb	r3, [r3, #26]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	0252      	lsls	r2, r2, #9
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	e00b      	b.n	8000bb8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	23c2      	movs	r3, #194	; 0xc2
 8000bbe:	33ff      	adds	r3, #255	; 0xff
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d007      	beq.n	8000bd4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68d9      	ldr	r1, [r3, #12]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	055b      	lsls	r3, r3, #21
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d01b      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d017      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d013      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d00f      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d00b      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	2b05      	cmp	r3, #5
 8000c16:	d007      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	2b06      	cmp	r3, #6
 8000c1e:	d003      	beq.n	8000c28 <HAL_ADC_Init+0x1dc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d112      	bne.n	8000c4e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2107      	movs	r1, #7
 8000c34:	438a      	bics	r2, r1
 8000c36:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6959      	ldr	r1, [r3, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	2207      	movs	r2, #7
 8000c44:	401a      	ands	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <HAL_ADC_Init+0x27c>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d10b      	bne.n	8000c76 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4393      	bics	r3, r2
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c74:	e01c      	b.n	8000cb0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7a:	2212      	movs	r2, #18
 8000c7c:	4393      	bics	r3, r2
 8000c7e:	2210      	movs	r2, #16
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c9a:	e009      	b.n	8000cb0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	fffffefd 	.word	0xfffffefd
 8000cc4:	fffe0219 	.word	0xfffe0219
 8000cc8:	833fffe7 	.word	0x833fffe7

08000ccc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d138      	bne.n	8000d5a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2234      	movs	r2, #52	; 0x34
 8000cec:	5c9b      	ldrb	r3, [r3, r2]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <HAL_ADC_Start+0x2a>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e038      	b.n	8000d68 <HAL_ADC_Start+0x9c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2234      	movs	r2, #52	; 0x34
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7e5b      	ldrb	r3, [r3, #25]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d007      	beq.n	8000d16 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d06:	230f      	movs	r3, #15
 8000d08:	18fc      	adds	r4, r7, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 fa37 	bl	8001180 <ADC_Enable>
 8000d12:	0003      	movs	r3, r0
 8000d14:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d16:	230f      	movs	r3, #15
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d120      	bne.n	8000d62 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_ADC_Start+0xa4>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0052      	lsls	r2, r2, #1
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2234      	movs	r2, #52	; 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	221c      	movs	r2, #28
 8000d46:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2104      	movs	r1, #4
 8000d54:	430a      	orrs	r2, r1
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	e003      	b.n	8000d62 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2202      	movs	r2, #2
 8000d60:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781b      	ldrb	r3, [r3, #0]
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b005      	add	sp, #20
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	fffff0fe 	.word	0xfffff0fe

08000d74 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d102      	bne.n	8000d8c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000d86:	2308      	movs	r3, #8
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e014      	b.n	8000db6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d10b      	bne.n	8000db2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9e:	2220      	movs	r2, #32
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2234      	movs	r2, #52	; 0x34
 8000daa:	2100      	movs	r1, #0
 8000dac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e06b      	b.n	8000e8a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000db2:	230c      	movs	r3, #12
 8000db4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000db6:	f7ff fe1d 	bl	80009f4 <HAL_GetTick>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000dbe:	e019      	b.n	8000df4 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	d016      	beq.n	8000df4 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <HAL_ADC_PollForConversion+0x68>
 8000dcc:	f7ff fe12 	bl	80009f4 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d20b      	bcs.n	8000df4 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de0:	2204      	movs	r2, #4
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2234      	movs	r2, #52	; 0x34
 8000dec:	2100      	movs	r1, #0
 8000dee:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e04a      	b.n	8000e8a <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d0df      	beq.n	8000dc0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	23c0      	movs	r3, #192	; 0xc0
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d12d      	bne.n	8000e78 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d129      	bne.n	8000e78 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d122      	bne.n	8000e78 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d110      	bne.n	8000e60 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	210c      	movs	r1, #12
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_ADC_PollForConversion+0x120>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	2201      	movs	r2, #1
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5e:	e00b      	b.n	8000e78 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e64:	2220      	movs	r2, #32
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e70:	2201      	movs	r2, #1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7e1b      	ldrb	r3, [r3, #24]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	220c      	movs	r2, #12
 8000e86:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	fffffefe 	.word	0xfffffefe

08000e98 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d156      	bne.n	8000f62 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	5c9b      	ldrb	r3, [r3, r2]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Start_IT+0x2a>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e056      	b.n	8000f70 <HAL_ADC_Start_IT+0xd8>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2234      	movs	r2, #52	; 0x34
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7e5b      	ldrb	r3, [r3, #25]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d007      	beq.n	8000ee2 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fc      	adds	r4, r7, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 f951 	bl	8001180 <ADC_Enable>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d13e      	bne.n	8000f6a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_ADC_Start_IT+0xe0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	221c      	movs	r2, #28
 8000f12:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d110      	bne.n	8000f3e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2104      	movs	r1, #4
 8000f28:	438a      	bics	r2, r1
 8000f2a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2118      	movs	r1, #24
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	605a      	str	r2, [r3, #4]
          break;
 8000f3c:	e008      	b.n	8000f50 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	211c      	movs	r1, #28
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	605a      	str	r2, [r3, #4]
          break;
 8000f4e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	e003      	b.n	8000f6a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	2202      	movs	r2, #2
 8000f68:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b005      	add	sp, #20
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	fffff0fe 	.word	0xfffff0fe

08000f7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	055b      	lsls	r3, r3, #21
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d011      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x46>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d00d      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x46>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d009      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x46>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d005      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x46>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d001      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x46>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2234      	movs	r2, #52	; 0x34
 8000fde:	5c9b      	ldrb	r3, [r3, r2]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x54>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e0bb      	b.n	8001160 <HAL_ADC_ConfigChannel+0x1cc>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2234      	movs	r2, #52	; 0x34
 8000fec:	2101      	movs	r1, #1
 8000fee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d000      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x6a>
 8000ffc:	e09f      	b.n	800113e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a59      	ldr	r2, [pc, #356]	; (8001168 <HAL_ADC_ConfigChannel+0x1d4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d100      	bne.n	800100a <HAL_ADC_ConfigChannel+0x76>
 8001008:	e077      	b.n	80010fa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	429a      	cmp	r2, r3
 800102a:	d037      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b01      	cmp	r3, #1
 8001032:	d033      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b02      	cmp	r3, #2
 800103a:	d02f      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b03      	cmp	r3, #3
 8001042:	d02b      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	2b04      	cmp	r3, #4
 800104a:	d027      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	2b05      	cmp	r3, #5
 8001052:	d023      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	2b06      	cmp	r3, #6
 800105a:	d01f      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	2b07      	cmp	r3, #7
 8001062:	d01b      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	2107      	movs	r1, #7
 8001070:	400b      	ands	r3, r1
 8001072:	429a      	cmp	r2, r3
 8001074:	d012      	beq.n	800109c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2107      	movs	r1, #7
 8001082:	438a      	bics	r2, r1
 8001084:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6959      	ldr	r1, [r3, #20]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2207      	movs	r2, #7
 8001092:	401a      	ands	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b10      	cmp	r3, #16
 80010a2:	d003      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x118>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b11      	cmp	r3, #17
 80010aa:	d152      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_ADC_ConfigChannel+0x1d8>)
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b10      	cmp	r3, #16
 80010b6:	d102      	bne.n	80010be <HAL_ADC_ConfigChannel+0x12a>
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	e001      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x12e>
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	03db      	lsls	r3, r3, #15
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_ADC_ConfigChannel+0x1d8>)
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	d140      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_ADC_ConfigChannel+0x1dc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4927      	ldr	r1, [pc, #156]	; (8001174 <HAL_ADC_ConfigChannel+0x1e0>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff f816 	bl	8000108 <__udivsi3>
 80010dc:	0003      	movs	r3, r0
 80010de:	001a      	movs	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	189b      	adds	r3, r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ea:	e002      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f9      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x158>
 80010f8:	e02b      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	4099      	lsls	r1, r3
 8001108:	000b      	movs	r3, r1
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	400a      	ands	r2, r1
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b10      	cmp	r3, #16
 800111a:	d003      	beq.n	8001124 <HAL_ADC_ConfigChannel+0x190>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b11      	cmp	r3, #17
 8001122:	d116      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_ADC_ConfigChannel+0x1d8>)
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b10      	cmp	r3, #16
 800112e:	d101      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1a0>
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HAL_ADC_ConfigChannel+0x1e4>)
 8001132:	e000      	b.n	8001136 <HAL_ADC_ConfigChannel+0x1a2>
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_ADC_ConfigChannel+0x1e8>)
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_ADC_ConfigChannel+0x1d8>)
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e009      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	2220      	movs	r2, #32
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800114a:	230f      	movs	r3, #15
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2234      	movs	r2, #52	; 0x34
 8001156:	2100      	movs	r1, #0
 8001158:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800115a:	230f      	movs	r3, #15
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	781b      	ldrb	r3, [r3, #0]
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b004      	add	sp, #16
 8001166:	bd80      	pop	{r7, pc}
 8001168:	00001001 	.word	0x00001001
 800116c:	40012708 	.word	0x40012708
 8001170:	20000000 	.word	0x20000000
 8001174:	000f4240 	.word	0x000f4240
 8001178:	ff7fffff 	.word	0xff7fffff
 800117c:	ffbfffff 	.word	0xffbfffff

08001180 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2203      	movs	r2, #3
 8001198:	4013      	ands	r3, r2
 800119a:	2b01      	cmp	r3, #1
 800119c:	d112      	bne.n	80011c4 <ADC_Enable+0x44>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2201      	movs	r2, #1
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d009      	beq.n	80011c0 <ADC_Enable+0x40>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	401a      	ands	r2, r3
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	429a      	cmp	r2, r3
 80011be:	d101      	bne.n	80011c4 <ADC_Enable+0x44>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <ADC_Enable+0x46>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d14b      	bne.n	8001262 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <ADC_Enable+0xec>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	2210      	movs	r2, #16
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2201      	movs	r2, #1
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e038      	b.n	8001264 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <ADC_Enable+0xf0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	491b      	ldr	r1, [pc, #108]	; (8001274 <ADC_Enable+0xf4>)
 8001208:	0018      	movs	r0, r3
 800120a:	f7fe ff7d 	bl	8000108 <__udivsi3>
 800120e:	0003      	movs	r3, r0
 8001210:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001212:	e002      	b.n	800121a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3b01      	subs	r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f9      	bne.n	8001214 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001220:	f7ff fbe8 	bl	80009f4 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001228:	e014      	b.n	8001254 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800122a:	f7ff fbe3 	bl	80009f4 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d90d      	bls.n	8001254 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	2210      	movs	r2, #16
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	2201      	movs	r2, #1
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e007      	b.n	8001264 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	2b01      	cmp	r3, #1
 8001260:	d1e3      	bne.n	800122a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	80000017 	.word	0x80000017
 8001270:	20000000 	.word	0x20000000
 8001274:	000f4240 	.word	0x000f4240

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	0002      	movs	r2, r0
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b7f      	cmp	r3, #127	; 0x7f
 800128a:	d809      	bhi.n	80012a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	001a      	movs	r2, r3
 8001292:	231f      	movs	r3, #31
 8001294:	401a      	ands	r2, r3
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_EnableIRQ+0x30>)
 8001298:	2101      	movs	r1, #1
 800129a:	4091      	lsls	r1, r2
 800129c:	000a      	movs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
  }
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	0002      	movs	r2, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b7f      	cmp	r3, #127	; 0x7f
 80012c0:	d828      	bhi.n	8001314 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c2:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <__NVIC_SetPriority+0xd4>)
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	33c0      	adds	r3, #192	; 0xc0
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	589b      	ldr	r3, [r3, r2]
 80012d2:	1dfa      	adds	r2, r7, #7
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	0011      	movs	r1, r2
 80012d8:	2203      	movs	r2, #3
 80012da:	400a      	ands	r2, r1
 80012dc:	00d2      	lsls	r2, r2, #3
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	4091      	lsls	r1, r2
 80012e2:	000a      	movs	r2, r1
 80012e4:	43d2      	mvns	r2, r2
 80012e6:	401a      	ands	r2, r3
 80012e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	401a      	ands	r2, r3
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	2303      	movs	r3, #3
 80012fa:	4003      	ands	r3, r0
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001300:	481f      	ldr	r0, [pc, #124]	; (8001380 <__NVIC_SetPriority+0xd4>)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	430a      	orrs	r2, r1
 800130c:	33c0      	adds	r3, #192	; 0xc0
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001312:	e031      	b.n	8001378 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <__NVIC_SetPriority+0xd8>)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0019      	movs	r1, r3
 800131c:	230f      	movs	r3, #15
 800131e:	400b      	ands	r3, r1
 8001320:	3b08      	subs	r3, #8
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3306      	adds	r3, #6
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	3304      	adds	r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1dfa      	adds	r2, r7, #7
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	0011      	movs	r1, r2
 8001334:	2203      	movs	r2, #3
 8001336:	400a      	ands	r2, r1
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	21ff      	movs	r1, #255	; 0xff
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	401a      	ands	r2, r3
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	2303      	movs	r3, #3
 8001356:	4003      	ands	r3, r0
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <__NVIC_SetPriority+0xd8>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	001c      	movs	r4, r3
 8001364:	230f      	movs	r3, #15
 8001366:	4023      	ands	r3, r4
 8001368:	3b08      	subs	r3, #8
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	430a      	orrs	r2, r1
 800136e:	3306      	adds	r3, #6
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	18c3      	adds	r3, r0, r3
 8001374:	3304      	adds	r3, #4
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b003      	add	sp, #12
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <SysTick_Config+0x40>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e010      	b.n	80013c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <SysTick_Config+0x44>)
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	3a01      	subs	r2, #1
 80013a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	2301      	movs	r3, #1
 80013a8:	425b      	negs	r3, r3
 80013aa:	2103      	movs	r1, #3
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff ff7d 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <SysTick_Config+0x44>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x44>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013be:	2300      	movs	r3, #0
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	00ffffff 	.word	0x00ffffff
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	210f      	movs	r1, #15
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	0002      	movs	r2, r0
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff ff33 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ffaf 	bl	8001388 <SysTick_Config>
 800142a:	0003      	movs	r3, r0
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e14f      	b.n	80016e4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4091      	lsls	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d100      	bne.n	800145c <HAL_GPIO_Init+0x28>
 800145a:	e140      	b.n	80016de <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	43da      	mvns	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	409a      	lsls	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	2201      	movs	r2, #1
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	58d3      	ldr	r3, [r2, r3]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2207      	movs	r2, #7
 8001530:	4013      	ands	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2107      	movs	r1, #7
 800154a:	400b      	ands	r3, r1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	6939      	ldr	r1, [r7, #16]
 8001564:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	401a      	ands	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	055b      	lsls	r3, r3, #21
 80015a2:	4013      	ands	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_GPIO_Init+0x174>
 80015a6:	e09a      	b.n	80016de <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c0:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	589b      	ldr	r3, [r3, r2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	43da      	mvns	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	2390      	movs	r3, #144	; 0x90
 80015e8:	05db      	lsls	r3, r3, #23
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1e2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1de>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <HAL_GPIO_Init+0x2d4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1da>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_GPIO_Init+0x2d8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1d6>
 8001606:	2303      	movs	r3, #3
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x1e4>
 800160a:	2305      	movs	r3, #5
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x1e4>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001616:	2300      	movs	r3, #0
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	2103      	movs	r1, #3
 800161c:	400a      	ands	r2, r1
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4013      	ands	r3, r2
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43da      	mvns	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	4013      	ands	r3, r2
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	035b      	lsls	r3, r3, #13
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	1e13      	subs	r3, r2, #0
 80016ee:	d000      	beq.n	80016f2 <HAL_GPIO_Init+0x2be>
 80016f0:	e6a8      	b.n	8001444 <HAL_GPIO_Init+0x10>
  } 
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b006      	add	sp, #24
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	48000400 	.word	0x48000400
 8001708:	48000800 	.word	0x48000800
 800170c:	48000c00 	.word	0x48000c00
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e305      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x1e>
 8001730:	e08d      	b.n	800184e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001732:	4bc5      	ldr	r3, [pc, #788]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	220c      	movs	r2, #12
 8001738:	4013      	ands	r3, r2
 800173a:	2b04      	cmp	r3, #4
 800173c:	d00e      	beq.n	800175c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173e:	4bc2      	ldr	r3, [pc, #776]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	220c      	movs	r2, #12
 8001744:	4013      	ands	r3, r2
 8001746:	2b08      	cmp	r3, #8
 8001748:	d116      	bne.n	8001778 <HAL_RCC_OscConfig+0x64>
 800174a:	4bbf      	ldr	r3, [pc, #764]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	025b      	lsls	r3, r3, #9
 8001752:	401a      	ands	r2, r3
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	429a      	cmp	r2, r3
 800175a:	d10d      	bne.n	8001778 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4bba      	ldr	r3, [pc, #744]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x56>
 8001768:	e070      	b.n	800184c <HAL_RCC_OscConfig+0x138>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d000      	beq.n	8001774 <HAL_RCC_OscConfig+0x60>
 8001772:	e06b      	b.n	800184c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e2dc      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x7c>
 8001780:	4bb1      	ldr	r3, [pc, #708]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4bb0      	ldr	r3, [pc, #704]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0249      	lsls	r1, r1, #9
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e02f      	b.n	80017f0 <HAL_RCC_OscConfig+0xdc>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x9e>
 8001798:	4bab      	ldr	r3, [pc, #684]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4baa      	ldr	r3, [pc, #680]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800179e:	49ab      	ldr	r1, [pc, #684]	; (8001a4c <HAL_RCC_OscConfig+0x338>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	4ba8      	ldr	r3, [pc, #672]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4ba7      	ldr	r3, [pc, #668]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017aa:	49a9      	ldr	r1, [pc, #676]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e01e      	b.n	80017f0 <HAL_RCC_OscConfig+0xdc>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0xc4>
 80017ba:	4ba3      	ldr	r3, [pc, #652]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4ba2      	ldr	r3, [pc, #648]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	02c9      	lsls	r1, r1, #11
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	4b9f      	ldr	r3, [pc, #636]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	0249      	lsls	r1, r1, #9
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xdc>
 80017d8:	4b9b      	ldr	r3, [pc, #620]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b9a      	ldr	r3, [pc, #616]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017de:	499b      	ldr	r1, [pc, #620]	; (8001a4c <HAL_RCC_OscConfig+0x338>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	4b98      	ldr	r3, [pc, #608]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b97      	ldr	r3, [pc, #604]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017ea:	4999      	ldr	r1, [pc, #612]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d014      	beq.n	8001822 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f8fc 	bl	80009f4 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001802:	f7ff f8f7 	bl	80009f4 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e28e      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0xee>
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff f8e7 	bl	80009f4 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff f8e2 	bl	80009f4 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e279      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b82      	ldr	r3, [pc, #520]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4013      	ands	r3, r2
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x118>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d100      	bne.n	800185a <HAL_RCC_OscConfig+0x146>
 8001858:	e06c      	b.n	8001934 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800185a:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	220c      	movs	r2, #12
 8001860:	4013      	ands	r3, r2
 8001862:	d00e      	beq.n	8001882 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d11f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x19c>
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	025b      	lsls	r3, r3, #9
 8001878:	401a      	ands	r2, r3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	429a      	cmp	r2, r3
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x184>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e24c      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	22f8      	movs	r2, #248	; 0xf8
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00da      	lsls	r2, r3, #3
 80018a8:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e041      	b.n	8001934 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d024      	beq.n	8001902 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f896 	bl	80009f4 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff f891 	bl	80009f4 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e228      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d0f1      	beq.n	80018ce <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	22f8      	movs	r2, #248	; 0xf8
 80018f0:	4393      	bics	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	00da      	lsls	r2, r3, #3
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e018      	b.n	8001934 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001908:	2101      	movs	r1, #1
 800190a:	438a      	bics	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff f871 	bl	80009f4 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff f86c 	bl	80009f4 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e203      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d1f1      	bne.n	8001918 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2208      	movs	r2, #8
 800193a:	4013      	ands	r3, r2
 800193c:	d036      	beq.n	80019ac <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d019      	beq.n	800197a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800194c:	2101      	movs	r1, #1
 800194e:	430a      	orrs	r2, r1
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff f84f 	bl	80009f4 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff f84a 	bl	80009f4 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1e1      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	d0f1      	beq.n	800195c <HAL_RCC_OscConfig+0x248>
 8001978:	e018      	b.n	80019ac <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001980:	2101      	movs	r1, #1
 8001982:	438a      	bics	r2, r1
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff f835 	bl	80009f4 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff f830 	bl	80009f4 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1c7      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	2202      	movs	r2, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1f1      	bne.n	8001990 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d100      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2a4>
 80019b6:	e0b5      	b.n	8001b24 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b8:	231f      	movs	r3, #31
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80019c2:	69da      	ldr	r2, [r3, #28]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	4013      	ands	r3, r2
 80019ca:	d111      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0549      	lsls	r1, r1, #21
 80019d6:	430a      	orrs	r2, r1
 80019d8:	61da      	str	r2, [r3, #28]
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	055b      	lsls	r3, r3, #21
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019e8:	231f      	movs	r3, #31
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_OscConfig+0x340>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d11a      	bne.n	8001a32 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x340>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_RCC_OscConfig+0x340>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0049      	lsls	r1, r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fff3 	bl	80009f4 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7fe ffee 	bl	80009f4 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e185      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x340>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10e      	bne.n	8001a58 <HAL_RCC_OscConfig+0x344>
 8001a3a:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001a3c:	6a1a      	ldr	r2, [r3, #32]
 8001a3e:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	621a      	str	r2, [r3, #32]
 8001a46:	e035      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3a0>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	fffeffff 	.word	0xfffeffff
 8001a50:	fffbffff 	.word	0xfffbffff
 8001a54:	40007000 	.word	0x40007000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x366>
 8001a60:	4bb6      	ldr	r3, [pc, #728]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	4bb5      	ldr	r3, [pc, #724]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	438a      	bics	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	4bb3      	ldr	r3, [pc, #716]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4bb2      	ldr	r3, [pc, #712]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a72:	2104      	movs	r1, #4
 8001a74:	438a      	bics	r2, r1
 8001a76:	621a      	str	r2, [r3, #32]
 8001a78:	e01c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3a0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x388>
 8001a82:	4bae      	ldr	r3, [pc, #696]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4bad      	ldr	r3, [pc, #692]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a88:	2104      	movs	r1, #4
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	621a      	str	r2, [r3, #32]
 8001a8e:	4bab      	ldr	r3, [pc, #684]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a90:	6a1a      	ldr	r2, [r3, #32]
 8001a92:	4baa      	ldr	r3, [pc, #680]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	621a      	str	r2, [r3, #32]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3a0>
 8001a9c:	4ba7      	ldr	r3, [pc, #668]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4ba6      	ldr	r3, [pc, #664]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	4ba4      	ldr	r3, [pc, #656]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001aae:	2104      	movs	r1, #4
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d014      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe ff9a 	bl	80009f4 <HAL_GetTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	e009      	b.n	8001ada <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7fe ff95 	bl	80009f4 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4a9b      	ldr	r2, [pc, #620]	; (8001d40 <HAL_RCC_OscConfig+0x62c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e12b      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ada:	4b98      	ldr	r3, [pc, #608]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3b2>
 8001ae4:	e013      	b.n	8001b0e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7fe ff85 	bl	80009f4 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aee:	e009      	b.n	8001b04 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f7fe ff80 	bl	80009f4 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	4a91      	ldr	r2, [pc, #580]	; (8001d40 <HAL_RCC_OscConfig+0x62c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e116      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b8d      	ldr	r3, [pc, #564]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b0e:	231f      	movs	r3, #31
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b1a:	69da      	ldr	r2, [r3, #28]
 8001b1c:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b1e:	4989      	ldr	r1, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x630>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d12a      	bne.n	8001b8c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b36:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3a:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b42:	4b7e      	ldr	r3, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b48:	2101      	movs	r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4e:	f7fe ff51 	bl	80009f4 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b58:	f7fe ff4c 	bl	80009f4 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0e3      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d0f1      	beq.n	8001b58 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b74:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b78:	22f8      	movs	r2, #248	; 0xf8
 8001b7a:	4393      	bics	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	00da      	lsls	r2, r3, #3
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8a:	e034      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	3305      	adds	r3, #5
 8001b92:	d111      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b94:	4b69      	ldr	r3, [pc, #420]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ba0:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	22f8      	movs	r2, #248	; 0xf8
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	00da      	lsls	r2, r3, #3
 8001bb0:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb6:	e01e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bb8:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bc4:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	438a      	bics	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7fe ff10 	bl	80009f4 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bda:	f7fe ff0b 	bl	80009f4 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0a2      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f1      	bne.n	8001bda <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d100      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
 8001bfe:	e097      	b.n	8001d30 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c00:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	220c      	movs	r2, #12
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4fa>
 8001c0c:	e06b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d14c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c1c:	494a      	ldr	r1, [pc, #296]	; (8001d48 <HAL_RCC_OscConfig+0x634>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7fe fee7 	bl	80009f4 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe fee2 	bl	80009f4 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e079      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	049b      	lsls	r3, r3, #18
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	220f      	movs	r2, #15
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x638>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	431a      	orrs	r2, r3
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	0449      	lsls	r1, r1, #17
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe feb5 	bl	80009f4 <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe feb0 	bl	80009f4 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e047      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	049b      	lsls	r3, r3, #18
 8001caa:	4013      	ands	r3, r2
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x57c>
 8001cae:	e03f      	b.n	8001d30 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001cb6:	4924      	ldr	r1, [pc, #144]	; (8001d48 <HAL_RCC_OscConfig+0x634>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fe9a 	bl	80009f4 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe fe95 	bl	80009f4 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e02c      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	049b      	lsls	r3, r3, #18
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5b2>
 8001ce4:	e024      	b.n	8001d30 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e01f      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	23c0      	movs	r3, #192	; 0xc0
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10e      	bne.n	8001d2c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	220f      	movs	r2, #15
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	23f0      	movs	r3, #240	; 0xf0
 8001d20:	039b      	lsls	r3, r3, #14
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b008      	add	sp, #32
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	00001388 	.word	0x00001388
 8001d44:	efffffff 	.word	0xefffffff
 8001d48:	feffffff 	.word	0xfeffffff
 8001d4c:	ffc27fff 	.word	0xffc27fff

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b3      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d911      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4b55      	ldr	r3, [pc, #340]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e09a      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d015      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2204      	movs	r2, #4
 8001da6:	4013      	ands	r3, r2
 8001da8:	d006      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001db0:	21e0      	movs	r1, #224	; 0xe0
 8001db2:	00c9      	lsls	r1, r1, #3
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	22f0      	movs	r2, #240	; 0xf0
 8001dbe:	4393      	bics	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d040      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	4013      	ands	r3, r2
 8001de8:	d114      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06e      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	049b      	lsls	r3, r3, #18
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d108      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e062      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e05b      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fde4 	bl	80009f4 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7fe fddf 	bl	80009f4 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a27      	ldr	r2, [pc, #156]	; (8001edc <HAL_RCC_ClockConfig+0x18c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e042      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1ec      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d211      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x184>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e020      	b.n	8001ecc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_RCC_ClockConfig+0x190>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ea8:	f000 f820 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eac:	0001      	movs	r1, r0
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x188>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x194>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	000a      	movs	r2, r1
 8001ebe:	40da      	lsrs	r2, r3
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x198>)
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7fe fd4f 	bl	8000968 <HAL_InitTick>
  
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	00001388 	.word	0x00001388
 8001ee0:	fffff8ff 	.word	0xfffff8ff
 8001ee4:	08003f10 	.word	0x08003f10
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b08f      	sub	sp, #60	; 0x3c
 8001ef0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001efa:	c313      	stmia	r3!, {r0, r1, r4}
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f06:	c313      	stmia	r3!, {r0, r1, r4}
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d002      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x4a>
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d003      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x50>
 8001f34:	e02f      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f3a:	e02f      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	220f      	movs	r2, #15
 8001f42:	4013      	ands	r3, r2
 8001f44:	2214      	movs	r2, #20
 8001f46:	18ba      	adds	r2, r7, r2
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	220f      	movs	r2, #15
 8001f52:	4013      	ands	r3, r2
 8001f54:	1d3a      	adds	r2, r7, #4
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	401a      	ands	r2, r3
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f6c:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f6e:	f7fe f8cb 	bl	8000108 <__udivsi3>
 8001f72:	0003      	movs	r3, r0
 8001f74:	001a      	movs	r2, r3
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	4353      	muls	r3, r2
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f82:	f7fe f8c1 	bl	8000108 <__udivsi3>
 8001f86:	0003      	movs	r3, r0
 8001f88:	001a      	movs	r2, r3
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	4353      	muls	r3, r2
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f94:	e002      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b00f      	add	sp, #60	; 0x3c
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	08003ef0 	.word	0x08003ef0
 8001fac:	08003f00 	.word	0x08003f00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	20000000 	.word	0x20000000

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fd0:	f7ff fff2 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd4:	0001      	movs	r1, r0
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	40d9      	lsrs	r1, r3
 8001fe6:	000b      	movs	r3, r1
}    
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003f20 	.word	0x08003f20

08001ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e01e      	b.n	8002048 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223d      	movs	r2, #61	; 0x3d
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223c      	movs	r2, #60	; 0x3c
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe fb51 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223d      	movs	r2, #61	; 0x3d
 800202a:	2102      	movs	r1, #2
 800202c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f000 fb5f 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223d      	movs	r2, #61	; 0x3d
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	223d      	movs	r2, #61	; 0x3d
 800205c:	2102      	movs	r1, #2
 800205e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b06      	cmp	r3, #6
 8002070:	d007      	beq.n	8002082 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223d      	movs	r2, #61	; 0x3d
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e01e      	b.n	80020e4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	223d      	movs	r2, #61	; 0x3d
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	223c      	movs	r2, #60	; 0x3c
 80020b6:	2100      	movs	r1, #0
 80020b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f815 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223d      	movs	r2, #61	; 0x3d
 80020c6:	2102      	movs	r1, #2
 80020c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	0019      	movs	r1, r3
 80020d4:	0010      	movs	r0, r2
 80020d6:	f000 fb11 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	223d      	movs	r2, #61	; 0x3d
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6839      	ldr	r1, [r7, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	0018      	movs	r0, r3
 8002110:	f000 fe00 	bl	8002d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_TIM_PWM_Start+0x88>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00e      	beq.n	800213c <HAL_TIM_PWM_Start+0x40>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_TIM_PWM_Start+0x8c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_TIM_PWM_Start+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_TIM_PWM_Start+0x90>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_TIM_PWM_Start+0x40>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_TIM_PWM_Start+0x94>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_TIM_PWM_Start+0x44>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_TIM_PWM_Start+0x46>
 8002140:	2300      	movs	r3, #0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0209      	lsls	r1, r1, #8
 8002154:	430a      	orrs	r2, r1
 8002156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2207      	movs	r2, #7
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b06      	cmp	r3, #6
 8002168:	d007      	beq.n	800217a <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400
 8002190:	40014800 	.word	0x40014800

08002194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d124      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d11d      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2203      	movs	r2, #3
 80021be:	4252      	negs	r2, r2
 80021c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2203      	movs	r2, #3
 80021d0:	4013      	ands	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 fa78 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 80021dc:	e007      	b.n	80021ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 fa6b 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fa77 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d125      	bne.n	800224e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2204      	movs	r2, #4
 800220a:	4013      	ands	r3, r2
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11e      	bne.n	800224e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2205      	movs	r2, #5
 8002216:	4252      	negs	r2, r2
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fa4b 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 8002236:	e007      	b.n	8002248 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fa3e 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fa4a 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2208      	movs	r2, #8
 8002256:	4013      	ands	r3, r2
 8002258:	2b08      	cmp	r3, #8
 800225a:	d124      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2208      	movs	r2, #8
 8002264:	4013      	ands	r3, r2
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11d      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2209      	movs	r2, #9
 8002270:	4252      	negs	r2, r2
 8002272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fa1f 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 800228e:	e007      	b.n	80022a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 fa12 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fa1e 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2210      	movs	r2, #16
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d125      	bne.n	8002300 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2210      	movs	r2, #16
 80022bc:	4013      	ands	r3, r2
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d11e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2211      	movs	r2, #17
 80022c8:	4252      	negs	r2, r2
 80022ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2208      	movs	r2, #8
 80022d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f9f2 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 80022e8:	e007      	b.n	80022fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 f9e5 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 f9f1 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10f      	bne.n	800232e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	2b01      	cmp	r3, #1
 800231a:	d108      	bne.n	800232e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2202      	movs	r2, #2
 8002322:	4252      	negs	r2, r2
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f9bf 	bl	80026ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2280      	movs	r2, #128	; 0x80
 8002336:	4013      	ands	r3, r2
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d10f      	bne.n	800235c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	4013      	ands	r3, r2
 8002346:	2b80      	cmp	r3, #128	; 0x80
 8002348:	d108      	bne.n	800235c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2281      	movs	r2, #129	; 0x81
 8002350:	4252      	negs	r2, r2
 8002352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fd60 	bl	8002e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	4013      	ands	r3, r2
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d10f      	bne.n	800238a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d108      	bne.n	800238a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	4252      	negs	r2, r2
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f9b1 	bl	80026ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	2b20      	cmp	r3, #32
 8002396:	d10f      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d108      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2221      	movs	r2, #33	; 0x21
 80023ac:	4252      	negs	r2, r2
 80023ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fd2a 	bl	8002e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	223c      	movs	r2, #60	; 0x3c
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0a4      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x164>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	223c      	movs	r2, #60	; 0x3c
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	223d      	movs	r2, #61	; 0x3d
 80023e6:	2102      	movs	r1, #2
 80023e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d029      	beq.n	8002444 <HAL_TIM_PWM_ConfigChannel+0x84>
 80023f0:	d802      	bhi.n	80023f8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80023f6:	e08c      	b.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d046      	beq.n	800248a <HAL_TIM_PWM_ConfigChannel+0xca>
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d065      	beq.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002400:	e087      	b.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f9ec 	bl	80027e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2108      	movs	r1, #8
 800241c:	430a      	orrs	r2, r1
 800241e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2104      	movs	r1, #4
 800242c:	438a      	bics	r2, r1
 800242e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6999      	ldr	r1, [r3, #24]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	619a      	str	r2, [r3, #24]
      break;
 8002442:	e066      	b.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	0011      	movs	r1, r2
 800244c:	0018      	movs	r0, r3
 800244e:	f000 fa53 	bl	80028f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	0109      	lsls	r1, r1, #4
 8002460:	430a      	orrs	r2, r1
 8002462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	492f      	ldr	r1, [pc, #188]	; (800252c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002470:	400a      	ands	r2, r1
 8002472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6999      	ldr	r1, [r3, #24]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	021a      	lsls	r2, r3, #8
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	619a      	str	r2, [r3, #24]
      break;
 8002488:	e043      	b.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	0011      	movs	r1, r2
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fab4 	bl	8002a00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2108      	movs	r1, #8
 80024a4:	430a      	orrs	r2, r1
 80024a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2104      	movs	r1, #4
 80024b4:	438a      	bics	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69d9      	ldr	r1, [r3, #28]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	61da      	str	r2, [r3, #28]
      break;
 80024ca:	e022      	b.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fb19 	bl	8002b0c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	0109      	lsls	r1, r1, #4
 80024e8:	430a      	orrs	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	490d      	ldr	r1, [pc, #52]	; (800252c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69d9      	ldr	r1, [r3, #28]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	021a      	lsls	r2, r3, #8
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
      break;
 8002510:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	223d      	movs	r2, #61	; 0x3d
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	223c      	movs	r2, #60	; 0x3c
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	fffffbff 	.word	0xfffffbff

08002530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223c      	movs	r2, #60	; 0x3c
 800253e:	5c9b      	ldrb	r3, [r3, r2]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_TIM_ConfigClockSource+0x18>
 8002544:	2302      	movs	r3, #2
 8002546:	e0ab      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x170>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	223c      	movs	r2, #60	; 0x3c
 800254c:	2101      	movs	r1, #1
 800254e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223d      	movs	r2, #61	; 0x3d
 8002554:	2102      	movs	r1, #2
 8002556:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2277      	movs	r2, #119	; 0x77
 8002564:	4393      	bics	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_TIM_ConfigClockSource+0x178>)
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d100      	bne.n	8002582 <HAL_TIM_ConfigClockSource+0x52>
 8002580:	e06b      	b.n	800265a <HAL_TIM_ConfigClockSource+0x12a>
 8002582:	d80e      	bhi.n	80025a2 <HAL_TIM_ConfigClockSource+0x72>
 8002584:	2b10      	cmp	r3, #16
 8002586:	d100      	bne.n	800258a <HAL_TIM_ConfigClockSource+0x5a>
 8002588:	e077      	b.n	800267a <HAL_TIM_ConfigClockSource+0x14a>
 800258a:	d803      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x64>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d100      	bne.n	8002592 <HAL_TIM_ConfigClockSource+0x62>
 8002590:	e073      	b.n	800267a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002592:	e07c      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002594:	2b20      	cmp	r3, #32
 8002596:	d100      	bne.n	800259a <HAL_TIM_ConfigClockSource+0x6a>
 8002598:	e06f      	b.n	800267a <HAL_TIM_ConfigClockSource+0x14a>
 800259a:	2b30      	cmp	r3, #48	; 0x30
 800259c:	d100      	bne.n	80025a0 <HAL_TIM_ConfigClockSource+0x70>
 800259e:	e06c      	b.n	800267a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80025a0:	e075      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80025a2:	2b70      	cmp	r3, #112	; 0x70
 80025a4:	d00e      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x94>
 80025a6:	d804      	bhi.n	80025b2 <HAL_TIM_ConfigClockSource+0x82>
 80025a8:	2b50      	cmp	r3, #80	; 0x50
 80025aa:	d036      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xea>
 80025ac:	2b60      	cmp	r3, #96	; 0x60
 80025ae:	d044      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80025b0:	e06d      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0152      	lsls	r2, r2, #5
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d068      	beq.n	800268c <HAL_TIM_ConfigClockSource+0x15c>
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0192      	lsls	r2, r2, #6
 80025be:	4293      	cmp	r3, r2
 80025c0:	d017      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80025c2:	e064      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f000 fb7e 	bl	8002cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2277      	movs	r2, #119	; 0x77
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
      break;
 80025f0:	e04d      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6899      	ldr	r1, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f000 fb67 	bl	8002cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	01c9      	lsls	r1, r1, #7
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
      break;
 8002618:	e039      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	001a      	movs	r2, r3
 8002628:	f000 fada 	bl	8002be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2150      	movs	r1, #80	; 0x50
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fb34 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 8002638:	e029      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	001a      	movs	r2, r3
 8002648:	f000 faf8 	bl	8002c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2160      	movs	r1, #96	; 0x60
 8002652:	0018      	movs	r0, r3
 8002654:	f000 fb24 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 8002658:	e019      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	001a      	movs	r2, r3
 8002668:	f000 faba 	bl	8002be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fb14 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 8002678:	e009      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0019      	movs	r1, r3
 8002684:	0010      	movs	r0, r2
 8002686:	f000 fb0b 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 800268a:	e000      	b.n	800268e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800268c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	223d      	movs	r2, #61	; 0x3d
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223c      	movs	r2, #60	; 0x3c
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b004      	add	sp, #16
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	ffff00ff 	.word	0xffff00ff

080026ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}

080026fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <TIM_Base_SetConfig+0xd0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x20>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <TIM_Base_SetConfig+0xd4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2270      	movs	r2, #112	; 0x70
 8002720:	4393      	bics	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <TIM_Base_SetConfig+0xd0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <TIM_Base_SetConfig+0x62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <TIM_Base_SetConfig+0xd4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00f      	beq.n	800275e <TIM_Base_SetConfig+0x62>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <TIM_Base_SetConfig+0xd8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00b      	beq.n	800275e <TIM_Base_SetConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a23      	ldr	r2, [pc, #140]	; (80027d8 <TIM_Base_SetConfig+0xdc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <TIM_Base_SetConfig+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <TIM_Base_SetConfig+0xe0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <TIM_Base_SetConfig+0x62>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <TIM_Base_SetConfig+0xe4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <TIM_Base_SetConfig+0xe8>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	4393      	bics	r3, r2
 8002776:	001a      	movs	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <TIM_Base_SetConfig+0xd0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00b      	beq.n	80027b6 <TIM_Base_SetConfig+0xba>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <TIM_Base_SetConfig+0xdc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <TIM_Base_SetConfig+0xba>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <TIM_Base_SetConfig+0xe0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0xba>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <TIM_Base_SetConfig+0xe4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d103      	bne.n	80027be <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	615a      	str	r2, [r3, #20]
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40002000 	.word	0x40002000
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40014400 	.word	0x40014400
 80027e0:	40014800 	.word	0x40014800
 80027e4:	fffffcff 	.word	0xfffffcff

080027e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4393      	bics	r3, r2
 80027fa:	001a      	movs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2270      	movs	r2, #112	; 0x70
 8002816:	4393      	bics	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2203      	movs	r2, #3
 800281e:	4393      	bics	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2202      	movs	r2, #2
 8002830:	4393      	bics	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <TIM_OC1_SetConfig+0xf8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_OC1_SetConfig+0x76>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <TIM_OC1_SetConfig+0xfc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_OC1_SetConfig+0x76>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <TIM_OC1_SetConfig+0x100>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_OC1_SetConfig+0x76>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <TIM_OC1_SetConfig+0x104>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10c      	bne.n	8002878 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2208      	movs	r2, #8
 8002862:	4393      	bics	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2204      	movs	r2, #4
 8002874:	4393      	bics	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <TIM_OC1_SetConfig+0xf8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00b      	beq.n	8002898 <TIM_OC1_SetConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <TIM_OC1_SetConfig+0xfc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_OC1_SetConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <TIM_OC1_SetConfig+0x100>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_OC1_SetConfig+0xb0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <TIM_OC1_SetConfig+0x104>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <TIM_OC1_SetConfig+0x108>)
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <TIM_OC1_SetConfig+0x10c>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800
 80028f0:	fffffeff 	.word	0xfffffeff
 80028f4:	fffffdff 	.word	0xfffffdff

080028f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	2210      	movs	r2, #16
 8002908:	4393      	bics	r3, r2
 800290a:	001a      	movs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a2e      	ldr	r2, [pc, #184]	; (80029e0 <TIM_OC2_SetConfig+0xe8>)
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <TIM_OC2_SetConfig+0xec>)
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2220      	movs	r2, #32
 8002942:	4393      	bics	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <TIM_OC2_SetConfig+0xf0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10d      	bne.n	8002976 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	4393      	bics	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2240      	movs	r2, #64	; 0x40
 8002972:	4393      	bics	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <TIM_OC2_SetConfig+0xf0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00b      	beq.n	8002996 <TIM_OC2_SetConfig+0x9e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <TIM_OC2_SetConfig+0xf4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <TIM_OC2_SetConfig+0x9e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <TIM_OC2_SetConfig+0xf8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_OC2_SetConfig+0x9e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <TIM_OC2_SetConfig+0xfc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <TIM_OC2_SetConfig+0x100>)
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4a16      	ldr	r2, [pc, #88]	; (80029fc <TIM_OC2_SetConfig+0x104>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b006      	add	sp, #24
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	ffff8fff 	.word	0xffff8fff
 80029e4:	fffffcff 	.word	0xfffffcff
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40014000 	.word	0x40014000
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40014800 	.word	0x40014800
 80029f8:	fffffbff 	.word	0xfffffbff
 80029fc:	fffff7ff 	.word	0xfffff7ff

08002a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a35      	ldr	r2, [pc, #212]	; (8002ae4 <TIM_OC3_SetConfig+0xe4>)
 8002a10:	401a      	ands	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2270      	movs	r2, #112	; 0x70
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2203      	movs	r2, #3
 8002a34:	4393      	bics	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <TIM_OC3_SetConfig+0xe8>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <TIM_OC3_SetConfig+0xec>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <TIM_OC3_SetConfig+0xf0>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <TIM_OC3_SetConfig+0xf4>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <TIM_OC3_SetConfig+0xec>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00b      	beq.n	8002a9a <TIM_OC3_SetConfig+0x9a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <TIM_OC3_SetConfig+0xf8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <TIM_OC3_SetConfig+0x9a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <TIM_OC3_SetConfig+0xfc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d003      	beq.n	8002a9a <TIM_OC3_SetConfig+0x9a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <TIM_OC3_SetConfig+0x100>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d113      	bne.n	8002ac2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <TIM_OC3_SetConfig+0x104>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <TIM_OC3_SetConfig+0x108>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b006      	add	sp, #24
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	fffffeff 	.word	0xfffffeff
 8002ae8:	fffffdff 	.word	0xfffffdff
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	fffff7ff 	.word	0xfffff7ff
 8002af4:	fffffbff 	.word	0xfffffbff
 8002af8:	40014000 	.word	0x40014000
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40014800 	.word	0x40014800
 8002b04:	ffffefff 	.word	0xffffefff
 8002b08:	ffffdfff 	.word	0xffffdfff

08002b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <TIM_OC4_SetConfig+0xb0>)
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <TIM_OC4_SetConfig+0xb4>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <TIM_OC4_SetConfig+0xb8>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <TIM_OC4_SetConfig+0xbc>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	031b      	lsls	r3, r3, #12
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <TIM_OC4_SetConfig+0xc0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <TIM_OC4_SetConfig+0x78>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <TIM_OC4_SetConfig+0xc4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_OC4_SetConfig+0x78>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <TIM_OC4_SetConfig+0xc8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_OC4_SetConfig+0x78>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <TIM_OC4_SetConfig+0xcc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d109      	bne.n	8002b98 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <TIM_OC4_SetConfig+0xd0>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	ffffefff 	.word	0xffffefff
 8002bc0:	ffff8fff 	.word	0xffff8fff
 8002bc4:	fffffcff 	.word	0xfffffcff
 8002bc8:	ffffdfff 	.word	0xffffdfff
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	40014800 	.word	0x40014800
 8002bdc:	ffffbfff 	.word	0xffffbfff

08002be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	22f0      	movs	r2, #240	; 0xf0
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	220a      	movs	r2, #10
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	4393      	bics	r3, r2
 8002c50:	001a      	movs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <TIM_TI2_ConfigInputStage+0x60>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	031b      	lsls	r3, r3, #12
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	22a0      	movs	r2, #160	; 0xa0
 8002c78:	4393      	bics	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	ffff0fff 	.word	0xffff0fff

08002ca0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2270      	movs	r2, #112	; 0x70
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <TIM_ETR_SetConfig+0x3c>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	021a      	lsls	r2, r3, #8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	ffff00ff 	.word	0xffff00ff

08002d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	221f      	movs	r2, #31
 8002d24:	4013      	ands	r3, r2
 8002d26:	2201      	movs	r2, #1
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	0013      	movs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	43d2      	mvns	r2, r2
 8002d36:	401a      	ands	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	211f      	movs	r1, #31
 8002d44:	400b      	ands	r3, r1
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4099      	lsls	r1, r3
 8002d4a:	000b      	movs	r3, r1
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b006      	add	sp, #24
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	223c      	movs	r2, #60	; 0x3c
 8002d6a:	5c9b      	ldrb	r3, [r3, r2]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e041      	b.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	223c      	movs	r2, #60	; 0x3c
 8002d78:	2101      	movs	r1, #1
 8002d7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223d      	movs	r2, #61	; 0x3d
 8002d80:	2102      	movs	r1, #2
 8002d82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2270      	movs	r2, #112	; 0x70
 8002d98:	4393      	bics	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10c      	bne.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	223d      	movs	r2, #61	; 0x3d
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223c      	movs	r2, #60	; 0x3c
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40014000 	.word	0x40014000

08002e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e044      	b.n	8002ec8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2270      	movs	r2, #112	; 0x70
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fd fc9d 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2224      	movs	r2, #36	; 0x24
 8002e5a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 f8d8 	bl	8003024 <UART_SetConfig>
 8002e74:	0003      	movs	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e024      	b.n	8002ec8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 fa69 	bl	8003360 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <HAL_UART_Init+0xa4>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2108      	movs	r1, #8
 8002eaa:	438a      	bics	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 fb01 	bl	80034c8 <UART_CheckIdleState>
 8002ec6:	0003      	movs	r3, r0
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	fffff7ff 	.word	0xfffff7ff

08002ed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	1dbb      	adds	r3, r7, #6
 8002ee2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d000      	beq.n	8002eee <HAL_UART_Transmit+0x1a>
 8002eec:	e095      	b.n	800301a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_UART_Transmit+0x28>
 8002ef4:	1dbb      	adds	r3, r7, #6
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e08d      	b.n	800301c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	015b      	lsls	r3, r3, #5
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d109      	bne.n	8002f20 <HAL_UART_Transmit+0x4c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2201      	movs	r2, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e07d      	b.n	800301c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2270      	movs	r2, #112	; 0x70
 8002f24:	5c9b      	ldrb	r3, [r3, r2]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x5a>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e076      	b.n	800301c <HAL_UART_Transmit+0x148>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2270      	movs	r2, #112	; 0x70
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2221      	movs	r2, #33	; 0x21
 8002f40:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f42:	f7fd fd57 	bl	80009f4 <HAL_GetTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1dba      	adds	r2, r7, #6
 8002f4e:	2150      	movs	r1, #80	; 0x50
 8002f50:	8812      	ldrh	r2, [r2, #0]
 8002f52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1dba      	adds	r2, r7, #6
 8002f58:	2152      	movs	r1, #82	; 0x52
 8002f5a:	8812      	ldrh	r2, [r2, #0]
 8002f5c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0xa8>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02d      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	0013      	movs	r3, r2
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	f000 fade 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e03d      	b.n	800301c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	05d2      	lsls	r2, r2, #23
 8002fb0:	0dd2      	lsrs	r2, r2, #23
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e008      	b.n	8002fd0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2252      	movs	r2, #82	; 0x52
 8002fd4:	5a9b      	ldrh	r3, [r3, r2]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b299      	uxth	r1, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2252      	movs	r2, #82	; 0x52
 8002fe0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2252      	movs	r2, #82	; 0x52
 8002fe6:	5a9b      	ldrh	r3, [r3, r2]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1cb      	bne.n	8002f86 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	f000 faaa 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e009      	b.n	800301c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2270      	movs	r2, #112	; 0x70
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b008      	add	sp, #32
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003030:	2317      	movs	r3, #23
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4ab7      	ldr	r2, [pc, #732]	; (8003334 <UART_SetConfig+0x310>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4ab2      	ldr	r2, [pc, #712]	; (8003338 <UART_SetConfig+0x314>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4aa9      	ldr	r2, [pc, #676]	; (800333c <UART_SetConfig+0x318>)
 8003096:	4013      	ands	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4aa5      	ldr	r2, [pc, #660]	; (8003340 <UART_SetConfig+0x31c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d125      	bne.n	80030fa <UART_SetConfig+0xd6>
 80030ae:	4ba5      	ldr	r3, [pc, #660]	; (8003344 <UART_SetConfig+0x320>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	2203      	movs	r2, #3
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d00f      	beq.n	80030da <UART_SetConfig+0xb6>
 80030ba:	d304      	bcc.n	80030c6 <UART_SetConfig+0xa2>
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d011      	beq.n	80030e4 <UART_SetConfig+0xc0>
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d005      	beq.n	80030d0 <UART_SetConfig+0xac>
 80030c4:	e013      	b.n	80030ee <UART_SetConfig+0xca>
 80030c6:	231f      	movs	r3, #31
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e036      	b.n	800313e <UART_SetConfig+0x11a>
 80030d0:	231f      	movs	r3, #31
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e031      	b.n	800313e <UART_SetConfig+0x11a>
 80030da:	231f      	movs	r3, #31
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2204      	movs	r2, #4
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e02c      	b.n	800313e <UART_SetConfig+0x11a>
 80030e4:	231f      	movs	r3, #31
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2208      	movs	r2, #8
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e027      	b.n	800313e <UART_SetConfig+0x11a>
 80030ee:	231f      	movs	r3, #31
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2210      	movs	r2, #16
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	e021      	b.n	800313e <UART_SetConfig+0x11a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a92      	ldr	r2, [pc, #584]	; (8003348 <UART_SetConfig+0x324>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d104      	bne.n	800310e <UART_SetConfig+0xea>
 8003104:	231f      	movs	r3, #31
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e017      	b.n	800313e <UART_SetConfig+0x11a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a8e      	ldr	r2, [pc, #568]	; (800334c <UART_SetConfig+0x328>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d104      	bne.n	8003122 <UART_SetConfig+0xfe>
 8003118:	231f      	movs	r3, #31
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e00d      	b.n	800313e <UART_SetConfig+0x11a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a8a      	ldr	r2, [pc, #552]	; (8003350 <UART_SetConfig+0x32c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d104      	bne.n	8003136 <UART_SetConfig+0x112>
 800312c:	231f      	movs	r3, #31
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e003      	b.n	800313e <UART_SetConfig+0x11a>
 8003136:	231f      	movs	r3, #31
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2210      	movs	r2, #16
 800313c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	429a      	cmp	r2, r3
 8003148:	d000      	beq.n	800314c <UART_SetConfig+0x128>
 800314a:	e07d      	b.n	8003248 <UART_SetConfig+0x224>
  {
    switch (clocksource)
 800314c:	231f      	movs	r3, #31
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d01c      	beq.n	8003190 <UART_SetConfig+0x16c>
 8003156:	dc02      	bgt.n	800315e <UART_SetConfig+0x13a>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0x144>
 800315c:	e04b      	b.n	80031f6 <UART_SetConfig+0x1d2>
 800315e:	2b04      	cmp	r3, #4
 8003160:	d025      	beq.n	80031ae <UART_SetConfig+0x18a>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d037      	beq.n	80031d6 <UART_SetConfig+0x1b2>
 8003166:	e046      	b.n	80031f6 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7fe ff30 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 800316c:	0003      	movs	r3, r0
 800316e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	005a      	lsls	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	18d2      	adds	r2, r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0019      	movs	r1, r3
 8003182:	0010      	movs	r0, r2
 8003184:	f7fc ffc0 	bl	8000108 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	b29b      	uxth	r3, r3
 800318c:	61bb      	str	r3, [r7, #24]
        break;
 800318e:	e037      	b.n	8003200 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	4a6f      	ldr	r2, [pc, #444]	; (8003354 <UART_SetConfig+0x330>)
 8003198:	189a      	adds	r2, r3, r2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f7fc ffb1 	bl	8000108 <__udivsi3>
 80031a6:	0003      	movs	r3, r0
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	61bb      	str	r3, [r7, #24]
        break;
 80031ac:	e028      	b.n	8003200 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ae:	f7fe fe9d 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 80031b2:	0003      	movs	r3, r0
 80031b4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	005a      	lsls	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	18d2      	adds	r2, r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0019      	movs	r1, r3
 80031c8:	0010      	movs	r0, r2
 80031ca:	f7fc ff9d 	bl	8000108 <__udivsi3>
 80031ce:	0003      	movs	r3, r0
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	61bb      	str	r3, [r7, #24]
        break;
 80031d4:	e014      	b.n	8003200 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	0252      	lsls	r2, r2, #9
 80031e0:	189a      	adds	r2, r3, r2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	0019      	movs	r1, r3
 80031e8:	0010      	movs	r0, r2
 80031ea:	f7fc ff8d 	bl	8000108 <__udivsi3>
 80031ee:	0003      	movs	r3, r0
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	61bb      	str	r3, [r7, #24]
        break;
 80031f4:	e004      	b.n	8003200 <UART_SetConfig+0x1dc>
      default:
        ret = HAL_ERROR;
 80031f6:	2317      	movs	r3, #23
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
        break;
 80031fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d91b      	bls.n	800323e <UART_SetConfig+0x21a>
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4a53      	ldr	r2, [pc, #332]	; (8003358 <UART_SetConfig+0x334>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d817      	bhi.n	800323e <UART_SetConfig+0x21a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	b29a      	uxth	r2, r3
 8003212:	200a      	movs	r0, #10
 8003214:	183b      	adds	r3, r7, r0
 8003216:	210f      	movs	r1, #15
 8003218:	438a      	bics	r2, r1
 800321a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	b29b      	uxth	r3, r3
 8003222:	2207      	movs	r2, #7
 8003224:	4013      	ands	r3, r2
 8003226:	b299      	uxth	r1, r3
 8003228:	183b      	adds	r3, r7, r0
 800322a:	183a      	adds	r2, r7, r0
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	183a      	adds	r2, r7, r0
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	e06c      	b.n	8003318 <UART_SetConfig+0x2f4>
    }
    else
    {
      ret = HAL_ERROR;
 800323e:	2317      	movs	r3, #23
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e067      	b.n	8003318 <UART_SetConfig+0x2f4>
    }
  }
  else
  {
    switch (clocksource)
 8003248:	231f      	movs	r3, #31
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d01b      	beq.n	800328a <UART_SetConfig+0x266>
 8003252:	dc02      	bgt.n	800325a <UART_SetConfig+0x236>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <UART_SetConfig+0x240>
 8003258:	e049      	b.n	80032ee <UART_SetConfig+0x2ca>
 800325a:	2b04      	cmp	r3, #4
 800325c:	d024      	beq.n	80032a8 <UART_SetConfig+0x284>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d035      	beq.n	80032ce <UART_SetConfig+0x2aa>
 8003262:	e044      	b.n	80032ee <UART_SetConfig+0x2ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7fe feb2 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8003268:	0003      	movs	r3, r0
 800326a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	085a      	lsrs	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	18d2      	adds	r2, r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	0019      	movs	r1, r3
 800327c:	0010      	movs	r0, r2
 800327e:	f7fc ff43 	bl	8000108 <__udivsi3>
 8003282:	0003      	movs	r3, r0
 8003284:	b29b      	uxth	r3, r3
 8003286:	61bb      	str	r3, [r7, #24]
        break;
 8003288:	e036      	b.n	80032f8 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	4a32      	ldr	r2, [pc, #200]	; (800335c <UART_SetConfig+0x338>)
 8003292:	189a      	adds	r2, r3, r2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0019      	movs	r1, r3
 800329a:	0010      	movs	r0, r2
 800329c:	f7fc ff34 	bl	8000108 <__udivsi3>
 80032a0:	0003      	movs	r3, r0
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	61bb      	str	r3, [r7, #24]
        break;
 80032a6:	e027      	b.n	80032f8 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a8:	f7fe fe20 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	085a      	lsrs	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	18d2      	adds	r2, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f7fc ff21 	bl	8000108 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	61bb      	str	r3, [r7, #24]
        break;
 80032cc:	e014      	b.n	80032f8 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0212      	lsls	r2, r2, #8
 80032d8:	189a      	adds	r2, r3, r2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0019      	movs	r1, r3
 80032e0:	0010      	movs	r0, r2
 80032e2:	f7fc ff11 	bl	8000108 <__udivsi3>
 80032e6:	0003      	movs	r3, r0
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x2d4>
      default:
        ret = HAL_ERROR;
 80032ee:	2317      	movs	r3, #23
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
        break;
 80032f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d908      	bls.n	8003310 <UART_SetConfig+0x2ec>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <UART_SetConfig+0x334>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d804      	bhi.n	8003310 <UART_SetConfig+0x2ec>
    {
      huart->Instance->BRR = usartdiv;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e003      	b.n	8003318 <UART_SetConfig+0x2f4>
    }
    else
    {
      ret = HAL_ERROR;
 8003310:	2317      	movs	r3, #23
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003324:	2317      	movs	r3, #23
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	781b      	ldrb	r3, [r3, #0]
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b008      	add	sp, #32
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	efff69f3 	.word	0xefff69f3
 8003338:	ffffcfff 	.word	0xffffcfff
 800333c:	fffff4ff 	.word	0xfffff4ff
 8003340:	40013800 	.word	0x40013800
 8003344:	40021000 	.word	0x40021000
 8003348:	40004400 	.word	0x40004400
 800334c:	40004800 	.word	0x40004800
 8003350:	40004c00 	.word	0x40004c00
 8003354:	00f42400 	.word	0x00f42400
 8003358:	0000ffff 	.word	0x0000ffff
 800335c:	007a1200 	.word	0x007a1200

08003360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d00b      	beq.n	800338a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a4a      	ldr	r2, [pc, #296]	; (80034a4 <UART_AdvFeatureConfig+0x144>)
 800337a:	4013      	ands	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d00b      	beq.n	80033ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4a43      	ldr	r2, [pc, #268]	; (80034a8 <UART_AdvFeatureConfig+0x148>)
 800339c:	4013      	ands	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2204      	movs	r2, #4
 80033b2:	4013      	ands	r3, r2
 80033b4:	d00b      	beq.n	80033ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a3b      	ldr	r2, [pc, #236]	; (80034ac <UART_AdvFeatureConfig+0x14c>)
 80033be:	4013      	ands	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2208      	movs	r2, #8
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <UART_AdvFeatureConfig+0x150>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2210      	movs	r2, #16
 80033f6:	4013      	ands	r3, r2
 80033f8:	d00b      	beq.n	8003412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <UART_AdvFeatureConfig+0x154>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2220      	movs	r2, #32
 8003418:	4013      	ands	r3, r2
 800341a:	d00b      	beq.n	8003434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <UART_AdvFeatureConfig+0x158>)
 8003424:	4013      	ands	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2240      	movs	r2, #64	; 0x40
 800343a:	4013      	ands	r3, r2
 800343c:	d01d      	beq.n	800347a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <UART_AdvFeatureConfig+0x15c>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	035b      	lsls	r3, r3, #13
 800345e:	429a      	cmp	r2, r3
 8003460:	d10b      	bne.n	800347a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <UART_AdvFeatureConfig+0x160>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	4013      	ands	r3, r2
 8003482:	d00b      	beq.n	800349c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <UART_AdvFeatureConfig+0x164>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	fffdffff 	.word	0xfffdffff
 80034a8:	fffeffff 	.word	0xfffeffff
 80034ac:	fffbffff 	.word	0xfffbffff
 80034b0:	ffff7fff 	.word	0xffff7fff
 80034b4:	ffffefff 	.word	0xffffefff
 80034b8:	ffffdfff 	.word	0xffffdfff
 80034bc:	ffefffff 	.word	0xffefffff
 80034c0:	ff9fffff 	.word	0xff9fffff
 80034c4:	fff7ffff 	.word	0xfff7ffff

080034c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034d6:	f7fd fa8d 	bl	80009f4 <HAL_GetTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2208      	movs	r2, #8
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d10d      	bne.n	8003508 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	0399      	lsls	r1, r3, #14
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4b16      	ldr	r3, [pc, #88]	; (8003550 <UART_CheckIdleState+0x88>)
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	0013      	movs	r3, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	f000 f82a 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e01f      	b.n	8003548 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	2b04      	cmp	r3, #4
 8003514:	d10d      	bne.n	8003532 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	03d9      	lsls	r1, r3, #15
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <UART_CheckIdleState+0x88>)
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0013      	movs	r3, r2
 8003524:	2200      	movs	r2, #0
 8003526:	f000 f815 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d001      	beq.n	8003532 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e00a      	b.n	8003548 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2270      	movs	r2, #112	; 0x70
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}
 8003550:	01ffffff 	.word	0x01ffffff

08003554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	e05d      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	d05a      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7fd fa42 	bl	80009f4 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <UART_WaitOnFlagUntilTimeout+0x2e>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11b      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	492f      	ldr	r1, [pc, #188]	; (800364c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800358e:	400a      	ands	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	438a      	bics	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2270      	movs	r2, #112	; 0x70
 80035b2:	2100      	movs	r1, #0
 80035b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e043      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2204      	movs	r2, #4
 80035c2:	4013      	ands	r3, r2
 80035c4:	d02d      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	401a      	ands	r2, r3
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d123      	bne.n	8003622 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4917      	ldr	r1, [pc, #92]	; (800364c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	438a      	bics	r2, r1
 8003602:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2270      	movs	r2, #112	; 0x70
 800361a:	2100      	movs	r1, #0
 800361c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00f      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	425a      	negs	r2, r3
 8003632:	4153      	adcs	r3, r2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	001a      	movs	r2, r3
 8003638:	1dfb      	adds	r3, r7, #7
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d092      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b004      	add	sp, #16
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	fffffe5f 	.word	0xfffffe5f

08003650 <__errno>:
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <__errno+0x8>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	4770      	bx	lr
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	2000000c 	.word	0x2000000c

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	2600      	movs	r6, #0
 8003660:	4d0c      	ldr	r5, [pc, #48]	; (8003694 <__libc_init_array+0x38>)
 8003662:	4c0d      	ldr	r4, [pc, #52]	; (8003698 <__libc_init_array+0x3c>)
 8003664:	1b64      	subs	r4, r4, r5
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	42a6      	cmp	r6, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	2600      	movs	r6, #0
 800366e:	f000 fc29 	bl	8003ec4 <_init>
 8003672:	4d0a      	ldr	r5, [pc, #40]	; (800369c <__libc_init_array+0x40>)
 8003674:	4c0a      	ldr	r4, [pc, #40]	; (80036a0 <__libc_init_array+0x44>)
 8003676:	1b64      	subs	r4, r4, r5
 8003678:	10a4      	asrs	r4, r4, #2
 800367a:	42a6      	cmp	r6, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	00b3      	lsls	r3, r6, #2
 8003682:	58eb      	ldr	r3, [r5, r3]
 8003684:	4798      	blx	r3
 8003686:	3601      	adds	r6, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	00b3      	lsls	r3, r6, #2
 800368c:	58eb      	ldr	r3, [r5, r3]
 800368e:	4798      	blx	r3
 8003690:	3601      	adds	r6, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	08003f5c 	.word	0x08003f5c
 8003698:	08003f5c 	.word	0x08003f5c
 800369c:	08003f5c 	.word	0x08003f5c
 80036a0:	08003f60 	.word	0x08003f60

080036a4 <memset>:
 80036a4:	0003      	movs	r3, r0
 80036a6:	1812      	adds	r2, r2, r0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	7019      	strb	r1, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <siprintf>:
 80036b4:	b40e      	push	{r1, r2, r3}
 80036b6:	b500      	push	{lr}
 80036b8:	490b      	ldr	r1, [pc, #44]	; (80036e8 <siprintf+0x34>)
 80036ba:	b09c      	sub	sp, #112	; 0x70
 80036bc:	ab1d      	add	r3, sp, #116	; 0x74
 80036be:	9002      	str	r0, [sp, #8]
 80036c0:	9006      	str	r0, [sp, #24]
 80036c2:	9107      	str	r1, [sp, #28]
 80036c4:	9104      	str	r1, [sp, #16]
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <siprintf+0x38>)
 80036c8:	4909      	ldr	r1, [pc, #36]	; (80036f0 <siprintf+0x3c>)
 80036ca:	cb04      	ldmia	r3!, {r2}
 80036cc:	9105      	str	r1, [sp, #20]
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	a902      	add	r1, sp, #8
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f000 f870 	bl	80037b8 <_svfiprintf_r>
 80036d8:	2300      	movs	r3, #0
 80036da:	9a02      	ldr	r2, [sp, #8]
 80036dc:	7013      	strb	r3, [r2, #0]
 80036de:	b01c      	add	sp, #112	; 0x70
 80036e0:	bc08      	pop	{r3}
 80036e2:	b003      	add	sp, #12
 80036e4:	4718      	bx	r3
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	7fffffff 	.word	0x7fffffff
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	ffff0208 	.word	0xffff0208

080036f4 <__ssputs_r>:
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	688e      	ldr	r6, [r1, #8]
 80036f8:	b085      	sub	sp, #20
 80036fa:	0007      	movs	r7, r0
 80036fc:	000c      	movs	r4, r1
 80036fe:	9203      	str	r2, [sp, #12]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	429e      	cmp	r6, r3
 8003704:	d83c      	bhi.n	8003780 <__ssputs_r+0x8c>
 8003706:	2390      	movs	r3, #144	; 0x90
 8003708:	898a      	ldrh	r2, [r1, #12]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	421a      	tst	r2, r3
 800370e:	d034      	beq.n	800377a <__ssputs_r+0x86>
 8003710:	2503      	movs	r5, #3
 8003712:	6909      	ldr	r1, [r1, #16]
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	1a5b      	subs	r3, r3, r1
 8003718:	9302      	str	r3, [sp, #8]
 800371a:	6963      	ldr	r3, [r4, #20]
 800371c:	9802      	ldr	r0, [sp, #8]
 800371e:	435d      	muls	r5, r3
 8003720:	0feb      	lsrs	r3, r5, #31
 8003722:	195d      	adds	r5, r3, r5
 8003724:	9b01      	ldr	r3, [sp, #4]
 8003726:	106d      	asrs	r5, r5, #1
 8003728:	3301      	adds	r3, #1
 800372a:	181b      	adds	r3, r3, r0
 800372c:	42ab      	cmp	r3, r5
 800372e:	d900      	bls.n	8003732 <__ssputs_r+0x3e>
 8003730:	001d      	movs	r5, r3
 8003732:	0553      	lsls	r3, r2, #21
 8003734:	d532      	bpl.n	800379c <__ssputs_r+0xa8>
 8003736:	0029      	movs	r1, r5
 8003738:	0038      	movs	r0, r7
 800373a:	f000 fb23 	bl	8003d84 <_malloc_r>
 800373e:	1e06      	subs	r6, r0, #0
 8003740:	d109      	bne.n	8003756 <__ssputs_r+0x62>
 8003742:	230c      	movs	r3, #12
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	2340      	movs	r3, #64	; 0x40
 8003748:	2001      	movs	r0, #1
 800374a:	89a2      	ldrh	r2, [r4, #12]
 800374c:	4240      	negs	r0, r0
 800374e:	4313      	orrs	r3, r2
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	b005      	add	sp, #20
 8003754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003756:	9a02      	ldr	r2, [sp, #8]
 8003758:	6921      	ldr	r1, [r4, #16]
 800375a:	f000 faac 	bl	8003cb6 <memcpy>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <__ssputs_r+0xc0>)
 8003762:	401a      	ands	r2, r3
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	4313      	orrs	r3, r2
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	9b02      	ldr	r3, [sp, #8]
 800376c:	6126      	str	r6, [r4, #16]
 800376e:	18f6      	adds	r6, r6, r3
 8003770:	6026      	str	r6, [r4, #0]
 8003772:	6165      	str	r5, [r4, #20]
 8003774:	9e01      	ldr	r6, [sp, #4]
 8003776:	1aed      	subs	r5, r5, r3
 8003778:	60a5      	str	r5, [r4, #8]
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	429e      	cmp	r6, r3
 800377e:	d900      	bls.n	8003782 <__ssputs_r+0x8e>
 8003780:	9e01      	ldr	r6, [sp, #4]
 8003782:	0032      	movs	r2, r6
 8003784:	9903      	ldr	r1, [sp, #12]
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	f000 fa9e 	bl	8003cc8 <memmove>
 800378c:	68a3      	ldr	r3, [r4, #8]
 800378e:	2000      	movs	r0, #0
 8003790:	1b9b      	subs	r3, r3, r6
 8003792:	60a3      	str	r3, [r4, #8]
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	199e      	adds	r6, r3, r6
 8003798:	6026      	str	r6, [r4, #0]
 800379a:	e7da      	b.n	8003752 <__ssputs_r+0x5e>
 800379c:	002a      	movs	r2, r5
 800379e:	0038      	movs	r0, r7
 80037a0:	f000 fb4e 	bl	8003e40 <_realloc_r>
 80037a4:	1e06      	subs	r6, r0, #0
 80037a6:	d1e0      	bne.n	800376a <__ssputs_r+0x76>
 80037a8:	6921      	ldr	r1, [r4, #16]
 80037aa:	0038      	movs	r0, r7
 80037ac:	f000 faa0 	bl	8003cf0 <_free_r>
 80037b0:	e7c7      	b.n	8003742 <__ssputs_r+0x4e>
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	fffffb7f 	.word	0xfffffb7f

080037b8 <_svfiprintf_r>:
 80037b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ba:	b0a1      	sub	sp, #132	; 0x84
 80037bc:	9003      	str	r0, [sp, #12]
 80037be:	001d      	movs	r5, r3
 80037c0:	898b      	ldrh	r3, [r1, #12]
 80037c2:	000f      	movs	r7, r1
 80037c4:	0016      	movs	r6, r2
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	d511      	bpl.n	80037ee <_svfiprintf_r+0x36>
 80037ca:	690b      	ldr	r3, [r1, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10e      	bne.n	80037ee <_svfiprintf_r+0x36>
 80037d0:	2140      	movs	r1, #64	; 0x40
 80037d2:	f000 fad7 	bl	8003d84 <_malloc_r>
 80037d6:	6038      	str	r0, [r7, #0]
 80037d8:	6138      	str	r0, [r7, #16]
 80037da:	2800      	cmp	r0, #0
 80037dc:	d105      	bne.n	80037ea <_svfiprintf_r+0x32>
 80037de:	230c      	movs	r3, #12
 80037e0:	9a03      	ldr	r2, [sp, #12]
 80037e2:	3801      	subs	r0, #1
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	b021      	add	sp, #132	; 0x84
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	2300      	movs	r3, #0
 80037f0:	ac08      	add	r4, sp, #32
 80037f2:	6163      	str	r3, [r4, #20]
 80037f4:	3320      	adds	r3, #32
 80037f6:	7663      	strb	r3, [r4, #25]
 80037f8:	3310      	adds	r3, #16
 80037fa:	76a3      	strb	r3, [r4, #26]
 80037fc:	9507      	str	r5, [sp, #28]
 80037fe:	0035      	movs	r5, r6
 8003800:	782b      	ldrb	r3, [r5, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <_svfiprintf_r+0x52>
 8003806:	2b25      	cmp	r3, #37	; 0x25
 8003808:	d146      	bne.n	8003898 <_svfiprintf_r+0xe0>
 800380a:	1bab      	subs	r3, r5, r6
 800380c:	9305      	str	r3, [sp, #20]
 800380e:	d00c      	beq.n	800382a <_svfiprintf_r+0x72>
 8003810:	0032      	movs	r2, r6
 8003812:	0039      	movs	r1, r7
 8003814:	9803      	ldr	r0, [sp, #12]
 8003816:	f7ff ff6d 	bl	80036f4 <__ssputs_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d100      	bne.n	8003820 <_svfiprintf_r+0x68>
 800381e:	e0ae      	b.n	800397e <_svfiprintf_r+0x1c6>
 8003820:	6962      	ldr	r2, [r4, #20]
 8003822:	9b05      	ldr	r3, [sp, #20]
 8003824:	4694      	mov	ip, r2
 8003826:	4463      	add	r3, ip
 8003828:	6163      	str	r3, [r4, #20]
 800382a:	782b      	ldrb	r3, [r5, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d100      	bne.n	8003832 <_svfiprintf_r+0x7a>
 8003830:	e0a5      	b.n	800397e <_svfiprintf_r+0x1c6>
 8003832:	2201      	movs	r2, #1
 8003834:	2300      	movs	r3, #0
 8003836:	4252      	negs	r2, r2
 8003838:	6062      	str	r2, [r4, #4]
 800383a:	a904      	add	r1, sp, #16
 800383c:	3254      	adds	r2, #84	; 0x54
 800383e:	1852      	adds	r2, r2, r1
 8003840:	1c6e      	adds	r6, r5, #1
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	60e3      	str	r3, [r4, #12]
 8003846:	60a3      	str	r3, [r4, #8]
 8003848:	7013      	strb	r3, [r2, #0]
 800384a:	65a3      	str	r3, [r4, #88]	; 0x58
 800384c:	7831      	ldrb	r1, [r6, #0]
 800384e:	2205      	movs	r2, #5
 8003850:	4853      	ldr	r0, [pc, #332]	; (80039a0 <_svfiprintf_r+0x1e8>)
 8003852:	f000 fa25 	bl	8003ca0 <memchr>
 8003856:	1c75      	adds	r5, r6, #1
 8003858:	2800      	cmp	r0, #0
 800385a:	d11f      	bne.n	800389c <_svfiprintf_r+0xe4>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	06d3      	lsls	r3, r2, #27
 8003860:	d504      	bpl.n	800386c <_svfiprintf_r+0xb4>
 8003862:	2353      	movs	r3, #83	; 0x53
 8003864:	a904      	add	r1, sp, #16
 8003866:	185b      	adds	r3, r3, r1
 8003868:	2120      	movs	r1, #32
 800386a:	7019      	strb	r1, [r3, #0]
 800386c:	0713      	lsls	r3, r2, #28
 800386e:	d504      	bpl.n	800387a <_svfiprintf_r+0xc2>
 8003870:	2353      	movs	r3, #83	; 0x53
 8003872:	a904      	add	r1, sp, #16
 8003874:	185b      	adds	r3, r3, r1
 8003876:	212b      	movs	r1, #43	; 0x2b
 8003878:	7019      	strb	r1, [r3, #0]
 800387a:	7833      	ldrb	r3, [r6, #0]
 800387c:	2b2a      	cmp	r3, #42	; 0x2a
 800387e:	d016      	beq.n	80038ae <_svfiprintf_r+0xf6>
 8003880:	0035      	movs	r5, r6
 8003882:	2100      	movs	r1, #0
 8003884:	200a      	movs	r0, #10
 8003886:	68e3      	ldr	r3, [r4, #12]
 8003888:	782a      	ldrb	r2, [r5, #0]
 800388a:	1c6e      	adds	r6, r5, #1
 800388c:	3a30      	subs	r2, #48	; 0x30
 800388e:	2a09      	cmp	r2, #9
 8003890:	d94e      	bls.n	8003930 <_svfiprintf_r+0x178>
 8003892:	2900      	cmp	r1, #0
 8003894:	d018      	beq.n	80038c8 <_svfiprintf_r+0x110>
 8003896:	e010      	b.n	80038ba <_svfiprintf_r+0x102>
 8003898:	3501      	adds	r5, #1
 800389a:	e7b1      	b.n	8003800 <_svfiprintf_r+0x48>
 800389c:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <_svfiprintf_r+0x1e8>)
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	1ac0      	subs	r0, r0, r3
 80038a2:	2301      	movs	r3, #1
 80038a4:	4083      	lsls	r3, r0
 80038a6:	4313      	orrs	r3, r2
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	002e      	movs	r6, r5
 80038ac:	e7ce      	b.n	800384c <_svfiprintf_r+0x94>
 80038ae:	9b07      	ldr	r3, [sp, #28]
 80038b0:	1d19      	adds	r1, r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	9107      	str	r1, [sp, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db01      	blt.n	80038be <_svfiprintf_r+0x106>
 80038ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80038bc:	e004      	b.n	80038c8 <_svfiprintf_r+0x110>
 80038be:	425b      	negs	r3, r3
 80038c0:	60e3      	str	r3, [r4, #12]
 80038c2:	2302      	movs	r3, #2
 80038c4:	4313      	orrs	r3, r2
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	782b      	ldrb	r3, [r5, #0]
 80038ca:	2b2e      	cmp	r3, #46	; 0x2e
 80038cc:	d10a      	bne.n	80038e4 <_svfiprintf_r+0x12c>
 80038ce:	786b      	ldrb	r3, [r5, #1]
 80038d0:	2b2a      	cmp	r3, #42	; 0x2a
 80038d2:	d135      	bne.n	8003940 <_svfiprintf_r+0x188>
 80038d4:	9b07      	ldr	r3, [sp, #28]
 80038d6:	3502      	adds	r5, #2
 80038d8:	1d1a      	adds	r2, r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	9207      	str	r2, [sp, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db2b      	blt.n	800393a <_svfiprintf_r+0x182>
 80038e2:	9309      	str	r3, [sp, #36]	; 0x24
 80038e4:	4e2f      	ldr	r6, [pc, #188]	; (80039a4 <_svfiprintf_r+0x1ec>)
 80038e6:	7829      	ldrb	r1, [r5, #0]
 80038e8:	2203      	movs	r2, #3
 80038ea:	0030      	movs	r0, r6
 80038ec:	f000 f9d8 	bl	8003ca0 <memchr>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d006      	beq.n	8003902 <_svfiprintf_r+0x14a>
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	1b80      	subs	r0, r0, r6
 80038f8:	4083      	lsls	r3, r0
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	3501      	adds	r5, #1
 80038fe:	4313      	orrs	r3, r2
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	7829      	ldrb	r1, [r5, #0]
 8003904:	2206      	movs	r2, #6
 8003906:	4828      	ldr	r0, [pc, #160]	; (80039a8 <_svfiprintf_r+0x1f0>)
 8003908:	1c6e      	adds	r6, r5, #1
 800390a:	7621      	strb	r1, [r4, #24]
 800390c:	f000 f9c8 	bl	8003ca0 <memchr>
 8003910:	2800      	cmp	r0, #0
 8003912:	d03c      	beq.n	800398e <_svfiprintf_r+0x1d6>
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <_svfiprintf_r+0x1f4>)
 8003916:	2b00      	cmp	r3, #0
 8003918:	d125      	bne.n	8003966 <_svfiprintf_r+0x1ae>
 800391a:	2207      	movs	r2, #7
 800391c:	9b07      	ldr	r3, [sp, #28]
 800391e:	3307      	adds	r3, #7
 8003920:	4393      	bics	r3, r2
 8003922:	3308      	adds	r3, #8
 8003924:	9307      	str	r3, [sp, #28]
 8003926:	6963      	ldr	r3, [r4, #20]
 8003928:	9a04      	ldr	r2, [sp, #16]
 800392a:	189b      	adds	r3, r3, r2
 800392c:	6163      	str	r3, [r4, #20]
 800392e:	e766      	b.n	80037fe <_svfiprintf_r+0x46>
 8003930:	4343      	muls	r3, r0
 8003932:	2101      	movs	r1, #1
 8003934:	189b      	adds	r3, r3, r2
 8003936:	0035      	movs	r5, r6
 8003938:	e7a6      	b.n	8003888 <_svfiprintf_r+0xd0>
 800393a:	2301      	movs	r3, #1
 800393c:	425b      	negs	r3, r3
 800393e:	e7d0      	b.n	80038e2 <_svfiprintf_r+0x12a>
 8003940:	2300      	movs	r3, #0
 8003942:	200a      	movs	r0, #10
 8003944:	001a      	movs	r2, r3
 8003946:	3501      	adds	r5, #1
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	7829      	ldrb	r1, [r5, #0]
 800394c:	1c6e      	adds	r6, r5, #1
 800394e:	3930      	subs	r1, #48	; 0x30
 8003950:	2909      	cmp	r1, #9
 8003952:	d903      	bls.n	800395c <_svfiprintf_r+0x1a4>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0c5      	beq.n	80038e4 <_svfiprintf_r+0x12c>
 8003958:	9209      	str	r2, [sp, #36]	; 0x24
 800395a:	e7c3      	b.n	80038e4 <_svfiprintf_r+0x12c>
 800395c:	4342      	muls	r2, r0
 800395e:	2301      	movs	r3, #1
 8003960:	1852      	adds	r2, r2, r1
 8003962:	0035      	movs	r5, r6
 8003964:	e7f1      	b.n	800394a <_svfiprintf_r+0x192>
 8003966:	ab07      	add	r3, sp, #28
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	003a      	movs	r2, r7
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <_svfiprintf_r+0x1f8>)
 800396e:	0021      	movs	r1, r4
 8003970:	9803      	ldr	r0, [sp, #12]
 8003972:	e000      	b.n	8003976 <_svfiprintf_r+0x1be>
 8003974:	bf00      	nop
 8003976:	9004      	str	r0, [sp, #16]
 8003978:	9b04      	ldr	r3, [sp, #16]
 800397a:	3301      	adds	r3, #1
 800397c:	d1d3      	bne.n	8003926 <_svfiprintf_r+0x16e>
 800397e:	89bb      	ldrh	r3, [r7, #12]
 8003980:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003982:	065b      	lsls	r3, r3, #25
 8003984:	d400      	bmi.n	8003988 <_svfiprintf_r+0x1d0>
 8003986:	e72e      	b.n	80037e6 <_svfiprintf_r+0x2e>
 8003988:	2001      	movs	r0, #1
 800398a:	4240      	negs	r0, r0
 800398c:	e72b      	b.n	80037e6 <_svfiprintf_r+0x2e>
 800398e:	ab07      	add	r3, sp, #28
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	003a      	movs	r2, r7
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <_svfiprintf_r+0x1f8>)
 8003996:	0021      	movs	r1, r4
 8003998:	9803      	ldr	r0, [sp, #12]
 800399a:	f000 f879 	bl	8003a90 <_printf_i>
 800399e:	e7ea      	b.n	8003976 <_svfiprintf_r+0x1be>
 80039a0:	08003f28 	.word	0x08003f28
 80039a4:	08003f2e 	.word	0x08003f2e
 80039a8:	08003f32 	.word	0x08003f32
 80039ac:	00000000 	.word	0x00000000
 80039b0:	080036f5 	.word	0x080036f5

080039b4 <_printf_common>:
 80039b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039b6:	0015      	movs	r5, r2
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	688a      	ldr	r2, [r1, #8]
 80039bc:	690b      	ldr	r3, [r1, #16]
 80039be:	9000      	str	r0, [sp, #0]
 80039c0:	000c      	movs	r4, r1
 80039c2:	4293      	cmp	r3, r2
 80039c4:	da00      	bge.n	80039c8 <_printf_common+0x14>
 80039c6:	0013      	movs	r3, r2
 80039c8:	0022      	movs	r2, r4
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	3243      	adds	r2, #67	; 0x43
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d001      	beq.n	80039d8 <_printf_common+0x24>
 80039d4:	3301      	adds	r3, #1
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	069b      	lsls	r3, r3, #26
 80039dc:	d502      	bpl.n	80039e4 <_printf_common+0x30>
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	3302      	adds	r3, #2
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	2706      	movs	r7, #6
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	401f      	ands	r7, r3
 80039ea:	d027      	beq.n	8003a3c <_printf_common+0x88>
 80039ec:	0023      	movs	r3, r4
 80039ee:	3343      	adds	r3, #67	; 0x43
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	4193      	sbcs	r3, r2
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	0692      	lsls	r2, r2, #26
 80039fa:	d430      	bmi.n	8003a5e <_printf_common+0xaa>
 80039fc:	0022      	movs	r2, r4
 80039fe:	9901      	ldr	r1, [sp, #4]
 8003a00:	3243      	adds	r2, #67	; 0x43
 8003a02:	9800      	ldr	r0, [sp, #0]
 8003a04:	9e08      	ldr	r6, [sp, #32]
 8003a06:	47b0      	blx	r6
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d025      	beq.n	8003a58 <_printf_common+0xa4>
 8003a0c:	2306      	movs	r3, #6
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	682a      	ldr	r2, [r5, #0]
 8003a12:	68e1      	ldr	r1, [r4, #12]
 8003a14:	4003      	ands	r3, r0
 8003a16:	2500      	movs	r5, #0
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d103      	bne.n	8003a24 <_printf_common+0x70>
 8003a1c:	1a8d      	subs	r5, r1, r2
 8003a1e:	43eb      	mvns	r3, r5
 8003a20:	17db      	asrs	r3, r3, #31
 8003a22:	401d      	ands	r5, r3
 8003a24:	68a3      	ldr	r3, [r4, #8]
 8003a26:	6922      	ldr	r2, [r4, #16]
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	dd01      	ble.n	8003a30 <_printf_common+0x7c>
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	18ed      	adds	r5, r5, r3
 8003a30:	2700      	movs	r7, #0
 8003a32:	42bd      	cmp	r5, r7
 8003a34:	d120      	bne.n	8003a78 <_printf_common+0xc4>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e010      	b.n	8003a5c <_printf_common+0xa8>
 8003a3a:	3701      	adds	r7, #1
 8003a3c:	68e3      	ldr	r3, [r4, #12]
 8003a3e:	682a      	ldr	r2, [r5, #0]
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	42bb      	cmp	r3, r7
 8003a44:	ddd2      	ble.n	80039ec <_printf_common+0x38>
 8003a46:	0022      	movs	r2, r4
 8003a48:	2301      	movs	r3, #1
 8003a4a:	3219      	adds	r2, #25
 8003a4c:	9901      	ldr	r1, [sp, #4]
 8003a4e:	9800      	ldr	r0, [sp, #0]
 8003a50:	9e08      	ldr	r6, [sp, #32]
 8003a52:	47b0      	blx	r6
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d1f0      	bne.n	8003a3a <_printf_common+0x86>
 8003a58:	2001      	movs	r0, #1
 8003a5a:	4240      	negs	r0, r0
 8003a5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a5e:	2030      	movs	r0, #48	; 0x30
 8003a60:	18e1      	adds	r1, r4, r3
 8003a62:	3143      	adds	r1, #67	; 0x43
 8003a64:	7008      	strb	r0, [r1, #0]
 8003a66:	0021      	movs	r1, r4
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	3145      	adds	r1, #69	; 0x45
 8003a6c:	7809      	ldrb	r1, [r1, #0]
 8003a6e:	18a2      	adds	r2, r4, r2
 8003a70:	3243      	adds	r2, #67	; 0x43
 8003a72:	3302      	adds	r3, #2
 8003a74:	7011      	strb	r1, [r2, #0]
 8003a76:	e7c1      	b.n	80039fc <_printf_common+0x48>
 8003a78:	0022      	movs	r2, r4
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	321a      	adds	r2, #26
 8003a7e:	9901      	ldr	r1, [sp, #4]
 8003a80:	9800      	ldr	r0, [sp, #0]
 8003a82:	9e08      	ldr	r6, [sp, #32]
 8003a84:	47b0      	blx	r6
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	d0e6      	beq.n	8003a58 <_printf_common+0xa4>
 8003a8a:	3701      	adds	r7, #1
 8003a8c:	e7d1      	b.n	8003a32 <_printf_common+0x7e>
	...

08003a90 <_printf_i>:
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	9204      	str	r2, [sp, #16]
 8003a96:	000a      	movs	r2, r1
 8003a98:	3243      	adds	r2, #67	; 0x43
 8003a9a:	9305      	str	r3, [sp, #20]
 8003a9c:	9003      	str	r0, [sp, #12]
 8003a9e:	9202      	str	r2, [sp, #8]
 8003aa0:	7e0a      	ldrb	r2, [r1, #24]
 8003aa2:	000c      	movs	r4, r1
 8003aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003aa6:	2a6e      	cmp	r2, #110	; 0x6e
 8003aa8:	d100      	bne.n	8003aac <_printf_i+0x1c>
 8003aaa:	e086      	b.n	8003bba <_printf_i+0x12a>
 8003aac:	d81f      	bhi.n	8003aee <_printf_i+0x5e>
 8003aae:	2a63      	cmp	r2, #99	; 0x63
 8003ab0:	d033      	beq.n	8003b1a <_printf_i+0x8a>
 8003ab2:	d808      	bhi.n	8003ac6 <_printf_i+0x36>
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d100      	bne.n	8003aba <_printf_i+0x2a>
 8003ab8:	e08c      	b.n	8003bd4 <_printf_i+0x144>
 8003aba:	2a58      	cmp	r2, #88	; 0x58
 8003abc:	d04d      	beq.n	8003b5a <_printf_i+0xca>
 8003abe:	0025      	movs	r5, r4
 8003ac0:	3542      	adds	r5, #66	; 0x42
 8003ac2:	702a      	strb	r2, [r5, #0]
 8003ac4:	e030      	b.n	8003b28 <_printf_i+0x98>
 8003ac6:	2a64      	cmp	r2, #100	; 0x64
 8003ac8:	d001      	beq.n	8003ace <_printf_i+0x3e>
 8003aca:	2a69      	cmp	r2, #105	; 0x69
 8003acc:	d1f7      	bne.n	8003abe <_printf_i+0x2e>
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	6825      	ldr	r5, [r4, #0]
 8003ad2:	1d0a      	adds	r2, r1, #4
 8003ad4:	0628      	lsls	r0, r5, #24
 8003ad6:	d529      	bpl.n	8003b2c <_printf_i+0x9c>
 8003ad8:	6808      	ldr	r0, [r1, #0]
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	2800      	cmp	r0, #0
 8003ade:	da03      	bge.n	8003ae8 <_printf_i+0x58>
 8003ae0:	232d      	movs	r3, #45	; 0x2d
 8003ae2:	9a02      	ldr	r2, [sp, #8]
 8003ae4:	4240      	negs	r0, r0
 8003ae6:	7013      	strb	r3, [r2, #0]
 8003ae8:	4e6b      	ldr	r6, [pc, #428]	; (8003c98 <_printf_i+0x208>)
 8003aea:	270a      	movs	r7, #10
 8003aec:	e04f      	b.n	8003b8e <_printf_i+0xfe>
 8003aee:	2a73      	cmp	r2, #115	; 0x73
 8003af0:	d074      	beq.n	8003bdc <_printf_i+0x14c>
 8003af2:	d808      	bhi.n	8003b06 <_printf_i+0x76>
 8003af4:	2a6f      	cmp	r2, #111	; 0x6f
 8003af6:	d01f      	beq.n	8003b38 <_printf_i+0xa8>
 8003af8:	2a70      	cmp	r2, #112	; 0x70
 8003afa:	d1e0      	bne.n	8003abe <_printf_i+0x2e>
 8003afc:	2220      	movs	r2, #32
 8003afe:	6809      	ldr	r1, [r1, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	6022      	str	r2, [r4, #0]
 8003b04:	e003      	b.n	8003b0e <_printf_i+0x7e>
 8003b06:	2a75      	cmp	r2, #117	; 0x75
 8003b08:	d016      	beq.n	8003b38 <_printf_i+0xa8>
 8003b0a:	2a78      	cmp	r2, #120	; 0x78
 8003b0c:	d1d7      	bne.n	8003abe <_printf_i+0x2e>
 8003b0e:	0022      	movs	r2, r4
 8003b10:	2178      	movs	r1, #120	; 0x78
 8003b12:	3245      	adds	r2, #69	; 0x45
 8003b14:	7011      	strb	r1, [r2, #0]
 8003b16:	4e61      	ldr	r6, [pc, #388]	; (8003c9c <_printf_i+0x20c>)
 8003b18:	e022      	b.n	8003b60 <_printf_i+0xd0>
 8003b1a:	0025      	movs	r5, r4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	3542      	adds	r5, #66	; 0x42
 8003b20:	1d11      	adds	r1, r2, #4
 8003b22:	6019      	str	r1, [r3, #0]
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	702b      	strb	r3, [r5, #0]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e065      	b.n	8003bf8 <_printf_i+0x168>
 8003b2c:	6808      	ldr	r0, [r1, #0]
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	0669      	lsls	r1, r5, #25
 8003b32:	d5d3      	bpl.n	8003adc <_printf_i+0x4c>
 8003b34:	b200      	sxth	r0, r0
 8003b36:	e7d1      	b.n	8003adc <_printf_i+0x4c>
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	6825      	ldr	r5, [r4, #0]
 8003b3c:	1d08      	adds	r0, r1, #4
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	062e      	lsls	r6, r5, #24
 8003b44:	d505      	bpl.n	8003b52 <_printf_i+0xc2>
 8003b46:	4e54      	ldr	r6, [pc, #336]	; (8003c98 <_printf_i+0x208>)
 8003b48:	2708      	movs	r7, #8
 8003b4a:	2a6f      	cmp	r2, #111	; 0x6f
 8003b4c:	d01b      	beq.n	8003b86 <_printf_i+0xf6>
 8003b4e:	270a      	movs	r7, #10
 8003b50:	e019      	b.n	8003b86 <_printf_i+0xf6>
 8003b52:	066d      	lsls	r5, r5, #25
 8003b54:	d5f7      	bpl.n	8003b46 <_printf_i+0xb6>
 8003b56:	b280      	uxth	r0, r0
 8003b58:	e7f5      	b.n	8003b46 <_printf_i+0xb6>
 8003b5a:	3145      	adds	r1, #69	; 0x45
 8003b5c:	4e4e      	ldr	r6, [pc, #312]	; (8003c98 <_printf_i+0x208>)
 8003b5e:	700a      	strb	r2, [r1, #0]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	1d01      	adds	r1, r0, #4
 8003b66:	6800      	ldr	r0, [r0, #0]
 8003b68:	6019      	str	r1, [r3, #0]
 8003b6a:	0615      	lsls	r5, r2, #24
 8003b6c:	d521      	bpl.n	8003bb2 <_printf_i+0x122>
 8003b6e:	07d3      	lsls	r3, r2, #31
 8003b70:	d502      	bpl.n	8003b78 <_printf_i+0xe8>
 8003b72:	2320      	movs	r3, #32
 8003b74:	431a      	orrs	r2, r3
 8003b76:	6022      	str	r2, [r4, #0]
 8003b78:	2710      	movs	r7, #16
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d103      	bne.n	8003b86 <_printf_i+0xf6>
 8003b7e:	2320      	movs	r3, #32
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	439a      	bics	r2, r3
 8003b84:	6022      	str	r2, [r4, #0]
 8003b86:	0023      	movs	r3, r4
 8003b88:	2200      	movs	r2, #0
 8003b8a:	3343      	adds	r3, #67	; 0x43
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db58      	blt.n	8003c48 <_printf_i+0x1b8>
 8003b96:	2204      	movs	r2, #4
 8003b98:	6821      	ldr	r1, [r4, #0]
 8003b9a:	4391      	bics	r1, r2
 8003b9c:	6021      	str	r1, [r4, #0]
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d154      	bne.n	8003c4c <_printf_i+0x1bc>
 8003ba2:	9d02      	ldr	r5, [sp, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05a      	beq.n	8003c5e <_printf_i+0x1ce>
 8003ba8:	0025      	movs	r5, r4
 8003baa:	7833      	ldrb	r3, [r6, #0]
 8003bac:	3542      	adds	r5, #66	; 0x42
 8003bae:	702b      	strb	r3, [r5, #0]
 8003bb0:	e055      	b.n	8003c5e <_printf_i+0x1ce>
 8003bb2:	0655      	lsls	r5, r2, #25
 8003bb4:	d5db      	bpl.n	8003b6e <_printf_i+0xde>
 8003bb6:	b280      	uxth	r0, r0
 8003bb8:	e7d9      	b.n	8003b6e <_printf_i+0xde>
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	680d      	ldr	r5, [r1, #0]
 8003bbe:	1d10      	adds	r0, r2, #4
 8003bc0:	6949      	ldr	r1, [r1, #20]
 8003bc2:	6018      	str	r0, [r3, #0]
 8003bc4:	6813      	ldr	r3, [r2, #0]
 8003bc6:	062e      	lsls	r6, r5, #24
 8003bc8:	d501      	bpl.n	8003bce <_printf_i+0x13e>
 8003bca:	6019      	str	r1, [r3, #0]
 8003bcc:	e002      	b.n	8003bd4 <_printf_i+0x144>
 8003bce:	066d      	lsls	r5, r5, #25
 8003bd0:	d5fb      	bpl.n	8003bca <_printf_i+0x13a>
 8003bd2:	8019      	strh	r1, [r3, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9d02      	ldr	r5, [sp, #8]
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	e04f      	b.n	8003c7c <_printf_i+0x1ec>
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	1d11      	adds	r1, r2, #4
 8003be0:	6019      	str	r1, [r3, #0]
 8003be2:	6815      	ldr	r5, [r2, #0]
 8003be4:	2100      	movs	r1, #0
 8003be6:	6862      	ldr	r2, [r4, #4]
 8003be8:	0028      	movs	r0, r5
 8003bea:	f000 f859 	bl	8003ca0 <memchr>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d001      	beq.n	8003bf6 <_printf_i+0x166>
 8003bf2:	1b40      	subs	r0, r0, r5
 8003bf4:	6060      	str	r0, [r4, #4]
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9a02      	ldr	r2, [sp, #8]
 8003bfe:	7013      	strb	r3, [r2, #0]
 8003c00:	e03c      	b.n	8003c7c <_printf_i+0x1ec>
 8003c02:	6923      	ldr	r3, [r4, #16]
 8003c04:	002a      	movs	r2, r5
 8003c06:	9904      	ldr	r1, [sp, #16]
 8003c08:	9803      	ldr	r0, [sp, #12]
 8003c0a:	9d05      	ldr	r5, [sp, #20]
 8003c0c:	47a8      	blx	r5
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d03e      	beq.n	8003c90 <_printf_i+0x200>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	079b      	lsls	r3, r3, #30
 8003c16:	d415      	bmi.n	8003c44 <_printf_i+0x1b4>
 8003c18:	9b07      	ldr	r3, [sp, #28]
 8003c1a:	68e0      	ldr	r0, [r4, #12]
 8003c1c:	4298      	cmp	r0, r3
 8003c1e:	da39      	bge.n	8003c94 <_printf_i+0x204>
 8003c20:	0018      	movs	r0, r3
 8003c22:	e037      	b.n	8003c94 <_printf_i+0x204>
 8003c24:	0022      	movs	r2, r4
 8003c26:	2301      	movs	r3, #1
 8003c28:	3219      	adds	r2, #25
 8003c2a:	9904      	ldr	r1, [sp, #16]
 8003c2c:	9803      	ldr	r0, [sp, #12]
 8003c2e:	9e05      	ldr	r6, [sp, #20]
 8003c30:	47b0      	blx	r6
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d02c      	beq.n	8003c90 <_printf_i+0x200>
 8003c36:	3501      	adds	r5, #1
 8003c38:	68e3      	ldr	r3, [r4, #12]
 8003c3a:	9a07      	ldr	r2, [sp, #28]
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	42ab      	cmp	r3, r5
 8003c40:	dcf0      	bgt.n	8003c24 <_printf_i+0x194>
 8003c42:	e7e9      	b.n	8003c18 <_printf_i+0x188>
 8003c44:	2500      	movs	r5, #0
 8003c46:	e7f7      	b.n	8003c38 <_printf_i+0x1a8>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d0ad      	beq.n	8003ba8 <_printf_i+0x118>
 8003c4c:	9d02      	ldr	r5, [sp, #8]
 8003c4e:	0039      	movs	r1, r7
 8003c50:	f7fc fae0 	bl	8000214 <__aeabi_uidivmod>
 8003c54:	5c73      	ldrb	r3, [r6, r1]
 8003c56:	3d01      	subs	r5, #1
 8003c58:	702b      	strb	r3, [r5, #0]
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d1f7      	bne.n	8003c4e <_printf_i+0x1be>
 8003c5e:	2f08      	cmp	r7, #8
 8003c60:	d109      	bne.n	8003c76 <_printf_i+0x1e6>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	07db      	lsls	r3, r3, #31
 8003c66:	d506      	bpl.n	8003c76 <_printf_i+0x1e6>
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	6922      	ldr	r2, [r4, #16]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	dc02      	bgt.n	8003c76 <_printf_i+0x1e6>
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	3d01      	subs	r5, #1
 8003c74:	702b      	strb	r3, [r5, #0]
 8003c76:	9b02      	ldr	r3, [sp, #8]
 8003c78:	1b5b      	subs	r3, r3, r5
 8003c7a:	6123      	str	r3, [r4, #16]
 8003c7c:	9b05      	ldr	r3, [sp, #20]
 8003c7e:	aa07      	add	r2, sp, #28
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	0021      	movs	r1, r4
 8003c84:	9b04      	ldr	r3, [sp, #16]
 8003c86:	9803      	ldr	r0, [sp, #12]
 8003c88:	f7ff fe94 	bl	80039b4 <_printf_common>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d1b8      	bne.n	8003c02 <_printf_i+0x172>
 8003c90:	2001      	movs	r0, #1
 8003c92:	4240      	negs	r0, r0
 8003c94:	b009      	add	sp, #36	; 0x24
 8003c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c98:	08003f39 	.word	0x08003f39
 8003c9c:	08003f4a 	.word	0x08003f4a

08003ca0 <memchr>:
 8003ca0:	b2c9      	uxtb	r1, r1
 8003ca2:	1882      	adds	r2, r0, r2
 8003ca4:	4290      	cmp	r0, r2
 8003ca6:	d101      	bne.n	8003cac <memchr+0xc>
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4770      	bx	lr
 8003cac:	7803      	ldrb	r3, [r0, #0]
 8003cae:	428b      	cmp	r3, r1
 8003cb0:	d0fb      	beq.n	8003caa <memchr+0xa>
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	e7f6      	b.n	8003ca4 <memchr+0x4>

08003cb6 <memcpy>:
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d100      	bne.n	8003cc0 <memcpy+0xa>
 8003cbe:	bd10      	pop	{r4, pc}
 8003cc0:	5ccc      	ldrb	r4, [r1, r3]
 8003cc2:	54c4      	strb	r4, [r0, r3]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	e7f8      	b.n	8003cba <memcpy+0x4>

08003cc8 <memmove>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4288      	cmp	r0, r1
 8003ccc:	d902      	bls.n	8003cd4 <memmove+0xc>
 8003cce:	188b      	adds	r3, r1, r2
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	d303      	bcc.n	8003cdc <memmove+0x14>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e007      	b.n	8003ce8 <memmove+0x20>
 8003cd8:	5c8b      	ldrb	r3, [r1, r2]
 8003cda:	5483      	strb	r3, [r0, r2]
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	d2fb      	bcs.n	8003cd8 <memmove+0x10>
 8003ce0:	bd10      	pop	{r4, pc}
 8003ce2:	5ccc      	ldrb	r4, [r1, r3]
 8003ce4:	54c4      	strb	r4, [r0, r3]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1fa      	bne.n	8003ce2 <memmove+0x1a>
 8003cec:	e7f8      	b.n	8003ce0 <memmove+0x18>
	...

08003cf0 <_free_r>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	0005      	movs	r5, r0
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	d010      	beq.n	8003d1a <_free_r+0x2a>
 8003cf8:	1f0c      	subs	r4, r1, #4
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	da00      	bge.n	8003d02 <_free_r+0x12>
 8003d00:	18e4      	adds	r4, r4, r3
 8003d02:	0028      	movs	r0, r5
 8003d04:	f000 f8d4 	bl	8003eb0 <__malloc_lock>
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <_free_r+0x90>)
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d105      	bne.n	8003d1c <_free_r+0x2c>
 8003d10:	6063      	str	r3, [r4, #4]
 8003d12:	6014      	str	r4, [r2, #0]
 8003d14:	0028      	movs	r0, r5
 8003d16:	f000 f8cc 	bl	8003eb2 <__malloc_unlock>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	d909      	bls.n	8003d34 <_free_r+0x44>
 8003d20:	6821      	ldr	r1, [r4, #0]
 8003d22:	1860      	adds	r0, r4, r1
 8003d24:	4283      	cmp	r3, r0
 8003d26:	d1f3      	bne.n	8003d10 <_free_r+0x20>
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	1841      	adds	r1, r0, r1
 8003d2e:	6021      	str	r1, [r4, #0]
 8003d30:	e7ee      	b.n	8003d10 <_free_r+0x20>
 8003d32:	0013      	movs	r3, r2
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	d001      	beq.n	8003d3e <_free_r+0x4e>
 8003d3a:	42a2      	cmp	r2, r4
 8003d3c:	d9f9      	bls.n	8003d32 <_free_r+0x42>
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	1858      	adds	r0, r3, r1
 8003d42:	42a0      	cmp	r0, r4
 8003d44:	d10b      	bne.n	8003d5e <_free_r+0x6e>
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	1809      	adds	r1, r1, r0
 8003d4a:	1858      	adds	r0, r3, r1
 8003d4c:	6019      	str	r1, [r3, #0]
 8003d4e:	4282      	cmp	r2, r0
 8003d50:	d1e0      	bne.n	8003d14 <_free_r+0x24>
 8003d52:	6810      	ldr	r0, [r2, #0]
 8003d54:	6852      	ldr	r2, [r2, #4]
 8003d56:	1841      	adds	r1, r0, r1
 8003d58:	6019      	str	r1, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	e7da      	b.n	8003d14 <_free_r+0x24>
 8003d5e:	42a0      	cmp	r0, r4
 8003d60:	d902      	bls.n	8003d68 <_free_r+0x78>
 8003d62:	230c      	movs	r3, #12
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	e7d5      	b.n	8003d14 <_free_r+0x24>
 8003d68:	6821      	ldr	r1, [r4, #0]
 8003d6a:	1860      	adds	r0, r4, r1
 8003d6c:	4282      	cmp	r2, r0
 8003d6e:	d103      	bne.n	8003d78 <_free_r+0x88>
 8003d70:	6810      	ldr	r0, [r2, #0]
 8003d72:	6852      	ldr	r2, [r2, #4]
 8003d74:	1841      	adds	r1, r0, r1
 8003d76:	6021      	str	r1, [r4, #0]
 8003d78:	6062      	str	r2, [r4, #4]
 8003d7a:	605c      	str	r4, [r3, #4]
 8003d7c:	e7ca      	b.n	8003d14 <_free_r+0x24>
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20000090 	.word	0x20000090

08003d84 <_malloc_r>:
 8003d84:	2303      	movs	r3, #3
 8003d86:	b570      	push	{r4, r5, r6, lr}
 8003d88:	1ccd      	adds	r5, r1, #3
 8003d8a:	439d      	bics	r5, r3
 8003d8c:	3508      	adds	r5, #8
 8003d8e:	0006      	movs	r6, r0
 8003d90:	2d0c      	cmp	r5, #12
 8003d92:	d21e      	bcs.n	8003dd2 <_malloc_r+0x4e>
 8003d94:	250c      	movs	r5, #12
 8003d96:	42a9      	cmp	r1, r5
 8003d98:	d81d      	bhi.n	8003dd6 <_malloc_r+0x52>
 8003d9a:	0030      	movs	r0, r6
 8003d9c:	f000 f888 	bl	8003eb0 <__malloc_lock>
 8003da0:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <_malloc_r+0xb4>)
 8003da2:	6814      	ldr	r4, [r2, #0]
 8003da4:	0021      	movs	r1, r4
 8003da6:	2900      	cmp	r1, #0
 8003da8:	d119      	bne.n	8003dde <_malloc_r+0x5a>
 8003daa:	4c24      	ldr	r4, [pc, #144]	; (8003e3c <_malloc_r+0xb8>)
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <_malloc_r+0x36>
 8003db2:	0030      	movs	r0, r6
 8003db4:	f000 f86a 	bl	8003e8c <_sbrk_r>
 8003db8:	6020      	str	r0, [r4, #0]
 8003dba:	0029      	movs	r1, r5
 8003dbc:	0030      	movs	r0, r6
 8003dbe:	f000 f865 	bl	8003e8c <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d12b      	bne.n	8003e1e <_malloc_r+0x9a>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	0030      	movs	r0, r6
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	f000 f871 	bl	8003eb2 <__malloc_unlock>
 8003dd0:	e003      	b.n	8003dda <_malloc_r+0x56>
 8003dd2:	2d00      	cmp	r5, #0
 8003dd4:	dadf      	bge.n	8003d96 <_malloc_r+0x12>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	2000      	movs	r0, #0
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
 8003dde:	680b      	ldr	r3, [r1, #0]
 8003de0:	1b5b      	subs	r3, r3, r5
 8003de2:	d419      	bmi.n	8003e18 <_malloc_r+0x94>
 8003de4:	2b0b      	cmp	r3, #11
 8003de6:	d903      	bls.n	8003df0 <_malloc_r+0x6c>
 8003de8:	600b      	str	r3, [r1, #0]
 8003dea:	18cc      	adds	r4, r1, r3
 8003dec:	6025      	str	r5, [r4, #0]
 8003dee:	e003      	b.n	8003df8 <_malloc_r+0x74>
 8003df0:	684b      	ldr	r3, [r1, #4]
 8003df2:	428c      	cmp	r4, r1
 8003df4:	d10d      	bne.n	8003e12 <_malloc_r+0x8e>
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	0030      	movs	r0, r6
 8003dfa:	f000 f85a 	bl	8003eb2 <__malloc_unlock>
 8003dfe:	0020      	movs	r0, r4
 8003e00:	2207      	movs	r2, #7
 8003e02:	300b      	adds	r0, #11
 8003e04:	1d23      	adds	r3, r4, #4
 8003e06:	4390      	bics	r0, r2
 8003e08:	1ac3      	subs	r3, r0, r3
 8003e0a:	d0e7      	beq.n	8003ddc <_malloc_r+0x58>
 8003e0c:	425a      	negs	r2, r3
 8003e0e:	50e2      	str	r2, [r4, r3]
 8003e10:	e7e4      	b.n	8003ddc <_malloc_r+0x58>
 8003e12:	6063      	str	r3, [r4, #4]
 8003e14:	000c      	movs	r4, r1
 8003e16:	e7ef      	b.n	8003df8 <_malloc_r+0x74>
 8003e18:	000c      	movs	r4, r1
 8003e1a:	6849      	ldr	r1, [r1, #4]
 8003e1c:	e7c3      	b.n	8003da6 <_malloc_r+0x22>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	1cc4      	adds	r4, r0, #3
 8003e22:	439c      	bics	r4, r3
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d0e1      	beq.n	8003dec <_malloc_r+0x68>
 8003e28:	1a21      	subs	r1, r4, r0
 8003e2a:	0030      	movs	r0, r6
 8003e2c:	f000 f82e 	bl	8003e8c <_sbrk_r>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d1db      	bne.n	8003dec <_malloc_r+0x68>
 8003e34:	e7c7      	b.n	8003dc6 <_malloc_r+0x42>
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	20000090 	.word	0x20000090
 8003e3c:	20000094 	.word	0x20000094

08003e40 <_realloc_r>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	0007      	movs	r7, r0
 8003e44:	000d      	movs	r5, r1
 8003e46:	0016      	movs	r6, r2
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	d105      	bne.n	8003e58 <_realloc_r+0x18>
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	f7ff ff99 	bl	8003d84 <_malloc_r>
 8003e52:	0004      	movs	r4, r0
 8003e54:	0020      	movs	r0, r4
 8003e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	d103      	bne.n	8003e64 <_realloc_r+0x24>
 8003e5c:	f7ff ff48 	bl	8003cf0 <_free_r>
 8003e60:	0034      	movs	r4, r6
 8003e62:	e7f7      	b.n	8003e54 <_realloc_r+0x14>
 8003e64:	f000 f826 	bl	8003eb4 <_malloc_usable_size_r>
 8003e68:	002c      	movs	r4, r5
 8003e6a:	42b0      	cmp	r0, r6
 8003e6c:	d2f2      	bcs.n	8003e54 <_realloc_r+0x14>
 8003e6e:	0031      	movs	r1, r6
 8003e70:	0038      	movs	r0, r7
 8003e72:	f7ff ff87 	bl	8003d84 <_malloc_r>
 8003e76:	1e04      	subs	r4, r0, #0
 8003e78:	d0ec      	beq.n	8003e54 <_realloc_r+0x14>
 8003e7a:	0029      	movs	r1, r5
 8003e7c:	0032      	movs	r2, r6
 8003e7e:	f7ff ff1a 	bl	8003cb6 <memcpy>
 8003e82:	0029      	movs	r1, r5
 8003e84:	0038      	movs	r0, r7
 8003e86:	f7ff ff33 	bl	8003cf0 <_free_r>
 8003e8a:	e7e3      	b.n	8003e54 <_realloc_r+0x14>

08003e8c <_sbrk_r>:
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	b570      	push	{r4, r5, r6, lr}
 8003e90:	4c06      	ldr	r4, [pc, #24]	; (8003eac <_sbrk_r+0x20>)
 8003e92:	0005      	movs	r5, r0
 8003e94:	0008      	movs	r0, r1
 8003e96:	6023      	str	r3, [r4, #0]
 8003e98:	f7fc fcec 	bl	8000874 <_sbrk>
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	d103      	bne.n	8003ea8 <_sbrk_r+0x1c>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d000      	beq.n	8003ea8 <_sbrk_r+0x1c>
 8003ea6:	602b      	str	r3, [r5, #0]
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	200001c4 	.word	0x200001c4

08003eb0 <__malloc_lock>:
 8003eb0:	4770      	bx	lr

08003eb2 <__malloc_unlock>:
 8003eb2:	4770      	bx	lr

08003eb4 <_malloc_usable_size_r>:
 8003eb4:	1f0b      	subs	r3, r1, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1f18      	subs	r0, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da01      	bge.n	8003ec2 <_malloc_usable_size_r+0xe>
 8003ebe:	580b      	ldr	r3, [r1, r0]
 8003ec0:	18c0      	adds	r0, r0, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_init>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr

08003ed0 <_fini>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr
