
stm32_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08002e60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002e60  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b89  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013d0  00000000  00000000  00026c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  00027ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  00028690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cd1a  00000000  00000000  00028c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062ab  00000000  00000000  0003598a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004a272  00000000  00000000  0003bc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00085ea7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  00085f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d54 	.word	0x08002d54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002d54 	.word	0x08002d54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa89 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f849 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f923 	bl	8000478 <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f897 	bl	8000364 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8ef 	bl	8000418 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc);
 800023a:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <main+0x84>)
 800023c:	0018      	movs	r0, r3
 800023e:	f000 fc43 	bl	8000ac8 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc, 5) == HAL_OK);
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <main+0x84>)
 8000244:	2105      	movs	r1, #5
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fc92 	bl	8000b70 <HAL_ADC_PollForConversion>
	  {
		adcval =  HAL_ADC_GetValue(&hadc);
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0x84>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fd20 	bl	8000c94 <HAL_ADC_GetValue>
 8000254:	0002      	movs	r2, r0
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <main+0x88>)
 8000258:	601a      	str	r2, [r3, #0]
		temp = (adcval*330) /1023;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <main+0x88>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	0013      	movs	r3, r2
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	189b      	adds	r3, r3, r2
 8000264:	015a      	lsls	r2, r3, #5
 8000266:	189b      	adds	r3, r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4910      	ldr	r1, [pc, #64]	; (80002ac <main+0x8c>)
 800026c:	0018      	movs	r0, r3
 800026e:	f7ff ff4b 	bl	8000108 <__udivsi3>
 8000272:	0003      	movs	r3, r0
 8000274:	001a      	movs	r2, r3
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <main+0x90>)
 8000278:	601a      	str	r2, [r3, #0]
	  }

	  //HAL_UART_Transmit(&huart2, temp, sizeof(temp), 250);
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "Temperature:%d\n", temp), 0xFFFF);
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <main+0x90>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <main+0x94>)
 8000280:	003b      	movs	r3, r7
 8000282:	0018      	movs	r0, r3
 8000284:	f002 f95e 	bl	8002544 <siprintf>
 8000288:	0003      	movs	r3, r0
 800028a:	b29a      	uxth	r2, r3
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <main+0x98>)
 800028e:	0039      	movs	r1, r7
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <main+0x9c>)
 8000292:	f001 fd67 	bl	8001d64 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000296:	23fa      	movs	r3, #250	; 0xfa
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fab2 	bl	8000804 <HAL_Delay>
  {
 80002a0:	e7cb      	b.n	800023a <main+0x1a>
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	2000011c 	.word	0x2000011c
 80002a8:	2000015c 	.word	0x2000015c
 80002ac:	000003ff 	.word	0x000003ff
 80002b0:	20000098 	.word	0x20000098
 80002b4:	08002d6c 	.word	0x08002d6c
 80002b8:	0000ffff 	.word	0x0000ffff
 80002bc:	2000009c 	.word	0x2000009c

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b091      	sub	sp, #68	; 0x44
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	2410      	movs	r4, #16
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2330      	movs	r3, #48	; 0x30
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f002 f92f 	bl	8002534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f002 f928 	bl	8002534 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2212      	movs	r2, #18
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2201      	movs	r2, #1
 80002f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2210      	movs	r2, #16
 80002fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0212      	lsls	r2, r2, #8
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	0352      	lsls	r2, r2, #13
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	187b      	adds	r3, r7, r1
 8000322:	0018      	movs	r0, r3
 8000324:	f001 f858 	bl	80013d8 <HAL_RCC_OscConfig>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800032c:	f000 f8ca 	bl	80004c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	003b      	movs	r3, r7
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	003b      	movs	r3, r7
 8000338:	2202      	movs	r2, #2
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	003b      	movs	r3, r7
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	003b      	movs	r3, r7
 800034a:	2101      	movs	r1, #1
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fb61 	bl	8001a14 <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000356:	f000 f8b5 	bl	80004c4 <Error_Handler>
  }
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b011      	add	sp, #68	; 0x44
 8000360:	bd90      	pop	{r4, r7, pc}
	...

08000364 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	230c      	movs	r3, #12
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 f8de 	bl	8002534 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000378:	4b25      	ldr	r3, [pc, #148]	; (8000410 <MX_ADC_Init+0xac>)
 800037a:	4a26      	ldr	r2, [pc, #152]	; (8000414 <MX_ADC_Init+0xb0>)
 800037c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800037e:	4b24      	ldr	r3, [pc, #144]	; (8000410 <MX_ADC_Init+0xac>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000384:	4b22      	ldr	r3, [pc, #136]	; (8000410 <MX_ADC_Init+0xac>)
 8000386:	2208      	movs	r2, #8
 8000388:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_ADC_Init+0xac>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <MX_ADC_Init+0xac>)
 8000392:	2201      	movs	r2, #1
 8000394:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000396:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_ADC_Init+0xac>)
 8000398:	2204      	movs	r2, #4
 800039a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_ADC_Init+0xac>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_ADC_Init+0xac>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003a8:	4b19      	ldr	r3, [pc, #100]	; (8000410 <MX_ADC_Init+0xac>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_ADC_Init+0xac>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_ADC_Init+0xac>)
 80003b6:	22c2      	movs	r2, #194	; 0xc2
 80003b8:	32ff      	adds	r2, #255	; 0xff
 80003ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_ADC_Init+0xac>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_ADC_Init+0xac>)
 80003c4:	2224      	movs	r2, #36	; 0x24
 80003c6:	2100      	movs	r1, #0
 80003c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_ADC_Init+0xac>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_ADC_Init+0xac>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fa38 	bl	8000848 <HAL_ADC_Init>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003dc:	f000 f872 	bl	80004c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0152      	lsls	r2, r2, #5
 80003ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2202      	movs	r2, #2
 80003f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f4:	1d3a      	adds	r2, r7, #4
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_ADC_Init+0xac>)
 80003f8:	0011      	movs	r1, r2
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fc56 	bl	8000cac <HAL_ADC_ConfigChannel>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000404:	f000 f85e 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b004      	add	sp, #16
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000011c 	.word	0x2000011c
 8000414:	40012400 	.word	0x40012400

08000418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800041e:	4a15      	ldr	r2, [pc, #84]	; (8000474 <MX_USART2_UART_Init+0x5c>)
 8000420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000424:	2296      	movs	r2, #150	; 0x96
 8000426:	0212      	lsls	r2, r2, #8
 8000428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800045c:	0018      	movs	r0, r3
 800045e:	f001 fc2d 	bl	8001cbc <HAL_UART_Init>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 f82d 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000009c 	.word	0x2000009c
 8000474:	40004400 	.word	0x40004400

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_GPIO_Init+0x48>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_GPIO_Init+0x48>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	03c9      	lsls	r1, r1, #15
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_GPIO_Init+0x48>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	03db      	lsls	r3, r3, #15
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_GPIO_Init+0x48>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_GPIO_Init+0x48>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0289      	lsls	r1, r1, #10
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_GPIO_Init+0x48>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	029b      	lsls	r3, r3, #10
 80004b0:	4013      	ands	r3, r2
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x44>)
 80004d8:	699a      	ldr	r2, [r3, #24]
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_MspInit+0x44>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	619a      	str	r2, [r3, #24]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_MspInit+0x44>)
 80004f0:	69da      	ldr	r2, [r3, #28]
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_MspInit+0x44>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0549      	lsls	r1, r1, #21
 80004f8:	430a      	orrs	r2, r1
 80004fa:	61da      	str	r2, [r3, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_MspInit+0x44>)
 80004fe:	69da      	ldr	r2, [r3, #28]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	055b      	lsls	r3, r3, #21
 8000504:	4013      	ands	r3, r2
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2314      	movs	r3, #20
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	0018      	movs	r0, r3
 8000526:	2314      	movs	r3, #20
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 f802 	bl	8002534 <memset>
  if(hadc->Instance==ADC1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a19      	ldr	r2, [pc, #100]	; (800059c <HAL_ADC_MspInit+0x84>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d12c      	bne.n	8000594 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <HAL_ADC_MspInit+0x88>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <HAL_ADC_MspInit+0x88>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0089      	lsls	r1, r1, #2
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_ADC_MspInit+0x88>)
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_ADC_MspInit+0x88>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_ADC_MspInit+0x88>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_ADC_MspInit+0x88>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000572:	2114      	movs	r1, #20
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2203      	movs	r2, #3
 800057e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	187a      	adds	r2, r7, r1
 8000588:	2390      	movs	r3, #144	; 0x90
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fdb2 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b00a      	add	sp, #40	; 0x28
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40012400 	.word	0x40012400
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	2314      	movs	r3, #20
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	0018      	movs	r0, r3
 80005b2:	2314      	movs	r3, #20
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f001 ffbc 	bl	8002534 <memset>
  if(huart->Instance==USART2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <HAL_UART_MspInit+0x90>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d132      	bne.n	800062c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0289      	lsls	r1, r1, #10
 80005d0:	430a      	orrs	r2, r1
 80005d2:	61da      	str	r2, [r3, #28]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005d6:	69da      	ldr	r2, [r3, #28]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	029b      	lsls	r3, r3, #10
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005fe:	2114      	movs	r1, #20
 8000600:	187b      	adds	r3, r7, r1
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2202      	movs	r2, #2
 800060a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2203      	movs	r2, #3
 8000616:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2201      	movs	r2, #1
 800061c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	187a      	adds	r2, r7, r1
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fd66 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b00a      	add	sp, #40	; 0x28
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40004400 	.word	0x40004400
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f8b2 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000678:	4a14      	ldr	r2, [pc, #80]	; (80006cc <_sbrk+0x5c>)
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <_sbrk+0x60>)
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <_sbrk+0x64>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <_sbrk+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	18d3      	adds	r3, r2, r3
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	429a      	cmp	r2, r3
 800069e:	d207      	bcs.n	80006b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a0:	f001 ff1e 	bl	80024e0 <__errno>
 80006a4:	0003      	movs	r3, r0
 80006a6:	220c      	movs	r2, #12
 80006a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	425b      	negs	r3, r3
 80006ae:	e009      	b.n	80006c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	18d2      	adds	r2, r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <_sbrk+0x64>)
 80006c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b006      	add	sp, #24
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20004000 	.word	0x20004000
 80006d0:	00000400 	.word	0x00000400
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	20000168 	.word	0x20000168

080006dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490e      	ldr	r1, [pc, #56]	; (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0b      	ldr	r4, [pc, #44]	; (8000734 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000712:	f7ff ffe3 	bl	80006dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000716:	f001 fee9 	bl	80024ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fd81 	bl	8000220 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800072c:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8000730:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000734:	20000168 	.word	0x20000168

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>
	...

0800073c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <HAL_Init+0x24>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_Init+0x24>)
 8000746:	2110      	movs	r1, #16
 8000748:	430a      	orrs	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f809 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000752:	f7ff febd 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_InitTick+0x5c>)
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_InitTick+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	0019      	movs	r1, r3
 8000776:	23fa      	movs	r3, #250	; 0xfa
 8000778:	0098      	lsls	r0, r3, #2
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0003      	movs	r3, r0
 8000780:	0019      	movs	r1, r3
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff fcc0 	bl	8000108 <__udivsi3>
 8000788:	0003      	movs	r3, r0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fca7 	bl	80010de <HAL_SYSTICK_Config>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e00f      	b.n	80007b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d80b      	bhi.n	80007b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2301      	movs	r3, #1
 80007a2:	425b      	negs	r3, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fc84 	bl	80010b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_InitTick+0x64>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	18d2      	adds	r2, r2, r3
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000160 	.word	0x20000160

080007f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000160 	.word	0x20000160

08000804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff fff0 	bl	80007f0 <HAL_GetTick>
 8000810:	0003      	movs	r3, r0
 8000812:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	d005      	beq.n	800082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_Delay+0x40>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	001a      	movs	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	189b      	adds	r3, r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	f7ff ffe0 	bl	80007f0 <HAL_GetTick>
 8000830:	0002      	movs	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f7      	bhi.n	800082c <HAL_Delay+0x28>
  {
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000008 	.word	0x20000008

08000848 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000850:	230f      	movs	r3, #15
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e125      	b.n	8000ab2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10a      	bne.n	8000884 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2234      	movs	r2, #52	; 0x34
 8000878:	2100      	movs	r1, #0
 800087a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fe4a 	bl	8000518 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000888:	2210      	movs	r2, #16
 800088a:	4013      	ands	r3, r2
 800088c:	d000      	beq.n	8000890 <HAL_ADC_Init+0x48>
 800088e:	e103      	b.n	8000a98 <HAL_ADC_Init+0x250>
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d000      	beq.n	800089c <HAL_ADC_Init+0x54>
 800089a:	e0fd      	b.n	8000a98 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2204      	movs	r2, #4
 80008a4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80008a6:	d000      	beq.n	80008aa <HAL_ADC_Init+0x62>
 80008a8:	e0f6      	b.n	8000a98 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ae:	4a83      	ldr	r2, [pc, #524]	; (8000abc <HAL_ADC_Init+0x274>)
 80008b0:	4013      	ands	r3, r2
 80008b2:	2202      	movs	r2, #2
 80008b4:	431a      	orrs	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	2203      	movs	r2, #3
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d112      	bne.n	80008ee <HAL_ADC_Init+0xa6>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d009      	beq.n	80008ea <HAL_ADC_Init+0xa2>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68da      	ldr	r2, [r3, #12]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	401a      	ands	r2, r3
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d101      	bne.n	80008ee <HAL_ADC_Init+0xa6>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <HAL_ADC_Init+0xa8>
 80008ee:	2300      	movs	r3, #0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d116      	bne.n	8000922 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	2218      	movs	r2, #24
 80008fc:	4393      	bics	r3, r2
 80008fe:	0019      	movs	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	430a      	orrs	r2, r1
 800090a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	0899      	lsrs	r1, r3, #2
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4964      	ldr	r1, [pc, #400]	; (8000ac0 <HAL_ADC_Init+0x278>)
 800092e:	400a      	ands	r2, r1
 8000930:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	7e1b      	ldrb	r3, [r3, #24]
 8000936:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7e5b      	ldrb	r3, [r3, #25]
 800093c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800093e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7e9b      	ldrb	r3, [r3, #26]
 8000944:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000946:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	2b01      	cmp	r3, #1
 800094e:	d002      	beq.n	8000956 <HAL_ADC_Init+0x10e>
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	015b      	lsls	r3, r3, #5
 8000954:	e000      	b.n	8000958 <HAL_ADC_Init+0x110>
 8000956:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000958:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800095e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d101      	bne.n	800096c <HAL_ADC_Init+0x124>
 8000968:	2304      	movs	r3, #4
 800096a:	e000      	b.n	800096e <HAL_ADC_Init+0x126>
 800096c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800096e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2124      	movs	r1, #36	; 0x24
 8000974:	5c5b      	ldrb	r3, [r3, r1]
 8000976:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000978:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	4313      	orrs	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7edb      	ldrb	r3, [r3, #27]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d115      	bne.n	80009b4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7e9b      	ldrb	r3, [r3, #26]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d105      	bne.n	800099c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	4313      	orrs	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	e00b      	b.n	80009b4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a0:	2220      	movs	r2, #32
 80009a2:	431a      	orrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ac:	2201      	movs	r2, #1
 80009ae:	431a      	orrs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69da      	ldr	r2, [r3, #28]
 80009b8:	23c2      	movs	r3, #194	; 0xc2
 80009ba:	33ff      	adds	r3, #255	; 0xff
 80009bc:	429a      	cmp	r2, r3
 80009be:	d007      	beq.n	80009d0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009c8:	4313      	orrs	r3, r2
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68d9      	ldr	r1, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	430a      	orrs	r2, r1
 80009de:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	055b      	lsls	r3, r3, #21
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d01b      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d017      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d013      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d00f      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d00b      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	d007      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	2b06      	cmp	r3, #6
 8000a1a:	d003      	beq.n	8000a24 <HAL_ADC_Init+0x1dc>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a20:	2b07      	cmp	r3, #7
 8000a22:	d112      	bne.n	8000a4a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2107      	movs	r1, #7
 8000a30:	438a      	bics	r2, r1
 8000a32:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6959      	ldr	r1, [r3, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	2207      	movs	r2, #7
 8000a40:	401a      	ands	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_ADC_Init+0x27c>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d10b      	bne.n	8000a72 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a64:	2203      	movs	r2, #3
 8000a66:	4393      	bics	r3, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a70:	e01c      	b.n	8000aac <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a76:	2212      	movs	r2, #18
 8000a78:	4393      	bics	r3, r2
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a86:	2201      	movs	r2, #1
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a96:	e009      	b.n	8000aac <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	fffffefd 	.word	0xfffffefd
 8000ac0:	fffe0219 	.word	0xfffe0219
 8000ac4:	833fffe7 	.word	0x833fffe7

08000ac8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	d138      	bne.n	8000b56 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	5c9b      	ldrb	r3, [r3, r2]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d101      	bne.n	8000af2 <HAL_ADC_Start+0x2a>
 8000aee:	2302      	movs	r3, #2
 8000af0:	e038      	b.n	8000b64 <HAL_ADC_Start+0x9c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2234      	movs	r2, #52	; 0x34
 8000af6:	2101      	movs	r1, #1
 8000af8:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7e5b      	ldrb	r3, [r3, #25]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d007      	beq.n	8000b12 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fc      	adds	r4, r7, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 f9c5 	bl	8000e98 <ADC_Enable>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b12:	230f      	movs	r3, #15
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d120      	bne.n	8000b5e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <HAL_ADC_Start+0xa4>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2234      	movs	r2, #52	; 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	221c      	movs	r2, #28
 8000b42:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2104      	movs	r1, #4
 8000b50:	430a      	orrs	r2, r1
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	e003      	b.n	8000b5e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	781b      	ldrb	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b005      	add	sp, #20
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	fffff0fe 	.word	0xfffff0fe

08000b70 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d102      	bne.n	8000b88 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000b82:	2308      	movs	r3, #8
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e014      	b.n	8000bb2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d10b      	bne.n	8000bae <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2234      	movs	r2, #52	; 0x34
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e06b      	b.n	8000c86 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000bae:	230c      	movs	r3, #12
 8000bb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000bb2:	f7ff fe1d 	bl	80007f0 <HAL_GetTick>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000bba:	e019      	b.n	8000bf0 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	d016      	beq.n	8000bf0 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d007      	beq.n	8000bd8 <HAL_ADC_PollForConversion+0x68>
 8000bc8:	f7ff fe12 	bl	80007f0 <HAL_GetTick>
 8000bcc:	0002      	movs	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d20b      	bcs.n	8000bf0 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bdc:	2204      	movs	r2, #4
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2234      	movs	r2, #52	; 0x34
 8000be8:	2100      	movs	r1, #0
 8000bea:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e04a      	b.n	8000c86 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d0df      	beq.n	8000bbc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	23c0      	movs	r3, #192	; 0xc0
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4013      	ands	r3, r2
 8000c16:	d12d      	bne.n	8000c74 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d129      	bne.n	8000c74 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2208      	movs	r2, #8
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d122      	bne.n	8000c74 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2204      	movs	r2, #4
 8000c36:	4013      	ands	r3, r2
 8000c38:	d110      	bne.n	8000c5c <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	210c      	movs	r1, #12
 8000c46:	438a      	bics	r2, r1
 8000c48:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_ADC_PollForConversion+0x120>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	2201      	movs	r2, #1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
 8000c5a:	e00b      	b.n	8000c74 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c60:	2220      	movs	r2, #32
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7e1b      	ldrb	r3, [r3, #24]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d103      	bne.n	8000c84 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	220c      	movs	r2, #12
 8000c82:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	fffffefe 	.word	0xfffffefe

08000c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	055b      	lsls	r3, r3, #21
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d011      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d00d      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d009      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d005      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d001      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x46>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2234      	movs	r2, #52	; 0x34
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x54>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e0bb      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x1cc>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2234      	movs	r2, #52	; 0x34
 8000d04:	2101      	movs	r1, #1
 8000d06:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	4013      	ands	r3, r2
 8000d12:	d000      	beq.n	8000d16 <HAL_ADC_ConfigChannel+0x6a>
 8000d14:	e09f      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4a59      	ldr	r2, [pc, #356]	; (8000e80 <HAL_ADC_ConfigChannel+0x1d4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <HAL_ADC_ConfigChannel+0x76>
 8000d20:	e077      	b.n	8000e12 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	055b      	lsls	r3, r3, #21
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d037      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d033      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d02f      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d02b      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d027      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d023      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d01f      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	d01b      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	2107      	movs	r1, #7
 8000d88:	400b      	ands	r3, r1
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d012      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2107      	movs	r1, #7
 8000d9a:	438a      	bics	r2, r1
 8000d9c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6959      	ldr	r1, [r3, #20]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2207      	movs	r2, #7
 8000daa:	401a      	ands	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b10      	cmp	r3, #16
 8000dba:	d003      	beq.n	8000dc4 <HAL_ADC_ConfigChannel+0x118>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b11      	cmp	r3, #17
 8000dc2:	d152      	bne.n	8000e6a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d102      	bne.n	8000dd6 <HAL_ADC_ConfigChannel+0x12a>
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	e001      	b.n	8000dda <HAL_ADC_ConfigChannel+0x12e>
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b10      	cmp	r3, #16
 8000de6:	d140      	bne.n	8000e6a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_ADC_ConfigChannel+0x1dc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4927      	ldr	r1, [pc, #156]	; (8000e8c <HAL_ADC_ConfigChannel+0x1e0>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff f98a 	bl	8000108 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	001a      	movs	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e02:	e002      	b.n	8000e0a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f9      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x158>
 8000e10:	e02b      	b.n	8000e6a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4099      	lsls	r1, r3
 8000e20:	000b      	movs	r3, r1
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	400a      	ands	r2, r1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b10      	cmp	r3, #16
 8000e32:	d003      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0x190>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b11      	cmp	r3, #17
 8000e3a:	d116      	bne.n	8000e6a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b10      	cmp	r3, #16
 8000e46:	d101      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1a0>
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e4a:	e000      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x1a2>
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e50:	400a      	ands	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e009      	b.n	8000e6a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e62:	230f      	movs	r3, #15
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2234      	movs	r2, #52	; 0x34
 8000e6e:	2100      	movs	r1, #0
 8000e70:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e72:	230f      	movs	r3, #15
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	00001001 	.word	0x00001001
 8000e84:	40012708 	.word	0x40012708
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	000f4240 	.word	0x000f4240
 8000e90:	ff7fffff 	.word	0xff7fffff
 8000e94:	ffbfffff 	.word	0xffbfffff

08000e98 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d112      	bne.n	8000edc <ADC_Enable+0x44>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d009      	beq.n	8000ed8 <ADC_Enable+0x40>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	401a      	ands	r2, r3
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d101      	bne.n	8000edc <ADC_Enable+0x44>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <ADC_Enable+0x46>
 8000edc:	2300      	movs	r3, #0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d14b      	bne.n	8000f7a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <ADC_Enable+0xec>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efe:	2201      	movs	r2, #1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e038      	b.n	8000f7c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <ADC_Enable+0xf0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	491b      	ldr	r1, [pc, #108]	; (8000f8c <ADC_Enable+0xf4>)
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff f8f1 	bl	8000108 <__udivsi3>
 8000f26:	0003      	movs	r3, r0
 8000f28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f2a:	e002      	b.n	8000f32 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f9      	bne.n	8000f2c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f38:	f7ff fc5a 	bl	80007f0 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f40:	e014      	b.n	8000f6c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f42:	f7ff fc55 	bl	80007f0 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d90d      	bls.n	8000f6c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	2210      	movs	r2, #16
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f60:	2201      	movs	r2, #1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e007      	b.n	8000f7c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d1e3      	bne.n	8000f42 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b004      	add	sp, #16
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	80000017 	.word	0x80000017
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	000f4240 	.word	0x000f4240

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	0002      	movs	r2, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa4:	d828      	bhi.n	8000ff8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa6:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <__NVIC_SetPriority+0xd4>)
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	33c0      	adds	r3, #192	; 0xc0
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	589b      	ldr	r3, [r3, r2]
 8000fb6:	1dfa      	adds	r2, r7, #7
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	0011      	movs	r1, r2
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	21ff      	movs	r1, #255	; 0xff
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	43d2      	mvns	r2, r2
 8000fca:	401a      	ands	r2, r3
 8000fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2303      	movs	r3, #3
 8000fde:	4003      	ands	r3, r0
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <__NVIC_SetPriority+0xd4>)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	33c0      	adds	r3, #192	; 0xc0
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ff6:	e031      	b.n	800105c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <__NVIC_SetPriority+0xd8>)
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	0019      	movs	r1, r3
 8001000:	230f      	movs	r3, #15
 8001002:	400b      	ands	r3, r1
 8001004:	3b08      	subs	r3, #8
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3306      	adds	r3, #6
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	3304      	adds	r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1dfa      	adds	r2, r7, #7
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	0011      	movs	r1, r2
 8001018:	2203      	movs	r2, #3
 800101a:	400a      	ands	r2, r1
 800101c:	00d2      	lsls	r2, r2, #3
 800101e:	21ff      	movs	r1, #255	; 0xff
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	43d2      	mvns	r2, r2
 8001026:	401a      	ands	r2, r3
 8001028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	401a      	ands	r2, r3
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	2303      	movs	r3, #3
 800103a:	4003      	ands	r3, r0
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <__NVIC_SetPriority+0xd8>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	001c      	movs	r4, r3
 8001048:	230f      	movs	r3, #15
 800104a:	4023      	ands	r3, r4
 800104c:	3b08      	subs	r3, #8
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	430a      	orrs	r2, r1
 8001052:	3306      	adds	r3, #6
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	18c3      	adds	r3, r0, r3
 8001058:	3304      	adds	r3, #4
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b003      	add	sp, #12
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <SysTick_Config+0x40>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e010      	b.n	80010a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <SysTick_Config+0x44>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	3a01      	subs	r2, #1
 8001088:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	2103      	movs	r1, #3
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff7d 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SysTick_Config+0x44>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x44>)
 800109e:	2207      	movs	r2, #7
 80010a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	00ffffff 	.word	0x00ffffff
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	210f      	movs	r1, #15
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b004      	add	sp, #16
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ffbf 	bl	800106c <SysTick_Config>
 80010ee:	0003      	movs	r3, r0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e14f      	b.n	80013a8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d100      	bne.n	8001120 <HAL_GPIO_Init+0x28>
 800111e:	e140      	b.n	80013a2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d00b      	beq.n	8001140 <HAL_GPIO_Init+0x48>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001134:	2b11      	cmp	r3, #17
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b12      	cmp	r3, #18
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	2201      	movs	r2, #1
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0xea>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	58d3      	ldr	r3, [r2, r3]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2207      	movs	r2, #7
 80011f4:	4013      	ands	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2107      	movs	r1, #7
 800120e:	400b      	ands	r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	6939      	ldr	r1, [r7, #16]
 8001228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2203      	movs	r2, #3
 8001248:	401a      	ands	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	055b      	lsls	r3, r3, #21
 8001266:	4013      	ands	r3, r2
 8001268:	d100      	bne.n	800126c <HAL_GPIO_Init+0x174>
 800126a:	e09a      	b.n	80013a2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	619a      	str	r2, [r3, #24]
 8001278:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	589b      	ldr	r3, [r3, r2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	2390      	movs	r3, #144	; 0x90
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1e2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1de>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a43      	ldr	r2, [pc, #268]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1da>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a42      	ldr	r2, [pc, #264]	; (80013d0 <HAL_GPIO_Init+0x2d8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1d6>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012ce:	2305      	movs	r3, #5
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012da:	2300      	movs	r3, #0
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	2103      	movs	r1, #3
 80012e0:	400a      	ands	r2, r1
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	025b      	lsls	r3, r3, #9
 8001312:	4013      	ands	r3, r2
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	029b      	lsls	r3, r3, #10
 800133c:	4013      	ands	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	035b      	lsls	r3, r3, #13
 8001366:	4013      	ands	r3, r2
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	4013      	ands	r3, r2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	40da      	lsrs	r2, r3
 80013b0:	1e13      	subs	r3, r2, #0
 80013b2:	d000      	beq.n	80013b6 <HAL_GPIO_Init+0x2be>
 80013b4:	e6a8      	b.n	8001108 <HAL_GPIO_Init+0x10>
  } 
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b006      	add	sp, #24
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010000 	.word	0x40010000
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48000800 	.word	0x48000800
 80013d0:	48000c00 	.word	0x48000c00
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e305      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1e>
 80013f4:	e08d      	b.n	8001512 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013f6:	4bc5      	ldr	r3, [pc, #788]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	220c      	movs	r2, #12
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d00e      	beq.n	8001420 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001402:	4bc2      	ldr	r3, [pc, #776]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	220c      	movs	r2, #12
 8001408:	4013      	ands	r3, r2
 800140a:	2b08      	cmp	r3, #8
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x64>
 800140e:	4bbf      	ldr	r3, [pc, #764]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	025b      	lsls	r3, r3, #9
 8001416:	401a      	ands	r2, r3
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	025b      	lsls	r3, r3, #9
 800141c:	429a      	cmp	r2, r3
 800141e:	d10d      	bne.n	800143c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4bba      	ldr	r3, [pc, #744]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x56>
 800142c:	e070      	b.n	8001510 <HAL_RCC_OscConfig+0x138>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d000      	beq.n	8001438 <HAL_RCC_OscConfig+0x60>
 8001436:	e06b      	b.n	8001510 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e2dc      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x7c>
 8001444:	4bb1      	ldr	r3, [pc, #708]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4bb0      	ldr	r3, [pc, #704]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0249      	lsls	r1, r1, #9
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e02f      	b.n	80014b4 <HAL_RCC_OscConfig+0xdc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0x9e>
 800145c:	4bab      	ldr	r3, [pc, #684]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4baa      	ldr	r3, [pc, #680]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001462:	49ab      	ldr	r1, [pc, #684]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4ba8      	ldr	r3, [pc, #672]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4ba7      	ldr	r3, [pc, #668]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800146e:	49a9      	ldr	r1, [pc, #676]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e01e      	b.n	80014b4 <HAL_RCC_OscConfig+0xdc>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10e      	bne.n	800149c <HAL_RCC_OscConfig+0xc4>
 800147e:	4ba3      	ldr	r3, [pc, #652]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4ba2      	ldr	r3, [pc, #648]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	02c9      	lsls	r1, r1, #11
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	4b9f      	ldr	r3, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b9e      	ldr	r3, [pc, #632]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0249      	lsls	r1, r1, #9
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xdc>
 800149c:	4b9b      	ldr	r3, [pc, #620]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b9a      	ldr	r3, [pc, #616]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80014a2:	499b      	ldr	r1, [pc, #620]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	4b98      	ldr	r3, [pc, #608]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b97      	ldr	r3, [pc, #604]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80014ae:	4999      	ldr	r1, [pc, #612]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d014      	beq.n	80014e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff f998 	bl	80007f0 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7ff f993 	bl	80007f0 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	; 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e28e      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d8:	4b8c      	ldr	r3, [pc, #560]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0xee>
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff f983 	bl	80007f0 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff f97e 	bl	80007f0 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e279      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x118>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x146>
 800151c:	e06c      	b.n	80015f8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800151e:	4b7b      	ldr	r3, [pc, #492]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	220c      	movs	r2, #12
 8001524:	4013      	ands	r3, r2
 8001526:	d00e      	beq.n	8001546 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001528:	4b78      	ldr	r3, [pc, #480]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b08      	cmp	r3, #8
 8001532:	d11f      	bne.n	8001574 <HAL_RCC_OscConfig+0x19c>
 8001534:	4b75      	ldr	r3, [pc, #468]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	23c0      	movs	r3, #192	; 0xc0
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	401a      	ands	r2, r3
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	429a      	cmp	r2, r3
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b71      	ldr	r3, [pc, #452]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d005      	beq.n	800155c <HAL_RCC_OscConfig+0x184>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e24c      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	22f8      	movs	r2, #248	; 0xf8
 8001562:	4393      	bics	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00da      	lsls	r2, r3, #3
 800156c:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e041      	b.n	80015f8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d024      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001582:	2101      	movs	r1, #1
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff f932 	bl	80007f0 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff f92d 	bl	80007f0 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e228      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f1      	beq.n	8001592 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	22f8      	movs	r2, #248	; 0xf8
 80015b4:	4393      	bics	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00da      	lsls	r2, r3, #3
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	438a      	bics	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff f90d 	bl	80007f0 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff f908 	bl	80007f0 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e203      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1f1      	bne.n	80015dc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2208      	movs	r2, #8
 80015fe:	4013      	ands	r3, r2
 8001600:	d036      	beq.n	8001670 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800160c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001610:	2101      	movs	r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff f8eb 	bl	80007f0 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff f8e6 	bl	80007f0 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1e1      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d0f1      	beq.n	8001620 <HAL_RCC_OscConfig+0x248>
 800163c:	e018      	b.n	8001670 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001644:	2101      	movs	r1, #1
 8001646:	438a      	bics	r2, r1
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f8d1 	bl	80007f0 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f8cc 	bl	80007f0 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1c7      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d1f1      	bne.n	8001654 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d100      	bne.n	800167c <HAL_RCC_OscConfig+0x2a4>
 800167a:	e0b5      	b.n	80017e8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	231f      	movs	r3, #31
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	055b      	lsls	r3, r3, #21
 800168c:	4013      	ands	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0549      	lsls	r1, r1, #21
 800169a:	430a      	orrs	r2, r1
 800169c:	61da      	str	r2, [r3, #28]
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x334>)
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	055b      	lsls	r3, r3, #21
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ac:	231f      	movs	r3, #31
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	d11a      	bne.n	80016f6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0049      	lsls	r1, r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f88f 	bl	80007f0 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff f88a 	bl	80007f0 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e185      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10e      	bne.n	800171c <HAL_RCC_OscConfig+0x344>
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	4b02      	ldr	r3, [pc, #8]	; (800170c <HAL_RCC_OscConfig+0x334>)
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	621a      	str	r2, [r3, #32]
 800170a:	e035      	b.n	8001778 <HAL_RCC_OscConfig+0x3a0>
 800170c:	40021000 	.word	0x40021000
 8001710:	fffeffff 	.word	0xfffeffff
 8001714:	fffbffff 	.word	0xfffbffff
 8001718:	40007000 	.word	0x40007000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x366>
 8001724:	4bb6      	ldr	r3, [pc, #728]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001726:	6a1a      	ldr	r2, [r3, #32]
 8001728:	4bb5      	ldr	r3, [pc, #724]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	621a      	str	r2, [r3, #32]
 8001730:	4bb3      	ldr	r3, [pc, #716]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	4bb2      	ldr	r3, [pc, #712]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001736:	2104      	movs	r1, #4
 8001738:	438a      	bics	r2, r1
 800173a:	621a      	str	r2, [r3, #32]
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x3a0>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x388>
 8001746:	4bae      	ldr	r3, [pc, #696]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	4bad      	ldr	r3, [pc, #692]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800174c:	2104      	movs	r1, #4
 800174e:	430a      	orrs	r2, r1
 8001750:	621a      	str	r2, [r3, #32]
 8001752:	4bab      	ldr	r3, [pc, #684]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	4baa      	ldr	r3, [pc, #680]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001758:	2101      	movs	r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	621a      	str	r2, [r3, #32]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x3a0>
 8001760:	4ba7      	ldr	r3, [pc, #668]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	4ba6      	ldr	r3, [pc, #664]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001766:	2101      	movs	r1, #1
 8001768:	438a      	bics	r2, r1
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	4ba4      	ldr	r3, [pc, #656]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800176e:	6a1a      	ldr	r2, [r3, #32]
 8001770:	4ba3      	ldr	r3, [pc, #652]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001772:	2104      	movs	r1, #4
 8001774:	438a      	bics	r2, r1
 8001776:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d014      	beq.n	80017aa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff f836 	bl	80007f0 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	e009      	b.n	800179e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff f831 	bl	80007f0 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a9b      	ldr	r2, [pc, #620]	; (8001a04 <HAL_RCC_OscConfig+0x62c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e12b      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	4b98      	ldr	r3, [pc, #608]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x3b2>
 80017a8:	e013      	b.n	80017d2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f821 	bl	80007f0 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	e009      	b.n	80017c8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff f81c 	bl	80007f0 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	4a91      	ldr	r2, [pc, #580]	; (8001a04 <HAL_RCC_OscConfig+0x62c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e116      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	4b8d      	ldr	r3, [pc, #564]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	4b87      	ldr	r3, [pc, #540]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80017e2:	4989      	ldr	r1, [pc, #548]	; (8001a08 <HAL_RCC_OscConfig+0x630>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	4013      	ands	r3, r2
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d12a      	bne.n	8001850 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017fa:	4b81      	ldr	r3, [pc, #516]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80017fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fe:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001800:	2104      	movs	r1, #4
 8001802:	430a      	orrs	r2, r1
 8001804:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001806:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180a:	4b7d      	ldr	r3, [pc, #500]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7fe ffed 	bl	80007f0 <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800181c:	f7fe ffe8 	bl	80007f0 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0e3      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f1      	beq.n	800181c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001838:	4b71      	ldr	r3, [pc, #452]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	22f8      	movs	r2, #248	; 0xf8
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	00da      	lsls	r2, r3, #3
 8001848:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
 800184e:	e034      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	3305      	adds	r3, #5
 8001856:	d111      	bne.n	800187c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001858:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800185a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800185e:	2104      	movs	r1, #4
 8001860:	438a      	bics	r2, r1
 8001862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001864:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	22f8      	movs	r2, #248	; 0xf8
 800186a:	4393      	bics	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	00da      	lsls	r2, r3, #3
 8001874:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001876:	430a      	orrs	r2, r1
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
 800187a:	e01e      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800187c:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800187e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001880:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001882:	2104      	movs	r1, #4
 8001884:	430a      	orrs	r2, r1
 8001886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001888:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800188a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188c:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800188e:	2101      	movs	r1, #1
 8001890:	438a      	bics	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7fe ffac 	bl	80007f0 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800189e:	f7fe ffa7 	bl	80007f0 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0a2      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018b0:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f1      	bne.n	800189e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d100      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
 80018c2:	e097      	b.n	80019f4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	4b4e      	ldr	r3, [pc, #312]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	220c      	movs	r2, #12
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4fa>
 80018d0:	e06b      	b.n	80019aa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d14c      	bne.n	8001974 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80018e0:	494a      	ldr	r1, [pc, #296]	; (8001a0c <HAL_RCC_OscConfig+0x634>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7fe ff83 	bl	80007f0 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7fe ff7e 	bl	80007f0 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e079      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	049b      	lsls	r3, r3, #18
 800190a:	4013      	ands	r3, r2
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	220f      	movs	r2, #15
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800191e:	430a      	orrs	r2, r1
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0x638>)
 8001928:	4013      	ands	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	431a      	orrs	r2, r3
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0449      	lsls	r1, r1, #17
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7fe ff51 	bl	80007f0 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7fe ff4c 	bl	80007f0 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e047      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	4013      	ands	r3, r2
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x57c>
 8001972:	e03f      	b.n	80019f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800197a:	4924      	ldr	r1, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x634>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7fe ff36 	bl	80007f0 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198a:	f7fe ff31 	bl	80007f0 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e02c      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	049b      	lsls	r3, r3, #18
 80019a4:	4013      	ands	r3, r2
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x5b2>
 80019a8:	e024      	b.n	80019f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e01f      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	23c0      	movs	r3, #192	; 0xc0
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d10e      	bne.n	80019f0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	220f      	movs	r2, #15
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	23f0      	movs	r3, #240	; 0xf0
 80019e4:	039b      	lsls	r3, r3, #14
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b008      	add	sp, #32
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40021000 	.word	0x40021000
 8001a04:	00001388 	.word	0x00001388
 8001a08:	efffffff 	.word	0xefffffff
 8001a0c:	feffffff 	.word	0xfeffffff
 8001a10:	ffc27fff 	.word	0xffc27fff

08001a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0b3      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d911      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4393      	bics	r3, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e09a      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d015      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d006      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001a74:	21e0      	movs	r1, #224	; 0xe0
 8001a76:	00c9      	lsls	r1, r1, #3
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	22f0      	movs	r2, #240	; 0xf0
 8001a82:	4393      	bics	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	d040      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d114      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06e      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e062      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e05b      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	4393      	bics	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7fe fe80 	bl	80007f0 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7fe fe7b 	bl	80007f0 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <HAL_RCC_ClockConfig+0x18c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e042      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	401a      	ands	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1ec      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d211      	bcs.n	8001b4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x184>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e020      	b.n	8001b90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	4013      	ands	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_RCC_ClockConfig+0x190>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b6c:	f000 f820 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b70:	0001      	movs	r1, r0
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x188>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	220f      	movs	r2, #15
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x194>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	000a      	movs	r2, r1
 8001b82:	40da      	lsrs	r2, r3
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x198>)
 8001b86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7fe fdeb 	bl	8000764 <HAL_InitTick>
  
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	00001388 	.word	0x00001388
 8001ba4:	fffff8ff 	.word	0xfffff8ff
 8001ba8:	08002d9c 	.word	0x08002d9c
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b08f      	sub	sp, #60	; 0x3c
 8001bb4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bb6:	2314      	movs	r3, #20
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	4a2c      	ldr	r2, [pc, #176]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bca:	c313      	stmia	r3!, {r0, r1, r4}
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	220c      	movs	r2, #12
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d002      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x4a>
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d003      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x50>
 8001bf8:	e02f      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfe:	e02f      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	220f      	movs	r2, #15
 8001c06:	4013      	ands	r3, r2
 8001c08:	2214      	movs	r2, #20
 8001c0a:	18ba      	adds	r2, r7, r2
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	220f      	movs	r2, #15
 8001c16:	4013      	ands	r3, r2
 8001c18:	1d3a      	adds	r2, r7, #4
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	025b      	lsls	r3, r3, #9
 8001c24:	401a      	ands	r2, r3
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	025b      	lsls	r3, r3, #9
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c30:	4811      	ldr	r0, [pc, #68]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c32:	f7fe fa69 	bl	8000108 <__udivsi3>
 8001c36:	0003      	movs	r3, r0
 8001c38:	001a      	movs	r2, r3
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	4353      	muls	r3, r2
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c46:	f7fe fa5f 	bl	8000108 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	4353      	muls	r3, r2
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c58:	e002      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b00f      	add	sp, #60	; 0x3c
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	08002d7c 	.word	0x08002d7c
 8001c70:	08002d8c 	.word	0x08002d8c
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c94:	f7ff fff2 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c98:	0001      	movs	r1, r0
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d9      	lsrs	r1, r3
 8001caa:	000b      	movs	r3, r1
}    
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08002dac 	.word	0x08002dac

08001cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e044      	b.n	8001d58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2270      	movs	r2, #112	; 0x70
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe fc5f 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2224      	movs	r2, #36	; 0x24
 8001cea:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f8d8 	bl	8001eb4 <UART_SetConfig>
 8001d04:	0003      	movs	r3, r0
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e024      	b.n	8001d58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fa69 	bl	80021f0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	490d      	ldr	r1, [pc, #52]	; (8001d60 <HAL_UART_Init+0xa4>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2108      	movs	r1, #8
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 fb01 	bl	8002358 <UART_CheckIdleState>
 8001d56:	0003      	movs	r3, r0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	fffff7ff 	.word	0xfffff7ff

08001d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d000      	beq.n	8001d7e <HAL_UART_Transmit+0x1a>
 8001d7c:	e095      	b.n	8001eaa <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_UART_Transmit+0x28>
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e08d      	b.n	8001eac <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d109      	bne.n	8001db0 <HAL_UART_Transmit+0x4c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e07d      	b.n	8001eac <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2270      	movs	r2, #112	; 0x70
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Transmit+0x5a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e076      	b.n	8001eac <HAL_UART_Transmit+0x148>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2270      	movs	r2, #112	; 0x70
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2221      	movs	r2, #33	; 0x21
 8001dd0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fd0d 	bl	80007f0 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1dba      	adds	r2, r7, #6
 8001dde:	2150      	movs	r1, #80	; 0x50
 8001de0:	8812      	ldrh	r2, [r2, #0]
 8001de2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1dba      	adds	r2, r7, #6
 8001de8:	2152      	movs	r1, #82	; 0x52
 8001dea:	8812      	ldrh	r2, [r2, #0]
 8001dec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	015b      	lsls	r3, r3, #5
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d108      	bne.n	8001e0c <HAL_UART_Transmit+0xa8>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d104      	bne.n	8001e0c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	e003      	b.n	8001e14 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e14:	e02d      	b.n	8001e72 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	0013      	movs	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	f000 fade 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e03d      	b.n	8001eac <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	05d2      	lsls	r2, r2, #23
 8001e40:	0dd2      	lsrs	r2, r2, #23
 8001e42:	b292      	uxth	r2, r2
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e008      	b.n	8001e60 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b292      	uxth	r2, r2
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2252      	movs	r2, #82	; 0x52
 8001e64:	5a9b      	ldrh	r3, [r3, r2]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2252      	movs	r2, #82	; 0x52
 8001e70:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2252      	movs	r2, #82	; 0x52
 8001e76:	5a9b      	ldrh	r3, [r3, r2]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1cb      	bne.n	8001e16 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	0013      	movs	r3, r2
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	f000 faaa 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e009      	b.n	8001eac <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2270      	movs	r2, #112	; 0x70
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
  }
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b008      	add	sp, #32
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ec0:	2317      	movs	r3, #23
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4ab7      	ldr	r2, [pc, #732]	; (80021c4 <UART_SetConfig+0x310>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4ab2      	ldr	r2, [pc, #712]	; (80021c8 <UART_SetConfig+0x314>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4aa9      	ldr	r2, [pc, #676]	; (80021cc <UART_SetConfig+0x318>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4aa5      	ldr	r2, [pc, #660]	; (80021d0 <UART_SetConfig+0x31c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d125      	bne.n	8001f8a <UART_SetConfig+0xd6>
 8001f3e:	4ba5      	ldr	r3, [pc, #660]	; (80021d4 <UART_SetConfig+0x320>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	2203      	movs	r2, #3
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00f      	beq.n	8001f6a <UART_SetConfig+0xb6>
 8001f4a:	d304      	bcc.n	8001f56 <UART_SetConfig+0xa2>
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d011      	beq.n	8001f74 <UART_SetConfig+0xc0>
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d005      	beq.n	8001f60 <UART_SetConfig+0xac>
 8001f54:	e013      	b.n	8001f7e <UART_SetConfig+0xca>
 8001f56:	231f      	movs	r3, #31
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e036      	b.n	8001fce <UART_SetConfig+0x11a>
 8001f60:	231f      	movs	r3, #31
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2202      	movs	r2, #2
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e031      	b.n	8001fce <UART_SetConfig+0x11a>
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2204      	movs	r2, #4
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e02c      	b.n	8001fce <UART_SetConfig+0x11a>
 8001f74:	231f      	movs	r3, #31
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2208      	movs	r2, #8
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e027      	b.n	8001fce <UART_SetConfig+0x11a>
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2210      	movs	r2, #16
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	e021      	b.n	8001fce <UART_SetConfig+0x11a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <UART_SetConfig+0x324>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d104      	bne.n	8001f9e <UART_SetConfig+0xea>
 8001f94:	231f      	movs	r3, #31
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e017      	b.n	8001fce <UART_SetConfig+0x11a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a8e      	ldr	r2, [pc, #568]	; (80021dc <UART_SetConfig+0x328>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d104      	bne.n	8001fb2 <UART_SetConfig+0xfe>
 8001fa8:	231f      	movs	r3, #31
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e00d      	b.n	8001fce <UART_SetConfig+0x11a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a8a      	ldr	r2, [pc, #552]	; (80021e0 <UART_SetConfig+0x32c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d104      	bne.n	8001fc6 <UART_SetConfig+0x112>
 8001fbc:	231f      	movs	r3, #31
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e003      	b.n	8001fce <UART_SetConfig+0x11a>
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	2210      	movs	r2, #16
 8001fcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d000      	beq.n	8001fdc <UART_SetConfig+0x128>
 8001fda:	e07d      	b.n	80020d8 <UART_SetConfig+0x224>
  {
    switch (clocksource)
 8001fdc:	231f      	movs	r3, #31
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d01c      	beq.n	8002020 <UART_SetConfig+0x16c>
 8001fe6:	dc02      	bgt.n	8001fee <UART_SetConfig+0x13a>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <UART_SetConfig+0x144>
 8001fec:	e04b      	b.n	8002086 <UART_SetConfig+0x1d2>
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d025      	beq.n	800203e <UART_SetConfig+0x18a>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d037      	beq.n	8002066 <UART_SetConfig+0x1b2>
 8001ff6:	e046      	b.n	8002086 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f7ff fe4a 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	005a      	lsls	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	18d2      	adds	r2, r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	0019      	movs	r1, r3
 8002012:	0010      	movs	r0, r2
 8002014:	f7fe f878 	bl	8000108 <__udivsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	b29b      	uxth	r3, r3
 800201c:	61bb      	str	r3, [r7, #24]
        break;
 800201e:	e037      	b.n	8002090 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	4a6f      	ldr	r2, [pc, #444]	; (80021e4 <UART_SetConfig+0x330>)
 8002028:	189a      	adds	r2, r3, r2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f7fe f869 	bl	8000108 <__udivsi3>
 8002036:	0003      	movs	r3, r0
 8002038:	b29b      	uxth	r3, r3
 800203a:	61bb      	str	r3, [r7, #24]
        break;
 800203c:	e028      	b.n	8002090 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800203e:	f7ff fdb7 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8002042:	0003      	movs	r3, r0
 8002044:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	005a      	lsls	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	18d2      	adds	r2, r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0019      	movs	r1, r3
 8002058:	0010      	movs	r0, r2
 800205a:	f7fe f855 	bl	8000108 <__udivsi3>
 800205e:	0003      	movs	r3, r0
 8002060:	b29b      	uxth	r3, r3
 8002062:	61bb      	str	r3, [r7, #24]
        break;
 8002064:	e014      	b.n	8002090 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	0252      	lsls	r2, r2, #9
 8002070:	189a      	adds	r2, r3, r2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	0019      	movs	r1, r3
 8002078:	0010      	movs	r0, r2
 800207a:	f7fe f845 	bl	8000108 <__udivsi3>
 800207e:	0003      	movs	r3, r0
 8002080:	b29b      	uxth	r3, r3
 8002082:	61bb      	str	r3, [r7, #24]
        break;
 8002084:	e004      	b.n	8002090 <UART_SetConfig+0x1dc>
      default:
        ret = HAL_ERROR;
 8002086:	2317      	movs	r3, #23
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
        break;
 800208e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	d91b      	bls.n	80020ce <UART_SetConfig+0x21a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4a53      	ldr	r2, [pc, #332]	; (80021e8 <UART_SetConfig+0x334>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d817      	bhi.n	80020ce <UART_SetConfig+0x21a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	200a      	movs	r0, #10
 80020a4:	183b      	adds	r3, r7, r0
 80020a6:	210f      	movs	r1, #15
 80020a8:	438a      	bics	r2, r1
 80020aa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2207      	movs	r2, #7
 80020b4:	4013      	ands	r3, r2
 80020b6:	b299      	uxth	r1, r3
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	183a      	adds	r2, r7, r0
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	183a      	adds	r2, r7, r0
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	e06c      	b.n	80021a8 <UART_SetConfig+0x2f4>
    }
    else
    {
      ret = HAL_ERROR;
 80020ce:	2317      	movs	r3, #23
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e067      	b.n	80021a8 <UART_SetConfig+0x2f4>
    }
  }
  else
  {
    switch (clocksource)
 80020d8:	231f      	movs	r3, #31
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d01b      	beq.n	800211a <UART_SetConfig+0x266>
 80020e2:	dc02      	bgt.n	80020ea <UART_SetConfig+0x236>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <UART_SetConfig+0x240>
 80020e8:	e049      	b.n	800217e <UART_SetConfig+0x2ca>
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d024      	beq.n	8002138 <UART_SetConfig+0x284>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d035      	beq.n	800215e <UART_SetConfig+0x2aa>
 80020f2:	e044      	b.n	800217e <UART_SetConfig+0x2ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020f4:	f7ff fdcc 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 80020f8:	0003      	movs	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	085a      	lsrs	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	18d2      	adds	r2, r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0019      	movs	r1, r3
 800210c:	0010      	movs	r0, r2
 800210e:	f7fd fffb 	bl	8000108 <__udivsi3>
 8002112:	0003      	movs	r3, r0
 8002114:	b29b      	uxth	r3, r3
 8002116:	61bb      	str	r3, [r7, #24]
        break;
 8002118:	e036      	b.n	8002188 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	4a32      	ldr	r2, [pc, #200]	; (80021ec <UART_SetConfig+0x338>)
 8002122:	189a      	adds	r2, r3, r2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0019      	movs	r1, r3
 800212a:	0010      	movs	r0, r2
 800212c:	f7fd ffec 	bl	8000108 <__udivsi3>
 8002130:	0003      	movs	r3, r0
 8002132:	b29b      	uxth	r3, r3
 8002134:	61bb      	str	r3, [r7, #24]
        break;
 8002136:	e027      	b.n	8002188 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002138:	f7ff fd3a 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	085a      	lsrs	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	18d2      	adds	r2, r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f7fd ffd9 	bl	8000108 <__udivsi3>
 8002156:	0003      	movs	r3, r0
 8002158:	b29b      	uxth	r3, r3
 800215a:	61bb      	str	r3, [r7, #24]
        break;
 800215c:	e014      	b.n	8002188 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	0212      	lsls	r2, r2, #8
 8002168:	189a      	adds	r2, r3, r2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f7fd ffc9 	bl	8000108 <__udivsi3>
 8002176:	0003      	movs	r3, r0
 8002178:	b29b      	uxth	r3, r3
 800217a:	61bb      	str	r3, [r7, #24]
        break;
 800217c:	e004      	b.n	8002188 <UART_SetConfig+0x2d4>
      default:
        ret = HAL_ERROR;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
        break;
 8002186:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d908      	bls.n	80021a0 <UART_SetConfig+0x2ec>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <UART_SetConfig+0x334>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d804      	bhi.n	80021a0 <UART_SetConfig+0x2ec>
    {
      huart->Instance->BRR = usartdiv;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	e003      	b.n	80021a8 <UART_SetConfig+0x2f4>
    }
    else
    {
      ret = HAL_ERROR;
 80021a0:	2317      	movs	r3, #23
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80021b4:	2317      	movs	r3, #23
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b008      	add	sp, #32
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	efff69f3 	.word	0xefff69f3
 80021c8:	ffffcfff 	.word	0xffffcfff
 80021cc:	fffff4ff 	.word	0xfffff4ff
 80021d0:	40013800 	.word	0x40013800
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40004400 	.word	0x40004400
 80021dc:	40004800 	.word	0x40004800
 80021e0:	40004c00 	.word	0x40004c00
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	0000ffff 	.word	0x0000ffff
 80021ec:	007a1200 	.word	0x007a1200

080021f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	d00b      	beq.n	800221a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <UART_AdvFeatureConfig+0x144>)
 800220a:	4013      	ands	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d00b      	beq.n	800223c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a43      	ldr	r2, [pc, #268]	; (8002338 <UART_AdvFeatureConfig+0x148>)
 800222c:	4013      	ands	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2204      	movs	r2, #4
 8002242:	4013      	ands	r3, r2
 8002244:	d00b      	beq.n	800225e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a3b      	ldr	r2, [pc, #236]	; (800233c <UART_AdvFeatureConfig+0x14c>)
 800224e:	4013      	ands	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2208      	movs	r2, #8
 8002264:	4013      	ands	r3, r2
 8002266:	d00b      	beq.n	8002280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a34      	ldr	r2, [pc, #208]	; (8002340 <UART_AdvFeatureConfig+0x150>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2210      	movs	r2, #16
 8002286:	4013      	ands	r3, r2
 8002288:	d00b      	beq.n	80022a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <UART_AdvFeatureConfig+0x154>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2220      	movs	r2, #32
 80022a8:	4013      	ands	r3, r2
 80022aa:	d00b      	beq.n	80022c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4a25      	ldr	r2, [pc, #148]	; (8002348 <UART_AdvFeatureConfig+0x158>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	4013      	ands	r3, r2
 80022cc:	d01d      	beq.n	800230a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <UART_AdvFeatureConfig+0x15c>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	035b      	lsls	r3, r3, #13
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10b      	bne.n	800230a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a15      	ldr	r2, [pc, #84]	; (8002350 <UART_AdvFeatureConfig+0x160>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	4013      	ands	r3, r2
 8002312:	d00b      	beq.n	800232c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <UART_AdvFeatureConfig+0x164>)
 800231c:	4013      	ands	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
  }
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}
 8002334:	fffdffff 	.word	0xfffdffff
 8002338:	fffeffff 	.word	0xfffeffff
 800233c:	fffbffff 	.word	0xfffbffff
 8002340:	ffff7fff 	.word	0xffff7fff
 8002344:	ffffefff 	.word	0xffffefff
 8002348:	ffffdfff 	.word	0xffffdfff
 800234c:	ffefffff 	.word	0xffefffff
 8002350:	ff9fffff 	.word	0xff9fffff
 8002354:	fff7ffff 	.word	0xfff7ffff

08002358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002366:	f7fe fa43 	bl	80007f0 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2208      	movs	r2, #8
 8002376:	4013      	ands	r3, r2
 8002378:	2b08      	cmp	r3, #8
 800237a:	d10d      	bne.n	8002398 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	0399      	lsls	r1, r3, #14
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <UART_CheckIdleState+0x88>)
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	0013      	movs	r3, r2
 800238a:	2200      	movs	r2, #0
 800238c:	f000 f82a 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d001      	beq.n	8002398 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e01f      	b.n	80023d8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d10d      	bne.n	80023c2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	03d9      	lsls	r1, r3, #15
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <UART_CheckIdleState+0x88>)
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	0013      	movs	r3, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	f000 f815 	bl	80023e4 <UART_WaitOnFlagUntilTimeout>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d001      	beq.n	80023c2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e00a      	b.n	80023d8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2270      	movs	r2, #112	; 0x70
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b004      	add	sp, #16
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	01ffffff 	.word	0x01ffffff

080023e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f4:	e05d      	b.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d05a      	beq.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7fe f9f8 	bl	80007f0 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <UART_WaitOnFlagUntilTimeout+0x2e>
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11b      	bne.n	800244a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	492f      	ldr	r1, [pc, #188]	; (80024dc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800241e:	400a      	ands	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	438a      	bics	r2, r1
 8002430:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2270      	movs	r2, #112	; 0x70
 8002442:	2100      	movs	r1, #0
 8002444:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e043      	b.n	80024d2 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d02d      	beq.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	401a      	ands	r2, r3
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	429a      	cmp	r2, r3
 8002468:	d123      	bne.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4917      	ldr	r1, [pc, #92]	; (80024dc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2270      	movs	r2, #112	; 0x70
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e00f      	b.n	80024d2 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	425a      	negs	r2, r3
 80024c2:	4153      	adcs	r3, r2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	001a      	movs	r2, r3
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d092      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	fffffe5f 	.word	0xfffffe5f

080024e0 <__errno>:
 80024e0:	4b01      	ldr	r3, [pc, #4]	; (80024e8 <__errno+0x8>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	2000000c 	.word	0x2000000c

080024ec <__libc_init_array>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	2600      	movs	r6, #0
 80024f0:	4d0c      	ldr	r5, [pc, #48]	; (8002524 <__libc_init_array+0x38>)
 80024f2:	4c0d      	ldr	r4, [pc, #52]	; (8002528 <__libc_init_array+0x3c>)
 80024f4:	1b64      	subs	r4, r4, r5
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	42a6      	cmp	r6, r4
 80024fa:	d109      	bne.n	8002510 <__libc_init_array+0x24>
 80024fc:	2600      	movs	r6, #0
 80024fe:	f000 fc29 	bl	8002d54 <_init>
 8002502:	4d0a      	ldr	r5, [pc, #40]	; (800252c <__libc_init_array+0x40>)
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <__libc_init_array+0x44>)
 8002506:	1b64      	subs	r4, r4, r5
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	42a6      	cmp	r6, r4
 800250c:	d105      	bne.n	800251a <__libc_init_array+0x2e>
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	00b3      	lsls	r3, r6, #2
 8002512:	58eb      	ldr	r3, [r5, r3]
 8002514:	4798      	blx	r3
 8002516:	3601      	adds	r6, #1
 8002518:	e7ee      	b.n	80024f8 <__libc_init_array+0xc>
 800251a:	00b3      	lsls	r3, r6, #2
 800251c:	58eb      	ldr	r3, [r5, r3]
 800251e:	4798      	blx	r3
 8002520:	3601      	adds	r6, #1
 8002522:	e7f2      	b.n	800250a <__libc_init_array+0x1e>
 8002524:	08002de8 	.word	0x08002de8
 8002528:	08002de8 	.word	0x08002de8
 800252c:	08002de8 	.word	0x08002de8
 8002530:	08002dec 	.word	0x08002dec

08002534 <memset>:
 8002534:	0003      	movs	r3, r0
 8002536:	1812      	adds	r2, r2, r0
 8002538:	4293      	cmp	r3, r2
 800253a:	d100      	bne.n	800253e <memset+0xa>
 800253c:	4770      	bx	lr
 800253e:	7019      	strb	r1, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	e7f9      	b.n	8002538 <memset+0x4>

08002544 <siprintf>:
 8002544:	b40e      	push	{r1, r2, r3}
 8002546:	b500      	push	{lr}
 8002548:	490b      	ldr	r1, [pc, #44]	; (8002578 <siprintf+0x34>)
 800254a:	b09c      	sub	sp, #112	; 0x70
 800254c:	ab1d      	add	r3, sp, #116	; 0x74
 800254e:	9002      	str	r0, [sp, #8]
 8002550:	9006      	str	r0, [sp, #24]
 8002552:	9107      	str	r1, [sp, #28]
 8002554:	9104      	str	r1, [sp, #16]
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <siprintf+0x38>)
 8002558:	4909      	ldr	r1, [pc, #36]	; (8002580 <siprintf+0x3c>)
 800255a:	cb04      	ldmia	r3!, {r2}
 800255c:	9105      	str	r1, [sp, #20]
 800255e:	6800      	ldr	r0, [r0, #0]
 8002560:	a902      	add	r1, sp, #8
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	f000 f870 	bl	8002648 <_svfiprintf_r>
 8002568:	2300      	movs	r3, #0
 800256a:	9a02      	ldr	r2, [sp, #8]
 800256c:	7013      	strb	r3, [r2, #0]
 800256e:	b01c      	add	sp, #112	; 0x70
 8002570:	bc08      	pop	{r3}
 8002572:	b003      	add	sp, #12
 8002574:	4718      	bx	r3
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	7fffffff 	.word	0x7fffffff
 800257c:	2000000c 	.word	0x2000000c
 8002580:	ffff0208 	.word	0xffff0208

08002584 <__ssputs_r>:
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	688e      	ldr	r6, [r1, #8]
 8002588:	b085      	sub	sp, #20
 800258a:	0007      	movs	r7, r0
 800258c:	000c      	movs	r4, r1
 800258e:	9203      	str	r2, [sp, #12]
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	429e      	cmp	r6, r3
 8002594:	d83c      	bhi.n	8002610 <__ssputs_r+0x8c>
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	898a      	ldrh	r2, [r1, #12]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	421a      	tst	r2, r3
 800259e:	d034      	beq.n	800260a <__ssputs_r+0x86>
 80025a0:	2503      	movs	r5, #3
 80025a2:	6909      	ldr	r1, [r1, #16]
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	1a5b      	subs	r3, r3, r1
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	6963      	ldr	r3, [r4, #20]
 80025ac:	9802      	ldr	r0, [sp, #8]
 80025ae:	435d      	muls	r5, r3
 80025b0:	0feb      	lsrs	r3, r5, #31
 80025b2:	195d      	adds	r5, r3, r5
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	106d      	asrs	r5, r5, #1
 80025b8:	3301      	adds	r3, #1
 80025ba:	181b      	adds	r3, r3, r0
 80025bc:	42ab      	cmp	r3, r5
 80025be:	d900      	bls.n	80025c2 <__ssputs_r+0x3e>
 80025c0:	001d      	movs	r5, r3
 80025c2:	0553      	lsls	r3, r2, #21
 80025c4:	d532      	bpl.n	800262c <__ssputs_r+0xa8>
 80025c6:	0029      	movs	r1, r5
 80025c8:	0038      	movs	r0, r7
 80025ca:	f000 fb23 	bl	8002c14 <_malloc_r>
 80025ce:	1e06      	subs	r6, r0, #0
 80025d0:	d109      	bne.n	80025e6 <__ssputs_r+0x62>
 80025d2:	230c      	movs	r3, #12
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	2340      	movs	r3, #64	; 0x40
 80025d8:	2001      	movs	r0, #1
 80025da:	89a2      	ldrh	r2, [r4, #12]
 80025dc:	4240      	negs	r0, r0
 80025de:	4313      	orrs	r3, r2
 80025e0:	81a3      	strh	r3, [r4, #12]
 80025e2:	b005      	add	sp, #20
 80025e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e6:	9a02      	ldr	r2, [sp, #8]
 80025e8:	6921      	ldr	r1, [r4, #16]
 80025ea:	f000 faac 	bl	8002b46 <memcpy>
 80025ee:	89a3      	ldrh	r3, [r4, #12]
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <__ssputs_r+0xc0>)
 80025f2:	401a      	ands	r2, r3
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	4313      	orrs	r3, r2
 80025f8:	81a3      	strh	r3, [r4, #12]
 80025fa:	9b02      	ldr	r3, [sp, #8]
 80025fc:	6126      	str	r6, [r4, #16]
 80025fe:	18f6      	adds	r6, r6, r3
 8002600:	6026      	str	r6, [r4, #0]
 8002602:	6165      	str	r5, [r4, #20]
 8002604:	9e01      	ldr	r6, [sp, #4]
 8002606:	1aed      	subs	r5, r5, r3
 8002608:	60a5      	str	r5, [r4, #8]
 800260a:	9b01      	ldr	r3, [sp, #4]
 800260c:	429e      	cmp	r6, r3
 800260e:	d900      	bls.n	8002612 <__ssputs_r+0x8e>
 8002610:	9e01      	ldr	r6, [sp, #4]
 8002612:	0032      	movs	r2, r6
 8002614:	9903      	ldr	r1, [sp, #12]
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f000 fa9e 	bl	8002b58 <memmove>
 800261c:	68a3      	ldr	r3, [r4, #8]
 800261e:	2000      	movs	r0, #0
 8002620:	1b9b      	subs	r3, r3, r6
 8002622:	60a3      	str	r3, [r4, #8]
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	199e      	adds	r6, r3, r6
 8002628:	6026      	str	r6, [r4, #0]
 800262a:	e7da      	b.n	80025e2 <__ssputs_r+0x5e>
 800262c:	002a      	movs	r2, r5
 800262e:	0038      	movs	r0, r7
 8002630:	f000 fb4e 	bl	8002cd0 <_realloc_r>
 8002634:	1e06      	subs	r6, r0, #0
 8002636:	d1e0      	bne.n	80025fa <__ssputs_r+0x76>
 8002638:	6921      	ldr	r1, [r4, #16]
 800263a:	0038      	movs	r0, r7
 800263c:	f000 faa0 	bl	8002b80 <_free_r>
 8002640:	e7c7      	b.n	80025d2 <__ssputs_r+0x4e>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	fffffb7f 	.word	0xfffffb7f

08002648 <_svfiprintf_r>:
 8002648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264a:	b0a1      	sub	sp, #132	; 0x84
 800264c:	9003      	str	r0, [sp, #12]
 800264e:	001d      	movs	r5, r3
 8002650:	898b      	ldrh	r3, [r1, #12]
 8002652:	000f      	movs	r7, r1
 8002654:	0016      	movs	r6, r2
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	d511      	bpl.n	800267e <_svfiprintf_r+0x36>
 800265a:	690b      	ldr	r3, [r1, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10e      	bne.n	800267e <_svfiprintf_r+0x36>
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	f000 fad7 	bl	8002c14 <_malloc_r>
 8002666:	6038      	str	r0, [r7, #0]
 8002668:	6138      	str	r0, [r7, #16]
 800266a:	2800      	cmp	r0, #0
 800266c:	d105      	bne.n	800267a <_svfiprintf_r+0x32>
 800266e:	230c      	movs	r3, #12
 8002670:	9a03      	ldr	r2, [sp, #12]
 8002672:	3801      	subs	r0, #1
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	b021      	add	sp, #132	; 0x84
 8002678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	2300      	movs	r3, #0
 8002680:	ac08      	add	r4, sp, #32
 8002682:	6163      	str	r3, [r4, #20]
 8002684:	3320      	adds	r3, #32
 8002686:	7663      	strb	r3, [r4, #25]
 8002688:	3310      	adds	r3, #16
 800268a:	76a3      	strb	r3, [r4, #26]
 800268c:	9507      	str	r5, [sp, #28]
 800268e:	0035      	movs	r5, r6
 8002690:	782b      	ldrb	r3, [r5, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <_svfiprintf_r+0x52>
 8002696:	2b25      	cmp	r3, #37	; 0x25
 8002698:	d146      	bne.n	8002728 <_svfiprintf_r+0xe0>
 800269a:	1bab      	subs	r3, r5, r6
 800269c:	9305      	str	r3, [sp, #20]
 800269e:	d00c      	beq.n	80026ba <_svfiprintf_r+0x72>
 80026a0:	0032      	movs	r2, r6
 80026a2:	0039      	movs	r1, r7
 80026a4:	9803      	ldr	r0, [sp, #12]
 80026a6:	f7ff ff6d 	bl	8002584 <__ssputs_r>
 80026aa:	1c43      	adds	r3, r0, #1
 80026ac:	d100      	bne.n	80026b0 <_svfiprintf_r+0x68>
 80026ae:	e0ae      	b.n	800280e <_svfiprintf_r+0x1c6>
 80026b0:	6962      	ldr	r2, [r4, #20]
 80026b2:	9b05      	ldr	r3, [sp, #20]
 80026b4:	4694      	mov	ip, r2
 80026b6:	4463      	add	r3, ip
 80026b8:	6163      	str	r3, [r4, #20]
 80026ba:	782b      	ldrb	r3, [r5, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <_svfiprintf_r+0x7a>
 80026c0:	e0a5      	b.n	800280e <_svfiprintf_r+0x1c6>
 80026c2:	2201      	movs	r2, #1
 80026c4:	2300      	movs	r3, #0
 80026c6:	4252      	negs	r2, r2
 80026c8:	6062      	str	r2, [r4, #4]
 80026ca:	a904      	add	r1, sp, #16
 80026cc:	3254      	adds	r2, #84	; 0x54
 80026ce:	1852      	adds	r2, r2, r1
 80026d0:	1c6e      	adds	r6, r5, #1
 80026d2:	6023      	str	r3, [r4, #0]
 80026d4:	60e3      	str	r3, [r4, #12]
 80026d6:	60a3      	str	r3, [r4, #8]
 80026d8:	7013      	strb	r3, [r2, #0]
 80026da:	65a3      	str	r3, [r4, #88]	; 0x58
 80026dc:	7831      	ldrb	r1, [r6, #0]
 80026de:	2205      	movs	r2, #5
 80026e0:	4853      	ldr	r0, [pc, #332]	; (8002830 <_svfiprintf_r+0x1e8>)
 80026e2:	f000 fa25 	bl	8002b30 <memchr>
 80026e6:	1c75      	adds	r5, r6, #1
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d11f      	bne.n	800272c <_svfiprintf_r+0xe4>
 80026ec:	6822      	ldr	r2, [r4, #0]
 80026ee:	06d3      	lsls	r3, r2, #27
 80026f0:	d504      	bpl.n	80026fc <_svfiprintf_r+0xb4>
 80026f2:	2353      	movs	r3, #83	; 0x53
 80026f4:	a904      	add	r1, sp, #16
 80026f6:	185b      	adds	r3, r3, r1
 80026f8:	2120      	movs	r1, #32
 80026fa:	7019      	strb	r1, [r3, #0]
 80026fc:	0713      	lsls	r3, r2, #28
 80026fe:	d504      	bpl.n	800270a <_svfiprintf_r+0xc2>
 8002700:	2353      	movs	r3, #83	; 0x53
 8002702:	a904      	add	r1, sp, #16
 8002704:	185b      	adds	r3, r3, r1
 8002706:	212b      	movs	r1, #43	; 0x2b
 8002708:	7019      	strb	r1, [r3, #0]
 800270a:	7833      	ldrb	r3, [r6, #0]
 800270c:	2b2a      	cmp	r3, #42	; 0x2a
 800270e:	d016      	beq.n	800273e <_svfiprintf_r+0xf6>
 8002710:	0035      	movs	r5, r6
 8002712:	2100      	movs	r1, #0
 8002714:	200a      	movs	r0, #10
 8002716:	68e3      	ldr	r3, [r4, #12]
 8002718:	782a      	ldrb	r2, [r5, #0]
 800271a:	1c6e      	adds	r6, r5, #1
 800271c:	3a30      	subs	r2, #48	; 0x30
 800271e:	2a09      	cmp	r2, #9
 8002720:	d94e      	bls.n	80027c0 <_svfiprintf_r+0x178>
 8002722:	2900      	cmp	r1, #0
 8002724:	d018      	beq.n	8002758 <_svfiprintf_r+0x110>
 8002726:	e010      	b.n	800274a <_svfiprintf_r+0x102>
 8002728:	3501      	adds	r5, #1
 800272a:	e7b1      	b.n	8002690 <_svfiprintf_r+0x48>
 800272c:	4b40      	ldr	r3, [pc, #256]	; (8002830 <_svfiprintf_r+0x1e8>)
 800272e:	6822      	ldr	r2, [r4, #0]
 8002730:	1ac0      	subs	r0, r0, r3
 8002732:	2301      	movs	r3, #1
 8002734:	4083      	lsls	r3, r0
 8002736:	4313      	orrs	r3, r2
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	002e      	movs	r6, r5
 800273c:	e7ce      	b.n	80026dc <_svfiprintf_r+0x94>
 800273e:	9b07      	ldr	r3, [sp, #28]
 8002740:	1d19      	adds	r1, r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	9107      	str	r1, [sp, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db01      	blt.n	800274e <_svfiprintf_r+0x106>
 800274a:	930b      	str	r3, [sp, #44]	; 0x2c
 800274c:	e004      	b.n	8002758 <_svfiprintf_r+0x110>
 800274e:	425b      	negs	r3, r3
 8002750:	60e3      	str	r3, [r4, #12]
 8002752:	2302      	movs	r3, #2
 8002754:	4313      	orrs	r3, r2
 8002756:	6023      	str	r3, [r4, #0]
 8002758:	782b      	ldrb	r3, [r5, #0]
 800275a:	2b2e      	cmp	r3, #46	; 0x2e
 800275c:	d10a      	bne.n	8002774 <_svfiprintf_r+0x12c>
 800275e:	786b      	ldrb	r3, [r5, #1]
 8002760:	2b2a      	cmp	r3, #42	; 0x2a
 8002762:	d135      	bne.n	80027d0 <_svfiprintf_r+0x188>
 8002764:	9b07      	ldr	r3, [sp, #28]
 8002766:	3502      	adds	r5, #2
 8002768:	1d1a      	adds	r2, r3, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	9207      	str	r2, [sp, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db2b      	blt.n	80027ca <_svfiprintf_r+0x182>
 8002772:	9309      	str	r3, [sp, #36]	; 0x24
 8002774:	4e2f      	ldr	r6, [pc, #188]	; (8002834 <_svfiprintf_r+0x1ec>)
 8002776:	7829      	ldrb	r1, [r5, #0]
 8002778:	2203      	movs	r2, #3
 800277a:	0030      	movs	r0, r6
 800277c:	f000 f9d8 	bl	8002b30 <memchr>
 8002780:	2800      	cmp	r0, #0
 8002782:	d006      	beq.n	8002792 <_svfiprintf_r+0x14a>
 8002784:	2340      	movs	r3, #64	; 0x40
 8002786:	1b80      	subs	r0, r0, r6
 8002788:	4083      	lsls	r3, r0
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	3501      	adds	r5, #1
 800278e:	4313      	orrs	r3, r2
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	7829      	ldrb	r1, [r5, #0]
 8002794:	2206      	movs	r2, #6
 8002796:	4828      	ldr	r0, [pc, #160]	; (8002838 <_svfiprintf_r+0x1f0>)
 8002798:	1c6e      	adds	r6, r5, #1
 800279a:	7621      	strb	r1, [r4, #24]
 800279c:	f000 f9c8 	bl	8002b30 <memchr>
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d03c      	beq.n	800281e <_svfiprintf_r+0x1d6>
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <_svfiprintf_r+0x1f4>)
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d125      	bne.n	80027f6 <_svfiprintf_r+0x1ae>
 80027aa:	2207      	movs	r2, #7
 80027ac:	9b07      	ldr	r3, [sp, #28]
 80027ae:	3307      	adds	r3, #7
 80027b0:	4393      	bics	r3, r2
 80027b2:	3308      	adds	r3, #8
 80027b4:	9307      	str	r3, [sp, #28]
 80027b6:	6963      	ldr	r3, [r4, #20]
 80027b8:	9a04      	ldr	r2, [sp, #16]
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	6163      	str	r3, [r4, #20]
 80027be:	e766      	b.n	800268e <_svfiprintf_r+0x46>
 80027c0:	4343      	muls	r3, r0
 80027c2:	2101      	movs	r1, #1
 80027c4:	189b      	adds	r3, r3, r2
 80027c6:	0035      	movs	r5, r6
 80027c8:	e7a6      	b.n	8002718 <_svfiprintf_r+0xd0>
 80027ca:	2301      	movs	r3, #1
 80027cc:	425b      	negs	r3, r3
 80027ce:	e7d0      	b.n	8002772 <_svfiprintf_r+0x12a>
 80027d0:	2300      	movs	r3, #0
 80027d2:	200a      	movs	r0, #10
 80027d4:	001a      	movs	r2, r3
 80027d6:	3501      	adds	r5, #1
 80027d8:	6063      	str	r3, [r4, #4]
 80027da:	7829      	ldrb	r1, [r5, #0]
 80027dc:	1c6e      	adds	r6, r5, #1
 80027de:	3930      	subs	r1, #48	; 0x30
 80027e0:	2909      	cmp	r1, #9
 80027e2:	d903      	bls.n	80027ec <_svfiprintf_r+0x1a4>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0c5      	beq.n	8002774 <_svfiprintf_r+0x12c>
 80027e8:	9209      	str	r2, [sp, #36]	; 0x24
 80027ea:	e7c3      	b.n	8002774 <_svfiprintf_r+0x12c>
 80027ec:	4342      	muls	r2, r0
 80027ee:	2301      	movs	r3, #1
 80027f0:	1852      	adds	r2, r2, r1
 80027f2:	0035      	movs	r5, r6
 80027f4:	e7f1      	b.n	80027da <_svfiprintf_r+0x192>
 80027f6:	ab07      	add	r3, sp, #28
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	003a      	movs	r2, r7
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_svfiprintf_r+0x1f8>)
 80027fe:	0021      	movs	r1, r4
 8002800:	9803      	ldr	r0, [sp, #12]
 8002802:	e000      	b.n	8002806 <_svfiprintf_r+0x1be>
 8002804:	bf00      	nop
 8002806:	9004      	str	r0, [sp, #16]
 8002808:	9b04      	ldr	r3, [sp, #16]
 800280a:	3301      	adds	r3, #1
 800280c:	d1d3      	bne.n	80027b6 <_svfiprintf_r+0x16e>
 800280e:	89bb      	ldrh	r3, [r7, #12]
 8002810:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002812:	065b      	lsls	r3, r3, #25
 8002814:	d400      	bmi.n	8002818 <_svfiprintf_r+0x1d0>
 8002816:	e72e      	b.n	8002676 <_svfiprintf_r+0x2e>
 8002818:	2001      	movs	r0, #1
 800281a:	4240      	negs	r0, r0
 800281c:	e72b      	b.n	8002676 <_svfiprintf_r+0x2e>
 800281e:	ab07      	add	r3, sp, #28
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	003a      	movs	r2, r7
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <_svfiprintf_r+0x1f8>)
 8002826:	0021      	movs	r1, r4
 8002828:	9803      	ldr	r0, [sp, #12]
 800282a:	f000 f879 	bl	8002920 <_printf_i>
 800282e:	e7ea      	b.n	8002806 <_svfiprintf_r+0x1be>
 8002830:	08002db4 	.word	0x08002db4
 8002834:	08002dba 	.word	0x08002dba
 8002838:	08002dbe 	.word	0x08002dbe
 800283c:	00000000 	.word	0x00000000
 8002840:	08002585 	.word	0x08002585

08002844 <_printf_common>:
 8002844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002846:	0015      	movs	r5, r2
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	688a      	ldr	r2, [r1, #8]
 800284c:	690b      	ldr	r3, [r1, #16]
 800284e:	9000      	str	r0, [sp, #0]
 8002850:	000c      	movs	r4, r1
 8002852:	4293      	cmp	r3, r2
 8002854:	da00      	bge.n	8002858 <_printf_common+0x14>
 8002856:	0013      	movs	r3, r2
 8002858:	0022      	movs	r2, r4
 800285a:	602b      	str	r3, [r5, #0]
 800285c:	3243      	adds	r2, #67	; 0x43
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	2a00      	cmp	r2, #0
 8002862:	d001      	beq.n	8002868 <_printf_common+0x24>
 8002864:	3301      	adds	r3, #1
 8002866:	602b      	str	r3, [r5, #0]
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	d502      	bpl.n	8002874 <_printf_common+0x30>
 800286e:	682b      	ldr	r3, [r5, #0]
 8002870:	3302      	adds	r3, #2
 8002872:	602b      	str	r3, [r5, #0]
 8002874:	2706      	movs	r7, #6
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	401f      	ands	r7, r3
 800287a:	d027      	beq.n	80028cc <_printf_common+0x88>
 800287c:	0023      	movs	r3, r4
 800287e:	3343      	adds	r3, #67	; 0x43
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	4193      	sbcs	r3, r2
 8002886:	6822      	ldr	r2, [r4, #0]
 8002888:	0692      	lsls	r2, r2, #26
 800288a:	d430      	bmi.n	80028ee <_printf_common+0xaa>
 800288c:	0022      	movs	r2, r4
 800288e:	9901      	ldr	r1, [sp, #4]
 8002890:	3243      	adds	r2, #67	; 0x43
 8002892:	9800      	ldr	r0, [sp, #0]
 8002894:	9e08      	ldr	r6, [sp, #32]
 8002896:	47b0      	blx	r6
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d025      	beq.n	80028e8 <_printf_common+0xa4>
 800289c:	2306      	movs	r3, #6
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	682a      	ldr	r2, [r5, #0]
 80028a2:	68e1      	ldr	r1, [r4, #12]
 80028a4:	4003      	ands	r3, r0
 80028a6:	2500      	movs	r5, #0
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d103      	bne.n	80028b4 <_printf_common+0x70>
 80028ac:	1a8d      	subs	r5, r1, r2
 80028ae:	43eb      	mvns	r3, r5
 80028b0:	17db      	asrs	r3, r3, #31
 80028b2:	401d      	ands	r5, r3
 80028b4:	68a3      	ldr	r3, [r4, #8]
 80028b6:	6922      	ldr	r2, [r4, #16]
 80028b8:	4293      	cmp	r3, r2
 80028ba:	dd01      	ble.n	80028c0 <_printf_common+0x7c>
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	18ed      	adds	r5, r5, r3
 80028c0:	2700      	movs	r7, #0
 80028c2:	42bd      	cmp	r5, r7
 80028c4:	d120      	bne.n	8002908 <_printf_common+0xc4>
 80028c6:	2000      	movs	r0, #0
 80028c8:	e010      	b.n	80028ec <_printf_common+0xa8>
 80028ca:	3701      	adds	r7, #1
 80028cc:	68e3      	ldr	r3, [r4, #12]
 80028ce:	682a      	ldr	r2, [r5, #0]
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	42bb      	cmp	r3, r7
 80028d4:	ddd2      	ble.n	800287c <_printf_common+0x38>
 80028d6:	0022      	movs	r2, r4
 80028d8:	2301      	movs	r3, #1
 80028da:	3219      	adds	r2, #25
 80028dc:	9901      	ldr	r1, [sp, #4]
 80028de:	9800      	ldr	r0, [sp, #0]
 80028e0:	9e08      	ldr	r6, [sp, #32]
 80028e2:	47b0      	blx	r6
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d1f0      	bne.n	80028ca <_printf_common+0x86>
 80028e8:	2001      	movs	r0, #1
 80028ea:	4240      	negs	r0, r0
 80028ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028ee:	2030      	movs	r0, #48	; 0x30
 80028f0:	18e1      	adds	r1, r4, r3
 80028f2:	3143      	adds	r1, #67	; 0x43
 80028f4:	7008      	strb	r0, [r1, #0]
 80028f6:	0021      	movs	r1, r4
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	3145      	adds	r1, #69	; 0x45
 80028fc:	7809      	ldrb	r1, [r1, #0]
 80028fe:	18a2      	adds	r2, r4, r2
 8002900:	3243      	adds	r2, #67	; 0x43
 8002902:	3302      	adds	r3, #2
 8002904:	7011      	strb	r1, [r2, #0]
 8002906:	e7c1      	b.n	800288c <_printf_common+0x48>
 8002908:	0022      	movs	r2, r4
 800290a:	2301      	movs	r3, #1
 800290c:	321a      	adds	r2, #26
 800290e:	9901      	ldr	r1, [sp, #4]
 8002910:	9800      	ldr	r0, [sp, #0]
 8002912:	9e08      	ldr	r6, [sp, #32]
 8002914:	47b0      	blx	r6
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	d0e6      	beq.n	80028e8 <_printf_common+0xa4>
 800291a:	3701      	adds	r7, #1
 800291c:	e7d1      	b.n	80028c2 <_printf_common+0x7e>
	...

08002920 <_printf_i>:
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	9204      	str	r2, [sp, #16]
 8002926:	000a      	movs	r2, r1
 8002928:	3243      	adds	r2, #67	; 0x43
 800292a:	9305      	str	r3, [sp, #20]
 800292c:	9003      	str	r0, [sp, #12]
 800292e:	9202      	str	r2, [sp, #8]
 8002930:	7e0a      	ldrb	r2, [r1, #24]
 8002932:	000c      	movs	r4, r1
 8002934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002936:	2a6e      	cmp	r2, #110	; 0x6e
 8002938:	d100      	bne.n	800293c <_printf_i+0x1c>
 800293a:	e086      	b.n	8002a4a <_printf_i+0x12a>
 800293c:	d81f      	bhi.n	800297e <_printf_i+0x5e>
 800293e:	2a63      	cmp	r2, #99	; 0x63
 8002940:	d033      	beq.n	80029aa <_printf_i+0x8a>
 8002942:	d808      	bhi.n	8002956 <_printf_i+0x36>
 8002944:	2a00      	cmp	r2, #0
 8002946:	d100      	bne.n	800294a <_printf_i+0x2a>
 8002948:	e08c      	b.n	8002a64 <_printf_i+0x144>
 800294a:	2a58      	cmp	r2, #88	; 0x58
 800294c:	d04d      	beq.n	80029ea <_printf_i+0xca>
 800294e:	0025      	movs	r5, r4
 8002950:	3542      	adds	r5, #66	; 0x42
 8002952:	702a      	strb	r2, [r5, #0]
 8002954:	e030      	b.n	80029b8 <_printf_i+0x98>
 8002956:	2a64      	cmp	r2, #100	; 0x64
 8002958:	d001      	beq.n	800295e <_printf_i+0x3e>
 800295a:	2a69      	cmp	r2, #105	; 0x69
 800295c:	d1f7      	bne.n	800294e <_printf_i+0x2e>
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	6825      	ldr	r5, [r4, #0]
 8002962:	1d0a      	adds	r2, r1, #4
 8002964:	0628      	lsls	r0, r5, #24
 8002966:	d529      	bpl.n	80029bc <_printf_i+0x9c>
 8002968:	6808      	ldr	r0, [r1, #0]
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	2800      	cmp	r0, #0
 800296e:	da03      	bge.n	8002978 <_printf_i+0x58>
 8002970:	232d      	movs	r3, #45	; 0x2d
 8002972:	9a02      	ldr	r2, [sp, #8]
 8002974:	4240      	negs	r0, r0
 8002976:	7013      	strb	r3, [r2, #0]
 8002978:	4e6b      	ldr	r6, [pc, #428]	; (8002b28 <_printf_i+0x208>)
 800297a:	270a      	movs	r7, #10
 800297c:	e04f      	b.n	8002a1e <_printf_i+0xfe>
 800297e:	2a73      	cmp	r2, #115	; 0x73
 8002980:	d074      	beq.n	8002a6c <_printf_i+0x14c>
 8002982:	d808      	bhi.n	8002996 <_printf_i+0x76>
 8002984:	2a6f      	cmp	r2, #111	; 0x6f
 8002986:	d01f      	beq.n	80029c8 <_printf_i+0xa8>
 8002988:	2a70      	cmp	r2, #112	; 0x70
 800298a:	d1e0      	bne.n	800294e <_printf_i+0x2e>
 800298c:	2220      	movs	r2, #32
 800298e:	6809      	ldr	r1, [r1, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	6022      	str	r2, [r4, #0]
 8002994:	e003      	b.n	800299e <_printf_i+0x7e>
 8002996:	2a75      	cmp	r2, #117	; 0x75
 8002998:	d016      	beq.n	80029c8 <_printf_i+0xa8>
 800299a:	2a78      	cmp	r2, #120	; 0x78
 800299c:	d1d7      	bne.n	800294e <_printf_i+0x2e>
 800299e:	0022      	movs	r2, r4
 80029a0:	2178      	movs	r1, #120	; 0x78
 80029a2:	3245      	adds	r2, #69	; 0x45
 80029a4:	7011      	strb	r1, [r2, #0]
 80029a6:	4e61      	ldr	r6, [pc, #388]	; (8002b2c <_printf_i+0x20c>)
 80029a8:	e022      	b.n	80029f0 <_printf_i+0xd0>
 80029aa:	0025      	movs	r5, r4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	3542      	adds	r5, #66	; 0x42
 80029b0:	1d11      	adds	r1, r2, #4
 80029b2:	6019      	str	r1, [r3, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	702b      	strb	r3, [r5, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	e065      	b.n	8002a88 <_printf_i+0x168>
 80029bc:	6808      	ldr	r0, [r1, #0]
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	0669      	lsls	r1, r5, #25
 80029c2:	d5d3      	bpl.n	800296c <_printf_i+0x4c>
 80029c4:	b200      	sxth	r0, r0
 80029c6:	e7d1      	b.n	800296c <_printf_i+0x4c>
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	6825      	ldr	r5, [r4, #0]
 80029cc:	1d08      	adds	r0, r1, #4
 80029ce:	6018      	str	r0, [r3, #0]
 80029d0:	6808      	ldr	r0, [r1, #0]
 80029d2:	062e      	lsls	r6, r5, #24
 80029d4:	d505      	bpl.n	80029e2 <_printf_i+0xc2>
 80029d6:	4e54      	ldr	r6, [pc, #336]	; (8002b28 <_printf_i+0x208>)
 80029d8:	2708      	movs	r7, #8
 80029da:	2a6f      	cmp	r2, #111	; 0x6f
 80029dc:	d01b      	beq.n	8002a16 <_printf_i+0xf6>
 80029de:	270a      	movs	r7, #10
 80029e0:	e019      	b.n	8002a16 <_printf_i+0xf6>
 80029e2:	066d      	lsls	r5, r5, #25
 80029e4:	d5f7      	bpl.n	80029d6 <_printf_i+0xb6>
 80029e6:	b280      	uxth	r0, r0
 80029e8:	e7f5      	b.n	80029d6 <_printf_i+0xb6>
 80029ea:	3145      	adds	r1, #69	; 0x45
 80029ec:	4e4e      	ldr	r6, [pc, #312]	; (8002b28 <_printf_i+0x208>)
 80029ee:	700a      	strb	r2, [r1, #0]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	6822      	ldr	r2, [r4, #0]
 80029f4:	1d01      	adds	r1, r0, #4
 80029f6:	6800      	ldr	r0, [r0, #0]
 80029f8:	6019      	str	r1, [r3, #0]
 80029fa:	0615      	lsls	r5, r2, #24
 80029fc:	d521      	bpl.n	8002a42 <_printf_i+0x122>
 80029fe:	07d3      	lsls	r3, r2, #31
 8002a00:	d502      	bpl.n	8002a08 <_printf_i+0xe8>
 8002a02:	2320      	movs	r3, #32
 8002a04:	431a      	orrs	r2, r3
 8002a06:	6022      	str	r2, [r4, #0]
 8002a08:	2710      	movs	r7, #16
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d103      	bne.n	8002a16 <_printf_i+0xf6>
 8002a0e:	2320      	movs	r3, #32
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	439a      	bics	r2, r3
 8002a14:	6022      	str	r2, [r4, #0]
 8002a16:	0023      	movs	r3, r4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	3343      	adds	r3, #67	; 0x43
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	60a3      	str	r3, [r4, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db58      	blt.n	8002ad8 <_printf_i+0x1b8>
 8002a26:	2204      	movs	r2, #4
 8002a28:	6821      	ldr	r1, [r4, #0]
 8002a2a:	4391      	bics	r1, r2
 8002a2c:	6021      	str	r1, [r4, #0]
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d154      	bne.n	8002adc <_printf_i+0x1bc>
 8002a32:	9d02      	ldr	r5, [sp, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05a      	beq.n	8002aee <_printf_i+0x1ce>
 8002a38:	0025      	movs	r5, r4
 8002a3a:	7833      	ldrb	r3, [r6, #0]
 8002a3c:	3542      	adds	r5, #66	; 0x42
 8002a3e:	702b      	strb	r3, [r5, #0]
 8002a40:	e055      	b.n	8002aee <_printf_i+0x1ce>
 8002a42:	0655      	lsls	r5, r2, #25
 8002a44:	d5db      	bpl.n	80029fe <_printf_i+0xde>
 8002a46:	b280      	uxth	r0, r0
 8002a48:	e7d9      	b.n	80029fe <_printf_i+0xde>
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	680d      	ldr	r5, [r1, #0]
 8002a4e:	1d10      	adds	r0, r2, #4
 8002a50:	6949      	ldr	r1, [r1, #20]
 8002a52:	6018      	str	r0, [r3, #0]
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	062e      	lsls	r6, r5, #24
 8002a58:	d501      	bpl.n	8002a5e <_printf_i+0x13e>
 8002a5a:	6019      	str	r1, [r3, #0]
 8002a5c:	e002      	b.n	8002a64 <_printf_i+0x144>
 8002a5e:	066d      	lsls	r5, r5, #25
 8002a60:	d5fb      	bpl.n	8002a5a <_printf_i+0x13a>
 8002a62:	8019      	strh	r1, [r3, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9d02      	ldr	r5, [sp, #8]
 8002a68:	6123      	str	r3, [r4, #16]
 8002a6a:	e04f      	b.n	8002b0c <_printf_i+0x1ec>
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	1d11      	adds	r1, r2, #4
 8002a70:	6019      	str	r1, [r3, #0]
 8002a72:	6815      	ldr	r5, [r2, #0]
 8002a74:	2100      	movs	r1, #0
 8002a76:	6862      	ldr	r2, [r4, #4]
 8002a78:	0028      	movs	r0, r5
 8002a7a:	f000 f859 	bl	8002b30 <memchr>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d001      	beq.n	8002a86 <_printf_i+0x166>
 8002a82:	1b40      	subs	r0, r0, r5
 8002a84:	6060      	str	r0, [r4, #4]
 8002a86:	6863      	ldr	r3, [r4, #4]
 8002a88:	6123      	str	r3, [r4, #16]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9a02      	ldr	r2, [sp, #8]
 8002a8e:	7013      	strb	r3, [r2, #0]
 8002a90:	e03c      	b.n	8002b0c <_printf_i+0x1ec>
 8002a92:	6923      	ldr	r3, [r4, #16]
 8002a94:	002a      	movs	r2, r5
 8002a96:	9904      	ldr	r1, [sp, #16]
 8002a98:	9803      	ldr	r0, [sp, #12]
 8002a9a:	9d05      	ldr	r5, [sp, #20]
 8002a9c:	47a8      	blx	r5
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	d03e      	beq.n	8002b20 <_printf_i+0x200>
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d415      	bmi.n	8002ad4 <_printf_i+0x1b4>
 8002aa8:	9b07      	ldr	r3, [sp, #28]
 8002aaa:	68e0      	ldr	r0, [r4, #12]
 8002aac:	4298      	cmp	r0, r3
 8002aae:	da39      	bge.n	8002b24 <_printf_i+0x204>
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	e037      	b.n	8002b24 <_printf_i+0x204>
 8002ab4:	0022      	movs	r2, r4
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	3219      	adds	r2, #25
 8002aba:	9904      	ldr	r1, [sp, #16]
 8002abc:	9803      	ldr	r0, [sp, #12]
 8002abe:	9e05      	ldr	r6, [sp, #20]
 8002ac0:	47b0      	blx	r6
 8002ac2:	1c43      	adds	r3, r0, #1
 8002ac4:	d02c      	beq.n	8002b20 <_printf_i+0x200>
 8002ac6:	3501      	adds	r5, #1
 8002ac8:	68e3      	ldr	r3, [r4, #12]
 8002aca:	9a07      	ldr	r2, [sp, #28]
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	42ab      	cmp	r3, r5
 8002ad0:	dcf0      	bgt.n	8002ab4 <_printf_i+0x194>
 8002ad2:	e7e9      	b.n	8002aa8 <_printf_i+0x188>
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	e7f7      	b.n	8002ac8 <_printf_i+0x1a8>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d0ad      	beq.n	8002a38 <_printf_i+0x118>
 8002adc:	9d02      	ldr	r5, [sp, #8]
 8002ade:	0039      	movs	r1, r7
 8002ae0:	f7fd fb98 	bl	8000214 <__aeabi_uidivmod>
 8002ae4:	5c73      	ldrb	r3, [r6, r1]
 8002ae6:	3d01      	subs	r5, #1
 8002ae8:	702b      	strb	r3, [r5, #0]
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d1f7      	bne.n	8002ade <_printf_i+0x1be>
 8002aee:	2f08      	cmp	r7, #8
 8002af0:	d109      	bne.n	8002b06 <_printf_i+0x1e6>
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	07db      	lsls	r3, r3, #31
 8002af6:	d506      	bpl.n	8002b06 <_printf_i+0x1e6>
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	6922      	ldr	r2, [r4, #16]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	dc02      	bgt.n	8002b06 <_printf_i+0x1e6>
 8002b00:	2330      	movs	r3, #48	; 0x30
 8002b02:	3d01      	subs	r5, #1
 8002b04:	702b      	strb	r3, [r5, #0]
 8002b06:	9b02      	ldr	r3, [sp, #8]
 8002b08:	1b5b      	subs	r3, r3, r5
 8002b0a:	6123      	str	r3, [r4, #16]
 8002b0c:	9b05      	ldr	r3, [sp, #20]
 8002b0e:	aa07      	add	r2, sp, #28
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	0021      	movs	r1, r4
 8002b14:	9b04      	ldr	r3, [sp, #16]
 8002b16:	9803      	ldr	r0, [sp, #12]
 8002b18:	f7ff fe94 	bl	8002844 <_printf_common>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d1b8      	bne.n	8002a92 <_printf_i+0x172>
 8002b20:	2001      	movs	r0, #1
 8002b22:	4240      	negs	r0, r0
 8002b24:	b009      	add	sp, #36	; 0x24
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b28:	08002dc5 	.word	0x08002dc5
 8002b2c:	08002dd6 	.word	0x08002dd6

08002b30 <memchr>:
 8002b30:	b2c9      	uxtb	r1, r1
 8002b32:	1882      	adds	r2, r0, r2
 8002b34:	4290      	cmp	r0, r2
 8002b36:	d101      	bne.n	8002b3c <memchr+0xc>
 8002b38:	2000      	movs	r0, #0
 8002b3a:	4770      	bx	lr
 8002b3c:	7803      	ldrb	r3, [r0, #0]
 8002b3e:	428b      	cmp	r3, r1
 8002b40:	d0fb      	beq.n	8002b3a <memchr+0xa>
 8002b42:	3001      	adds	r0, #1
 8002b44:	e7f6      	b.n	8002b34 <memchr+0x4>

08002b46 <memcpy>:
 8002b46:	2300      	movs	r3, #0
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d100      	bne.n	8002b50 <memcpy+0xa>
 8002b4e:	bd10      	pop	{r4, pc}
 8002b50:	5ccc      	ldrb	r4, [r1, r3]
 8002b52:	54c4      	strb	r4, [r0, r3]
 8002b54:	3301      	adds	r3, #1
 8002b56:	e7f8      	b.n	8002b4a <memcpy+0x4>

08002b58 <memmove>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4288      	cmp	r0, r1
 8002b5c:	d902      	bls.n	8002b64 <memmove+0xc>
 8002b5e:	188b      	adds	r3, r1, r2
 8002b60:	4298      	cmp	r0, r3
 8002b62:	d303      	bcc.n	8002b6c <memmove+0x14>
 8002b64:	2300      	movs	r3, #0
 8002b66:	e007      	b.n	8002b78 <memmove+0x20>
 8002b68:	5c8b      	ldrb	r3, [r1, r2]
 8002b6a:	5483      	strb	r3, [r0, r2]
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	d2fb      	bcs.n	8002b68 <memmove+0x10>
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	5ccc      	ldrb	r4, [r1, r3]
 8002b74:	54c4      	strb	r4, [r0, r3]
 8002b76:	3301      	adds	r3, #1
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1fa      	bne.n	8002b72 <memmove+0x1a>
 8002b7c:	e7f8      	b.n	8002b70 <memmove+0x18>
	...

08002b80 <_free_r>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	0005      	movs	r5, r0
 8002b84:	2900      	cmp	r1, #0
 8002b86:	d010      	beq.n	8002baa <_free_r+0x2a>
 8002b88:	1f0c      	subs	r4, r1, #4
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da00      	bge.n	8002b92 <_free_r+0x12>
 8002b90:	18e4      	adds	r4, r4, r3
 8002b92:	0028      	movs	r0, r5
 8002b94:	f000 f8d4 	bl	8002d40 <__malloc_lock>
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <_free_r+0x90>)
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <_free_r+0x2c>
 8002ba0:	6063      	str	r3, [r4, #4]
 8002ba2:	6014      	str	r4, [r2, #0]
 8002ba4:	0028      	movs	r0, r5
 8002ba6:	f000 f8cc 	bl	8002d42 <__malloc_unlock>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	42a3      	cmp	r3, r4
 8002bae:	d909      	bls.n	8002bc4 <_free_r+0x44>
 8002bb0:	6821      	ldr	r1, [r4, #0]
 8002bb2:	1860      	adds	r0, r4, r1
 8002bb4:	4283      	cmp	r3, r0
 8002bb6:	d1f3      	bne.n	8002ba0 <_free_r+0x20>
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	1841      	adds	r1, r0, r1
 8002bbe:	6021      	str	r1, [r4, #0]
 8002bc0:	e7ee      	b.n	8002ba0 <_free_r+0x20>
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	2a00      	cmp	r2, #0
 8002bc8:	d001      	beq.n	8002bce <_free_r+0x4e>
 8002bca:	42a2      	cmp	r2, r4
 8002bcc:	d9f9      	bls.n	8002bc2 <_free_r+0x42>
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	1858      	adds	r0, r3, r1
 8002bd2:	42a0      	cmp	r0, r4
 8002bd4:	d10b      	bne.n	8002bee <_free_r+0x6e>
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	1809      	adds	r1, r1, r0
 8002bda:	1858      	adds	r0, r3, r1
 8002bdc:	6019      	str	r1, [r3, #0]
 8002bde:	4282      	cmp	r2, r0
 8002be0:	d1e0      	bne.n	8002ba4 <_free_r+0x24>
 8002be2:	6810      	ldr	r0, [r2, #0]
 8002be4:	6852      	ldr	r2, [r2, #4]
 8002be6:	1841      	adds	r1, r0, r1
 8002be8:	6019      	str	r1, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	e7da      	b.n	8002ba4 <_free_r+0x24>
 8002bee:	42a0      	cmp	r0, r4
 8002bf0:	d902      	bls.n	8002bf8 <_free_r+0x78>
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	602b      	str	r3, [r5, #0]
 8002bf6:	e7d5      	b.n	8002ba4 <_free_r+0x24>
 8002bf8:	6821      	ldr	r1, [r4, #0]
 8002bfa:	1860      	adds	r0, r4, r1
 8002bfc:	4282      	cmp	r2, r0
 8002bfe:	d103      	bne.n	8002c08 <_free_r+0x88>
 8002c00:	6810      	ldr	r0, [r2, #0]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	1841      	adds	r1, r0, r1
 8002c06:	6021      	str	r1, [r4, #0]
 8002c08:	6062      	str	r2, [r4, #4]
 8002c0a:	605c      	str	r4, [r3, #4]
 8002c0c:	e7ca      	b.n	8002ba4 <_free_r+0x24>
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000090 	.word	0x20000090

08002c14 <_malloc_r>:
 8002c14:	2303      	movs	r3, #3
 8002c16:	b570      	push	{r4, r5, r6, lr}
 8002c18:	1ccd      	adds	r5, r1, #3
 8002c1a:	439d      	bics	r5, r3
 8002c1c:	3508      	adds	r5, #8
 8002c1e:	0006      	movs	r6, r0
 8002c20:	2d0c      	cmp	r5, #12
 8002c22:	d21e      	bcs.n	8002c62 <_malloc_r+0x4e>
 8002c24:	250c      	movs	r5, #12
 8002c26:	42a9      	cmp	r1, r5
 8002c28:	d81d      	bhi.n	8002c66 <_malloc_r+0x52>
 8002c2a:	0030      	movs	r0, r6
 8002c2c:	f000 f888 	bl	8002d40 <__malloc_lock>
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <_malloc_r+0xb4>)
 8002c32:	6814      	ldr	r4, [r2, #0]
 8002c34:	0021      	movs	r1, r4
 8002c36:	2900      	cmp	r1, #0
 8002c38:	d119      	bne.n	8002c6e <_malloc_r+0x5a>
 8002c3a:	4c24      	ldr	r4, [pc, #144]	; (8002ccc <_malloc_r+0xb8>)
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <_malloc_r+0x36>
 8002c42:	0030      	movs	r0, r6
 8002c44:	f000 f86a 	bl	8002d1c <_sbrk_r>
 8002c48:	6020      	str	r0, [r4, #0]
 8002c4a:	0029      	movs	r1, r5
 8002c4c:	0030      	movs	r0, r6
 8002c4e:	f000 f865 	bl	8002d1c <_sbrk_r>
 8002c52:	1c43      	adds	r3, r0, #1
 8002c54:	d12b      	bne.n	8002cae <_malloc_r+0x9a>
 8002c56:	230c      	movs	r3, #12
 8002c58:	0030      	movs	r0, r6
 8002c5a:	6033      	str	r3, [r6, #0]
 8002c5c:	f000 f871 	bl	8002d42 <__malloc_unlock>
 8002c60:	e003      	b.n	8002c6a <_malloc_r+0x56>
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	dadf      	bge.n	8002c26 <_malloc_r+0x12>
 8002c66:	230c      	movs	r3, #12
 8002c68:	6033      	str	r3, [r6, #0]
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
 8002c6e:	680b      	ldr	r3, [r1, #0]
 8002c70:	1b5b      	subs	r3, r3, r5
 8002c72:	d419      	bmi.n	8002ca8 <_malloc_r+0x94>
 8002c74:	2b0b      	cmp	r3, #11
 8002c76:	d903      	bls.n	8002c80 <_malloc_r+0x6c>
 8002c78:	600b      	str	r3, [r1, #0]
 8002c7a:	18cc      	adds	r4, r1, r3
 8002c7c:	6025      	str	r5, [r4, #0]
 8002c7e:	e003      	b.n	8002c88 <_malloc_r+0x74>
 8002c80:	684b      	ldr	r3, [r1, #4]
 8002c82:	428c      	cmp	r4, r1
 8002c84:	d10d      	bne.n	8002ca2 <_malloc_r+0x8e>
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	0030      	movs	r0, r6
 8002c8a:	f000 f85a 	bl	8002d42 <__malloc_unlock>
 8002c8e:	0020      	movs	r0, r4
 8002c90:	2207      	movs	r2, #7
 8002c92:	300b      	adds	r0, #11
 8002c94:	1d23      	adds	r3, r4, #4
 8002c96:	4390      	bics	r0, r2
 8002c98:	1ac3      	subs	r3, r0, r3
 8002c9a:	d0e7      	beq.n	8002c6c <_malloc_r+0x58>
 8002c9c:	425a      	negs	r2, r3
 8002c9e:	50e2      	str	r2, [r4, r3]
 8002ca0:	e7e4      	b.n	8002c6c <_malloc_r+0x58>
 8002ca2:	6063      	str	r3, [r4, #4]
 8002ca4:	000c      	movs	r4, r1
 8002ca6:	e7ef      	b.n	8002c88 <_malloc_r+0x74>
 8002ca8:	000c      	movs	r4, r1
 8002caa:	6849      	ldr	r1, [r1, #4]
 8002cac:	e7c3      	b.n	8002c36 <_malloc_r+0x22>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	1cc4      	adds	r4, r0, #3
 8002cb2:	439c      	bics	r4, r3
 8002cb4:	42a0      	cmp	r0, r4
 8002cb6:	d0e1      	beq.n	8002c7c <_malloc_r+0x68>
 8002cb8:	1a21      	subs	r1, r4, r0
 8002cba:	0030      	movs	r0, r6
 8002cbc:	f000 f82e 	bl	8002d1c <_sbrk_r>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d1db      	bne.n	8002c7c <_malloc_r+0x68>
 8002cc4:	e7c7      	b.n	8002c56 <_malloc_r+0x42>
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	20000090 	.word	0x20000090
 8002ccc:	20000094 	.word	0x20000094

08002cd0 <_realloc_r>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	0007      	movs	r7, r0
 8002cd4:	000d      	movs	r5, r1
 8002cd6:	0016      	movs	r6, r2
 8002cd8:	2900      	cmp	r1, #0
 8002cda:	d105      	bne.n	8002ce8 <_realloc_r+0x18>
 8002cdc:	0011      	movs	r1, r2
 8002cde:	f7ff ff99 	bl	8002c14 <_malloc_r>
 8002ce2:	0004      	movs	r4, r0
 8002ce4:	0020      	movs	r0, r4
 8002ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d103      	bne.n	8002cf4 <_realloc_r+0x24>
 8002cec:	f7ff ff48 	bl	8002b80 <_free_r>
 8002cf0:	0034      	movs	r4, r6
 8002cf2:	e7f7      	b.n	8002ce4 <_realloc_r+0x14>
 8002cf4:	f000 f826 	bl	8002d44 <_malloc_usable_size_r>
 8002cf8:	002c      	movs	r4, r5
 8002cfa:	42b0      	cmp	r0, r6
 8002cfc:	d2f2      	bcs.n	8002ce4 <_realloc_r+0x14>
 8002cfe:	0031      	movs	r1, r6
 8002d00:	0038      	movs	r0, r7
 8002d02:	f7ff ff87 	bl	8002c14 <_malloc_r>
 8002d06:	1e04      	subs	r4, r0, #0
 8002d08:	d0ec      	beq.n	8002ce4 <_realloc_r+0x14>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	0032      	movs	r2, r6
 8002d0e:	f7ff ff1a 	bl	8002b46 <memcpy>
 8002d12:	0029      	movs	r1, r5
 8002d14:	0038      	movs	r0, r7
 8002d16:	f7ff ff33 	bl	8002b80 <_free_r>
 8002d1a:	e7e3      	b.n	8002ce4 <_realloc_r+0x14>

08002d1c <_sbrk_r>:
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	b570      	push	{r4, r5, r6, lr}
 8002d20:	4c06      	ldr	r4, [pc, #24]	; (8002d3c <_sbrk_r+0x20>)
 8002d22:	0005      	movs	r5, r0
 8002d24:	0008      	movs	r0, r1
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	f7fd fca2 	bl	8000670 <_sbrk>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d103      	bne.n	8002d38 <_sbrk_r+0x1c>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d000      	beq.n	8002d38 <_sbrk_r+0x1c>
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	bd70      	pop	{r4, r5, r6, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	20000164 	.word	0x20000164

08002d40 <__malloc_lock>:
 8002d40:	4770      	bx	lr

08002d42 <__malloc_unlock>:
 8002d42:	4770      	bx	lr

08002d44 <_malloc_usable_size_r>:
 8002d44:	1f0b      	subs	r3, r1, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1f18      	subs	r0, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da01      	bge.n	8002d52 <_malloc_usable_size_r+0xe>
 8002d4e:	580b      	ldr	r3, [r1, r0]
 8002d50:	18c0      	adds	r0, r0, r3
 8002d52:	4770      	bx	lr

08002d54 <_init>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr

08002d60 <_fini>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr
